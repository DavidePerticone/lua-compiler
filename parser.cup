/*
Implemented:
-Single global variable initialization with a NUMBER or with another var


NOTICE: for now, inside the functions we can just declare local variables.

*/

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;
import java.util.Map.*;
import java.util.ArrayList;
import java.util.regex.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;


init with {:
   currentSymTable = new parser.SymbolTable(null); //Main symbol table for global variables included in all scopes
   funcBuffer = new StringBuffer(); //buffer for function declaration
   globalDecBuffer = new StringBuffer(); //buffer for global var declaration
   mainBuffer = new StringBuffer(); //buffer used for main function
   currentSymTable.currentBuffer=mainBuffer;
   bwr = new BufferedWriter(new FileWriter(new File("output.ll"))); //output file
   loopCount = 0;
   totLoopCount = 0;
   /*Structure:
   Global buffer
   Function buffer
   main buffer


   */
:};


parser code {:
    
public SymbolTable currentSymTable;
public StringBuffer funcBuffer;
public StringBuffer globalDecBuffer;
public StringBuffer mainBuffer;
public BufferedWriter bwr;
public int loopCount;
public int totLoopCount;

public enum Type {NUMBER, TABLE, IMMEDIATE, RNUM, BOOL}; //different types of values NUMBER means that the value is assigned to a var and is of type NUMBER, IMMEDIATE means it is a immediate read from file

public class SymbolTable{
        public ArrayList<ValueObj> varList;
        public ArrayList<ValueObj> expList;
        public HashMap<String, ValueObj> varTable;
        public int nargs;
        public Integer registerCount; //used as counter for SSA registers
        SymbolTable prev;
        StringBuffer currentBuffer;
        
        public SymbolTable(SymbolTable p){
            this.varTable = new HashMap<String, ValueObj>();
            this.varList = new ArrayList<ValueObj>();
            this.expList = new ArrayList<ValueObj>();
            this.nargs = 0;
            this.prev = p;
            registerCount=1;
        }

        public ValueObj get(String s){
            for (SymbolTable sym = this; sym != null; sym = sym.prev){
                ValueObj found = sym.varTable.get(s);
                if (found != null)
                    return found;
            }
            return null;
        }
    }


public class ValueObj {

		Double value;
        public String name;
        public Type type;
        public String scope;

		public ValueObj(String name) {
			super();
			this.name = name;
            type = null;
		}

        public ValueObj(Double value){
            this.value=value;
            type = Type.IMMEDIATE;
        }

        public void setDouble(){
            this.type= Type.NUMBER;
        }

        public void setGlobal(){
            scope="@";
        }

        public void setLocal(){
            scope="%";
        }

        public void setRNUM(){
            this.type=Type.RNUM;
        }

        public void setBool(){
            this.type=Type.BOOL;
        }

        
  
 
    }


:};





action code {:

    public void appendFuncBuffer(String s, boolean newLine){
        funcBuffer.append(s);
        if (newLine)
            funcBuffer.append("\n");
    }

    public void appendGlobalDecBuffer(String s, boolean newLine){
        globalDecBuffer.append(s);
        if (newLine)
            globalDecBuffer.append("\n");
    }

    public void appendMainBuffer(String s, boolean newLine){
       currentSymTable.currentBuffer.append(s);
        if (newLine)
            currentSymTable.currentBuffer.append("\n");
    }

    public String getRegister(){
        return String.valueOf(currentSymTable.registerCount++);
    }

    public String createGlovalVarLLVM(String name, String type, String value){

            return "@"+name+" = " +"global "+type+" "+value+ ", align 8";

    }

    public String storeLLVM(String source, String sourceType, String dest, String destType, String align){
          //  store i32 %4, i32* %3, align 4
          return "store " + sourceType +" " + source+ ", " + destType+"* "+dest+", align " +align;

    }

    public String loadLLVM(String outName, String outType, String inputType, String inputName, String align ){
        // %2 = load double, double* @b, align 8

        return outName+" = " + "load " + outType+", "+inputType+"* "+inputName+", "+"align "+align;

    }

   /* public String loadLLVM2(String outName, String firstOp, String SecondOp, String align){
        // %2 = load double, double* @b, align 8

        return outName+" = " + "load " + firstOp+", "+inputType+"* "+inputName+", "+"align "+align;

    }*/

    public void initVarOld(ValueObj n, ValueObj x){
                                    //if the variable has never been used before, it means that must be declared
                        if(n.type == null && x.type == Type.IMMEDIATE){ //if the value to which initiliaze is an immediate
                            
                            n.setDouble(); //set type number in the variable
                            n.setGlobal();
                            //@X = global i32 17
                            //createGlovalVarLLVM(String name, String type, String value){
                            System.out.println(createGlovalVarLLVM(n.name, "double", ""+x.value));
                            appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", ""+x.value), true); //append to the Global declaration buffer

                        }else if(n.type == Type.NUMBER && x.type == Type.IMMEDIATE){ //if type is not null, it has been already declared and must be loaded with a new value
                                //store double 6.000000e+00, double* @a, align 8
                               
                                
                                 appendMainBuffer( storeLLVM(""+x.value, "double", n.scope+n.name, "double", "8"), true); //load with a new value
                        }else if(n.type == null && x.type == Type.NUMBER){ //if new var is undeclared and we initialize with a variable already declared
                                 n.setDouble(); //set type number in the variable
                                 n.setGlobal();
                                appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", "0.0"), true); //append to  the Global declaration buffer
                                //(String outName, String outType, String inputType, String inputName, String align )
                                String reg = getRegister(); //get a new register
                                appendMainBuffer(loadLLVM("%"+reg, "double", "double", x.scope+x.name,"8"), true); //save the value of the var into the register
                                appendMainBuffer( storeLLVM("%"+reg, "double", n.scope+n.name, "double", "8"), true); //store new var with value pointed by the variable
                        }else if(n.type == Type.NUMBER && x.type == Type.NUMBER){ //if both var have already been declared and we want to assigne one to the other
                                  String reg = getRegister();
                                 appendMainBuffer(loadLLVM("%"+reg, "double", "double", x.scope+x.name,"8"), true);
                                 appendMainBuffer(storeLLVM("%"+reg, "double", n.scope+n.name, "double", "8"), true); 
                        }else if(n.type == Type.NUMBER && x.type == Type.RNUM){ //if var already declared and RHS is a register containing a num
                            appendMainBuffer(storeLLVM("%"+x.name, "double", n.scope+n.name, "double", "8"), true); 

                        }else if(n.type == null && x.type == Type.RNUM){ //if var already declared and RHS is a register containing a num
                            n.setDouble(); //set type number in the variable
                            n.setGlobal();
                            appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", "0.0"), true); //append to  the Global declaration buffer
                            appendMainBuffer(storeLLVM("%"+x.name, "double", n.scope+n.name, "double", "8"), true); 

                        }


    }

     public void initVar(ValueObj n, ValueObj x){

                        String op1, op2;

                        if(x.type == Type.IMMEDIATE){
                            op2=""+x.value;
                            if(n.type == null){
                            n.setDouble(); //set type number in the variable
                            n.setGlobal();
                            appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", ""+op2), true); //append to the Global declaration buffer
                            }else if(n.type == Type.NUMBER){
                            appendMainBuffer( storeLLVM(""+op2, "double", n.scope+n.name, "double", "8"), true); //load with a new value
                        }
                        }else if(x.type == Type.NUMBER){
                            op2=x.scope+x.name;
                            if(n.type == null){
                                n.setDouble(); //set type number in the variable
                                n.setGlobal();
                                appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", "0.0"), true); //append to  the Global declaration buffer
                                String reg = getRegister(); //get a new register
                                appendMainBuffer(loadLLVM("%"+reg, "double", "double", op2,"8"), true); //save the value of the var into the register
                                appendMainBuffer( storeLLVM("%"+reg, "double", n.scope+n.name, "double", "8"), true); //store new var with value pointed by the variable
                            }else if(n.type == Type.NUMBER){
                                String reg = getRegister();
                                appendMainBuffer(loadLLVM("%"+reg, "double", "double", x.scope+x.name,"8"), true);
                                appendMainBuffer(storeLLVM("%"+reg, "double", n.scope+n.name, "double", "8"), true); 

                            }
                        }else if(x.type == Type.RNUM){
                            op2="%"+x.name;
                            if(n.type == null){
                                n.setDouble(); //set type number in the variable
                                n.setGlobal();
                                appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", "0.0"), true); //append to  the Global declaration buffer
                                appendMainBuffer(storeLLVM(op2, "double", n.scope+n.name, "double", "8"), true); 
                            }else if(n.type == Type.NUMBER){
                            appendMainBuffer(storeLLVM(op2, "double", n.scope+n.name, "double", "8"), true);
                            }
                        }
    }

    public ValueObj operationOld(String operation, ValueObj x, ValueObj y){ //type of operation, value of first operand, value of second operand
                            ValueObj RESULT=null; //final result to return
                            String a; //variables for registers
                            String b;
                            String r;
                            if( x.type==Type.NUMBER && y.type==Type.NUMBER){ //if both operands are variables
                                a=getRegister(); //we nned three register
                                b=getRegister();
                                r=getRegister();
                                appendMainBuffer(loadLLVM("%"+a, "double", "double", x.scope+x.name, "8"), true); //load value of first
                                appendMainBuffer(loadLLVM("%"+b, "double", "double", y.scope+y.name, "8" ), true); //load value of second
                                appendMainBuffer("%"+r+" = "+ operation +" double "+"%"+a+", %"+b, true); //perform operation and save in register
                                RESULT=new ValueObj(r); //the returning value is a register containing a number, so we set the name as the number of the register
                                RESULT.setLocal();
                                RESULT.setRNUM(); //we set the type as RNUM because it is a number into a register
                            }else if(x.type==Type.IMMEDIATE && y.type==Type.IMMEDIATE){ //if both are immediates, perform operation at compile time
                                ///create switch
                                if(operation.compareTo("fadd")==0)
                                    RESULT=new ValueObj(x.value+y.value);
                                else if(operation.compareTo("fsub")==0)
                                    RESULT=new ValueObj(x.value-y.value);
                                else if(operation.compareTo("fmul")==0)
                                    RESULT=new ValueObj(x.value*y.value);
                                else if(operation.compareTo("fdiv")==0)
                                    RESULT=new ValueObj(x.value/y.value);
                                RESULT.type=Type.IMMEDIATE; //the returning value is itself and integer
                            }else if((x.type==Type.IMMEDIATE || x.type==Type.RNUM) && y.type==Type.NUMBER ){ //if one is an (immedaite or RNUM) and the other a var
                                a=getRegister(); 
                                r=getRegister();
                                if(x.type==Type.RNUM){ //if it is a RNUM it is enough to set the name to the register name with %
                                    x.name="%"+x.name;
                                }else{
                                     
                                    x.name=""+x.value; //else just use the plain value
                                     
                                }
                                appendMainBuffer(loadLLVM("%"+a, "double", "double", y.scope+y.name, "8"), true);
                                appendMainBuffer("%"+r+" = "+ operation +" double "+x.name+", %"+a, true);
                                RESULT=new ValueObj(r);
                               RESULT.setLocal();
                                 RESULT.setRNUM();
                            }else if((y.type==Type.IMMEDIATE || y.type==Type.RNUM) && x.type==Type.NUMBER){
                                 a=getRegister();
                                 r=getRegister();
                                 if(y.type==Type.RNUM){
                                    y.name="%"+y.name;
                                }else{
                                     
                                   y.name=""+y.value;
                                     
                                }
                                appendMainBuffer(loadLLVM("%"+a, "double", "double", x.scope+x.name, "8"), true);
                                appendMainBuffer("%"+r+" = "+ operation +" double "+y.name+", %"+a, true);
                                RESULT=new ValueObj(r);
                                RESULT.setLocal();
                                RESULT.setRNUM();
                            }else if(x.type==Type.RNUM && y.type==Type.RNUM ){ //if both operands are register contaning values
                                r=getRegister(); //create return register
                                appendMainBuffer("%"+r+" = "+ operation +" double "+"%"+x.name+", %"+y.name, true); //simply perform the operation
                                RESULT=new ValueObj(r);
                                RESULT.setLocal();
                                RESULT.setRNUM();//set result to RNUM
                            }else if(x.type==Type.RNUM && y.type==Type.IMMEDIATE){
                                r=getRegister(); //create return register
                                appendMainBuffer("%"+r+" = "+ operation +" double "+"%"+x.name+", "+y.value, true); //simply perform the operation
                                RESULT=new ValueObj(r);
                                RESULT.setLocal();
                                RESULT.setRNUM();//set result to RNUM

                            }else if(x.type==Type.IMMEDIATE && y.type==Type.RNUM){
                                r=getRegister(); //create return register
                                appendMainBuffer("%"+r+" = "+ operation +" double "+"%"+y.name+", "+x.value, true); //simply perform the operation
                                RESULT=new ValueObj(r);
                                RESULT.setLocal();
                                RESULT.setRNUM();//set result to RNUM

                            }
                            return RESULT;
                           
    }

     public ValueObj operation(String operation, ValueObj x, ValueObj y){ //type of operation, value of first operand, value of second operand
                            ValueObj RESULT=null; //final result to return
                            String a=null; //variables for registers
                            String b=null;
                            String r=null;
                            String op1=null, op2=null;


                             if(x.type==Type.IMMEDIATE && y.type==Type.IMMEDIATE){ //if both are immediates, perform operation at compile time
                                ///create switch
                                if(operation.compareTo("fadd")==0)
                                    RESULT=new ValueObj(x.value+y.value);
                                else if(operation.compareTo("fsub")==0)
                                    RESULT=new ValueObj(x.value-y.value);
                                else if(operation.compareTo("fmul")==0)
                                    RESULT=new ValueObj(x.value*y.value);
                                else if(operation.compareTo("fdiv")==0)
                                    RESULT=new ValueObj(x.value/y.value);
                                RESULT.type=Type.IMMEDIATE; //the returning value is itself and integer
                            }else{

                                if (x.type==Type.NUMBER){
                                     a=getRegister();
                                     appendMainBuffer(loadLLVM("%"+a, "double", "double", x.scope+x.name, "8"), true); //load value of first
                                     op1="%"+a;
                                }else if(x.type==Type.IMMEDIATE){
                                    op1=""+x.value;
                                }else if(x.type==Type.RNUM){
                                     op1="%"+x.name;
                                }
                                
                                if(y.type==Type.NUMBER){
                                    b=getRegister();
                                    appendMainBuffer(loadLLVM("%"+b, "double", "double", y.scope+y.name, "8" ), true); //load value of second
                                    op2="%"+b;
                                }else if(y.type==Type.IMMEDIATE){
                                    op2=""+y.value;
                                }else if(y.type==Type.RNUM){
                                     op2="%"+y.name;
                                }
                                r=getRegister();
                                appendMainBuffer("%"+r+" = "+ operation +" double "+op1+", " +op2, true); //perform operation and save in register
                                RESULT = new ValueObj(r);
                                RESULT.setLocal();
                                RESULT.setRNUM();
                            }
                           
                           
                            return RESULT;
    } 

    public ValueObj logicExpEval(String operation, ValueObj x, ValueObj y){

            
                    String op1=null;
                    String op2=null;
                    if(x.type == Type.IMMEDIATE){ //if first operand is and immediate
                        op1=""+x.value;             //just store the value
                    }else if(x.type == Type.NUMBER){    //if it is a var
                        String reg=getRegister(); 
                        //loadLLVM(String outName, String outType, String inputType, String inputName, String align )
                        appendMainBuffer(loadLLVM("%"+reg, "double", "double", x.scope+x.name, "8" ),true); //load it
                        op1="%"+reg; //save register where it is loaded
                    }if(y.type == Type.IMMEDIATE){ //same as first operand
                        op2=""+y.value;
                    }else if(y.type == Type.NUMBER){
                        String reg=getRegister();
                         appendMainBuffer(loadLLVM("%"+reg, "double", "double", y.scope+y.name, "8" ), true);
                        op2="%"+reg;
                    }
                    String result = getRegister(); //get register for output
                    appendMainBuffer("%"+result + " = fcmp "+ operation +" double " + op1 +", " + op2, true); //calculate result
                    ValueObj RESULT =  new ValueObj(result); //return new value
                    RESULT.setBool();
                    RESULT.setLocal();
                    
                    return RESULT;

    }                
    
:}




//Terminal tokens
terminal MIN, UMIN, MAJ, MIN_EQ, MAJ_EQ, AND, OR, NOT, SO, SC, EQ, NOTEQ;
terminal RO, RC, BO, BC, PLUS, MINUS, STAR, DIV, HAT, CM;
terminal DO, FOR, IF, ELSE, THEN, END, LOCAL;
terminal  STRING, NIL;
terminal WHILE, REPEAT, UNTIL, FUNCTION, RETURN, PRINT;
terminal String ID;
terminal Double NUMBER;
//Non terminal tokens
non terminal global_var_init, local_var, block, array_dec;
non terminal  local_var_init, local_var_list, var_list, ass_list;
non terminal for_loop, stmt_list, stmt,  assignment;
non terminal while_loop, repeat_loop, if_block, else_block, ret;
non terminal print_func_args, func_list, instr_list, prog, finish, function_decl, print_func, func_param_list, func_call, declaration;
non terminal ValueObj var;
non terminal ValueObj ass_exp, loop_cond, exp;

//Precedences
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left MIN, MAJ, MIN_EQ, MAJ_EQ, EQ, NOTEQ;
precedence left PLUS, MINUS;
precedence left STAR, DIV;
precedence left NOT, UMIN;
precedence right HAT;

/***********************/
/**** GRAMMAR START ****/
/***********************/
start with prog;


prog ::= func_list {:

       bwr.write(funcBuffer.toString());

:}  stmt_list  {:
		 bwr.write(globalDecBuffer.toString());
	    bwr.write("define void @main(){\n");
        bwr.write(mainBuffer.toString());
	
	
		bwr.write("ret void\n}");
		bwr.flush();
 
		//close the stream
		bwr.close();
	
	
	
:};


/*****************************/
/**** DECLARATIONS ****/
/*****************************/

declaration ::= local_var_init | local_var_list | global_var_init | assignment;


/**********************/
/**** INSTRUCTIONS ****/
/**********************/



stmt_list ::= stmt_list stmt | stmt ;

stmt ::= if_block | for_loop | print_func | ret | declaration | func_call  | while_loop | repeat_loop | block;


/* expressions: 
    Arithmetic
    Logical
    Relational
    Concatenation ---TODO
*/

exp ::= RO exp:x RC {: RESULT = x; :}
| NUMBER:x {:
                RESULT=new ValueObj(x);

            :}
| MINUS NUMBER:x  {:    RESULT=new ValueObj(-x);   :} %prec UMIN
| var:x {:  RESULT=x;  :}
| NIL
| func_call
/* Arithmetic expressions */
| exp:x  PLUS exp:y  {:  RESULT=operation("fadd", x, y); :}
| exp:x  MINUS exp:y  {: RESULT=operation("fsub", x, y);  :}
| exp:x  STAR exp:y   {: RESULT=operation("fmul", x, y);  :}
| exp:x  DIV exp:y   {: RESULT=operation("fdiv", x, y);  :}
| exp:x HAT exp:y
/* Logical expressions */
| exp:x  AND exp:y {:                         
                    String r = getRegister();
                    appendMainBuffer("%"+r+ " = and" + " i1 " + x.scope+x.name+", "+ y.scope+y.name, true );
                    ValueObj bool = new ValueObj(r);
                    bool.setBool();
                    bool.setLocal();
                    RESULT = bool;
                :}
|  exp:x  OR exp:y {:                         
                    String r = getRegister();
                    appendMainBuffer("%"+r+ " = or" + " i1 " + x.scope+x.name+", "+ y.scope+y.name, true );
                    ValueObj bool = new ValueObj(r);
                    bool.setBool();
                    bool.setLocal();
                    RESULT = bool;
                :}  
| NOT exp:x {:                         
                    System.out.println("NOT bitwise operation not supported!!");
                :}  
/* Relational expressions */
| exp:x  EQ EQ exp:y  {: RESULT=logicExpEval("oeq", x, y);  :}
| exp:x  NOTEQ exp:y   {: RESULT=logicExpEval("one", x, y); :}
| exp:x  MIN exp:y  {:  RESULT=logicExpEval("olt", x, y); :}
| exp:x  MAJ exp:y  {:  RESULT=logicExpEval("ogt", x, y); :}
| exp:x MIN_EQ exp:y  {: RESULT=logicExpEval("ole", x, y); :}
| exp:x  MAJ_EQ exp:y  {: RESULT=logicExpEval("oge", x, y); :}
| RO error RC 
;

//Expression list like 2*2, 2, 4, 2^2
ass_list ::= ass_list CM ass_exp:x {: currentSymTable.expList.add(x);   :}| ass_exp:x {: currentSymTable.expList.add(x);   :};
ass_exp ::= exp:x {:
                        RESULT=x;
                :}

            | array_dec;

//1-D table

array_dec ::= BO ass_list BC | BO BC;

//local declaration

local_var_list ::= LOCAL var_list;
local_var_init ::= local_var_list EQ ass_list;


//global declaration and initialization
global_var_init ::= var_list EQ ass_list  {://check is sizes match and generate error if not
                                            for(int i=0; i<currentSymTable.varList.size(); i++){                                               
                                                initVar(currentSymTable.varList.get(i), currentSymTable.expList.get(i));
                                            }
                                            currentSymTable.varList.clear();
                                            currentSymTable.expList.clear();
                                            
                                            :};

//simple assignemtn
assignment ::= var:n EQ ass_exp:x {:initVar(n, x);:};



/*******************/
/**** VARIABLES ****/
/*******************/

//Variable list like a, b, c, d
var_list ::= var_list CM var:x {:  currentSymTable.varList.add(x) ;    :} //Store in a buffer list all the variables of var_list for later init.

            | var:x {: parser.currentSymTable.varList.add(x);   :} //Store in a buffer list all the variables of var_list for later init.


 ;
//BUG: b=a+b if we try to assign a new var  to itself. Delay the entry in the symbol table later
//simple var
var ::= ID:n {: 
                RESULT =currentSymTable.varTable.get(n);
                if(RESULT == null){		
		                ValueObj var = new ValueObj(n);
		                currentSymTable.varTable.put(n, var);
		                RESULT=var;
                      }
               
            :}


        | ID SO exp SC;




/***********************************/
/**** FLOW CONTROL INSTRUCTIONS ****/
/***********************************/

//block do-end

block ::= DO stmt_list END;

//loop condition
loop_cond ::=  exp:x {: RESULT=x; :} ;

//loop 

for_loop ::= FOR assignment CM loop_cond CM loop_cond DO stmt_list END 
           ;

//while loop        

while_loop ::= WHILE {:
    loopCount = ++totLoopCount;
    appendMainBuffer(("br label %for.cond." + loopCount), true);
    appendMainBuffer(("for.cond." + loopCount + ":"), true);
:} loop_cond:x {:
    appendMainBuffer(("br i1 " + x.scope+x.name + ", label %for.body." + loopCount + ", label %for.exit." + loopCount), true);
:} DO {:
    appendMainBuffer(("for.body." + loopCount + ":"), true);
:} stmt_list END{:
    appendMainBuffer(("br label %for.cond." + loopCount), true);
    appendMainBuffer(("for.exit." + loopCount + ":"), true);

    loopCount--;
:};


//repeat-until loop

repeat_loop ::= REPEAT stmt_list UNTIL loop_cond ; 



//if instruction
//TODO: IMPLEMENT LOCAL SCOPE
if_block ::= IF  {: loopCount = ++totLoopCount; :} exp:x {:
        
        appendMainBuffer(("br i1 " + x.scope+x.name + ", label %if.body." + loopCount + ", label %if.else." + loopCount), true);
     
        :}  THEN {:appendMainBuffer(("if.body." + loopCount + ":"), true);:} stmt_list  else_block END
                | IF error else_block END{: System.out.println("error");:};

else_block ::= {: 
    appendMainBuffer(("br label %if.exit." + loopCount), true);
:} ELSE {: 
    appendMainBuffer(("if.else." + loopCount + ":"), true); 
:}stmt_list {:
    appendMainBuffer(("br label %if.exit." + loopCount), true);
    appendMainBuffer(("if.exit." + loopCount + ":"), true);

    loopCount--;
:}|{:
    appendMainBuffer(("br label %if.else." + loopCount), true);
    appendMainBuffer(("if.else." + loopCount + ":"), true);

    loopCount--;
:} ;


/*******************/
/**** FUNCTIONS ****/
/*******************/


func_list ::= | func_list function_decl;
function_decl ::= FUNCTION {: currentSymTable = new SymbolTable(currentSymTable); 
                              currentSymTable.currentBuffer=funcBuffer;

                 :}ID RO func_param_list RC stmt_list END {: currentSymTable = currentSymTable.prev; currentSymTable.currentBuffer=mainBuffer; :};
//When entering into a function, it is necessary to switch the StringBuffer --> Need to add stringbuffer in the symbol table

/*define <retval> @<funcName> (<type>, ..., <type>) {
  ...
  ret <type> <expression>
}*/

ret ::= RETURN exp;
        //| RETURN;


print_func ::= PRINT RO print_func_args RC ;
                
                


print_func_args ::= print_func_args CM STRING | print_func_args CM exp |  STRING | exp ;

func_param_list ::= func_param_list CM exp 
                    | exp   ;


func_call ::= ID:name RO  func_param_list RC;





