
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;
import java.util.Map.*;
import java.util.ArrayList;
import java.util.regex.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\023\003\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\012\004\000\002\012\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\032\005\000\002\032\003\000\002" +
    "\032\004\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\004\000\002\032\006\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\010\005" +
    "\000\002\010\003\000\002\030\003\000\002\006\004\000" +
    "\002\005\005\000\002\002\005\000\002\004\007\000\002" +
    "\004\007\000\002\004\006\000\002\033\005\000\002\033" +
    "\005\000\002\007\005\000\002\007\003\000\002\007\005" +
    "\000\002\027\003\000\002\027\006\000\002\036\002\000" +
    "\002\003\006\000\002\031\003\000\002\037\002\000\002" +
    "\040\002\000\002\041\002\000\002\042\002\000\002\011" +
    "\017\000\002\011\013\000\002\043\002\000\002\044\002" +
    "\000\002\045\002\000\002\014\012\000\002\014\006\000" +
    "\002\046\002\000\002\047\002\000\002\050\002\000\002" +
    "\015\011\000\002\051\002\000\002\052\002\000\002\053" +
    "\002\000\002\054\002\000\002\016\014\000\002\016\007" +
    "\000\002\055\002\000\002\056\002\000\002\017\006\000" +
    "\002\017\002\000\002\022\003\000\002\022\002\000\002" +
    "\057\002\000\002\060\002\000\002\024\014\000\002\024" +
    "\010\000\002\020\004\000\002\020\004\000\002\025\006" +
    "\000\002\061\002\000\002\025\014\000\002\062\002\000" +
    "\002\025\007\000\002\034\005\000\002\034\003\000\002" +
    "\034\002\000\002\035\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\030\032\041\034\024\035\035\036\020\042" +
    "\014\045\013\046\037\050\017\051\015\052\030\053\022" +
    "\001\002\000\042\002\uffeb\003\uffeb\032\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\041\uffeb\042\uffeb\045\uffeb\046\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\001\002\000" +
    "\042\002\ufff1\003\ufff1\032\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\041\ufff1\042\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\001\002\000\042\002\uffef" +
    "\003\uffef\032\uffef\034\uffef\035\uffef\036\uffef\037\uffef\041" +
    "\uffef\042\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef" +
    "\052\uffef\053\uffef\001\002\000\042\002\ufff3\003\ufff3\032" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\041\ufff3\042\ufff3" +
    "\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053" +
    "\ufff3\001\002\000\042\002\ufffc\003\ufffc\032\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\041\ufffc\042\ufffc\045\ufffc\046" +
    "\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\001\002" +
    "\000\006\016\310\031\255\001\002\000\044\002\ufffb\003" +
    "\ufffb\016\306\032\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\041\ufffb\042\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\001\002\000\020\003\274\013\uffbc" +
    "\020\uffbc\025\uffbc\043\uffbc\053\uffbc\056\uffbc\001\002\000" +
    "\004\053\127\001\002\000\020\003\272\013\064\020\055" +
    "\025\056\043\057\053\022\056\060\001\002\000\004\002" +
    "\270\001\002\000\006\020\246\053\uffa7\001\002\000\020" +
    "\003\224\013\uffb3\020\uffb3\025\uffb3\043\uffb3\053\uffb3\056" +
    "\uffb3\001\002\000\042\002\uffed\003\uffed\032\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\041\uffed\042\uffed\045\uffed\046" +
    "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\001\002" +
    "\000\112\002\uffc7\003\uffc7\004\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\014\161\015\uffc7\016\uffc7\017\uffc7" +
    "\020\221\021\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\001\002\000\032" +
    "\002\000\032\041\034\024\035\035\036\020\042\014\045" +
    "\013\046\037\050\017\051\015\052\030\053\022\001\002" +
    "\000\030\032\uffc5\034\uffc5\035\uffc5\036\uffc5\042\uffc5\045" +
    "\uffc5\046\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\001\002" +
    "\000\042\002\ufff0\003\ufff0\032\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\041\ufff0\042\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\050\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002\000\042\002" +
    "\uffec\003\uffec\032\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\041\uffec\042\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\001\002\000\042\002\ufff9\003\ufff9" +
    "\032\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\041\ufff9\042" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9" +
    "\053\ufff9\001\002\000\004\020\175\001\002\000\042\002" +
    "\ufff4\003\ufff4\032\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4" +
    "\041\ufff4\042\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\001\002\000\042\002\ufff5\003\ufff5" +
    "\032\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\041\ufff5\042" +
    "\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\001\002\000\042\002\ufff8\003\ufff8\032\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\041\ufff8\042\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\001" +
    "\002\000\006\016\164\031\uffc9\001\002\000\006\003\131" +
    "\053\127\001\002\000\042\002\ufffa\003\ufffa\032\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\041\ufffa\042\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\001" +
    "\002\000\030\032\uffb7\034\uffb7\035\uffb7\036\uffb7\042\uffb7" +
    "\045\uffb7\046\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\001" +
    "\002\000\042\002\ufff6\003\ufff6\032\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\041\ufff6\042\ufff6\045\ufff6\046\ufff6\047" +
    "\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\001\002\000\010" +
    "\003\045\033\044\055\046\001\002\000\042\002\ufff2\003" +
    "\ufff2\032\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\041\ufff2" +
    "\042\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\001\002\000\042\002\uffee\003\uffee\032\uffee" +
    "\034\uffee\035\uffee\036\uffee\037\uffee\041\uffee\042\uffee\045" +
    "\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee" +
    "\001\002\000\042\002\ufffe\003\ufffe\032\ufffe\034\ufffe\035" +
    "\ufffe\036\ufffe\037\ufffe\041\ufffe\042\ufffe\045\ufffe\046\ufffe" +
    "\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\001\002\000" +
    "\042\002\ufffd\003\ufffd\032\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\037\ufffd\041\ufffd\042\ufffd\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002\000\042\002\uffff" +
    "\003\uffff\032\uffff\034\uffff\035\uffff\036\uffff\037\uffff\041" +
    "\uffff\042\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff" +
    "\052\uffff\053\uffff\001\002\000\030\032\041\034\024\035" +
    "\035\036\020\042\014\045\013\046\037\050\017\051\015" +
    "\052\030\053\022\001\002\000\032\032\041\034\024\035" +
    "\035\036\020\042\014\045\013\046\037\047\uffb6\050\017" +
    "\051\015\052\030\053\022\001\002\000\004\047\053\001" +
    "\002\000\042\002\ufff7\003\ufff7\032\ufff7\034\ufff7\035\ufff7" +
    "\036\ufff7\037\ufff7\041\ufff7\042\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\001\002\000\016" +
    "\013\uffb5\020\uffb5\025\uffb5\043\uffb5\053\uffb5\056\uffb5\001" +
    "\002\000\016\013\064\020\055\025\056\043\057\053\022" +
    "\056\060\001\002\000\020\003\124\013\064\020\055\025" +
    "\056\043\057\053\022\056\060\001\002\000\004\056\122" +
    "\001\002\000\106\002\uffe6\003\uffe6\004\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\021\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\040\uffe6\041\uffe6\042\uffe6\045\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\001\002\000\106\002\uffe9" +
    "\003\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053" +
    "\uffe9\001\002\000\100\002\uffc3\003\uffc3\004\103\006\101" +
    "\007\071\010\100\011\070\012\102\016\076\017\072\024" +
    "\075\025\067\026\074\027\077\030\073\031\uffc3\032\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\001\002\000\042\002\uffb4\003\uffb4\032\uffb4\034" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\041\uffb4\042\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\001" +
    "\002\000\106\002\uffe5\003\uffe5\004\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\015\uffe5\016\uffe5\017\uffe5\021" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\001\002\000\016\013\064\020" +
    "\055\025\056\043\057\053\022\056\060\001\002\000\106" +
    "\002\uffe7\003\uffe7\004\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\042\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\001\002\000\106\002\uffdd\003\uffdd\004\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\021\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\073\031\uffdd\032\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\001\002\000" +
    "\016\013\064\020\055\025\056\043\057\053\022\056\060" +
    "\001\002\000\016\013\064\020\055\025\056\043\057\053" +
    "\022\056\060\001\002\000\016\013\064\020\055\025\056" +
    "\043\057\053\022\056\060\001\002\000\016\013\064\020" +
    "\055\025\056\043\057\053\022\056\060\001\002\000\016" +
    "\013\064\020\055\025\056\043\057\053\022\056\060\001" +
    "\002\000\016\013\064\020\055\025\056\043\057\053\022" +
    "\056\060\001\002\000\016\013\064\020\055\025\056\043" +
    "\057\053\022\056\060\001\002\000\004\016\111\001\002" +
    "\000\016\013\064\020\055\025\056\043\057\053\022\056" +
    "\060\001\002\000\016\013\064\020\055\025\056\043\057" +
    "\053\022\056\060\001\002\000\016\013\064\020\055\025" +
    "\056\043\057\053\022\056\060\001\002\000\016\013\064" +
    "\020\055\025\056\043\057\053\022\056\060\001\002\000" +
    "\016\013\064\020\055\025\056\043\057\053\022\056\060" +
    "\001\002\000\106\002\uffda\003\uffda\004\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\015\uffda\016\uffda\017\uffda" +
    "\021\uffda\023\uffda\024\075\025\067\026\074\027\077\030" +
    "\073\031\uffda\032\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\045\uffda\046\uffda\047\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\001\002\000\106\002\uffde" +
    "\003\uffde\004\103\006\101\007\071\010\100\011\070\012" +
    "\uffde\015\uffde\016\076\017\072\021\uffde\023\uffde\024\075" +
    "\025\067\026\074\027\077\030\073\031\uffde\032\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\001\002\000\106\002\uffd9\003\uffd9\004\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\012\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\021\uffd9\023\uffd9\024\075\025\067\026\074\027\077" +
    "\030\073\031\uffd9\032\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\052\uffd9\053\uffd9\001\002\000\106\002" +
    "\uffd7\003\uffd7\004\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\012\uffd7\015\uffd7\016\uffd7\017\uffd7\021\uffd7\023\uffd7\024" +
    "\075\025\067\026\074\027\077\030\073\031\uffd7\032\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\001\002\000\106\002\uffe1\003\uffe1\004\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\073\031\uffe1\032\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\045\uffe1\046\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\001\002\000\016" +
    "\013\064\020\055\025\056\043\057\053\022\056\060\001" +
    "\002\000\106\002\uffdc\003\uffdc\004\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\015\uffdc\016\uffdc\017\uffdc\021" +
    "\uffdc\023\uffdc\024\075\025\067\026\074\027\077\030\073" +
    "\031\uffdc\032\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\001\002\000\106\002\uffe4\003" +
    "\uffe4\004\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\021\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\074\027\077\030\073\031\uffe4\032\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\001\002\000\106\002\uffe2\003\uffe2\004\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\021\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\073\031\uffe2\032\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\045\uffe2\046\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\001\002\000\106\002\uffe0" +
    "\003\uffe0\004\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\073\031\uffe0\032\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\001\002\000\106\002\uffdb\003\uffdb\004\uffdb\006\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\021\uffdb\023\uffdb\024\075\025\067\026\074\027\077" +
    "\030\073\031\uffdb\032\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\053\uffdb\001\002\000\106\002" +
    "\uffd8\003\uffd8\004\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\015\uffd8\016\uffd8\017\uffd8\021\uffd8\023\uffd8\024" +
    "\075\025\067\026\074\027\077\030\073\031\uffd8\032\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\001\002\000\106\002\uffdf\003\uffdf\004\103\006" +
    "\101\007\071\010\100\011\uffdf\012\uffdf\015\uffdf\016\076" +
    "\017\072\021\uffdf\023\uffdf\024\075\025\067\026\074\027" +
    "\077\030\073\031\uffdf\032\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\001\002\000\106" +
    "\002\uffe3\003\uffe3\004\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\015\uffe3\016\uffe3\017\uffe3\021\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\074\027\077\030\073\031\uffe3\032" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\001\002\000\106\002\uffe8\003\uffe8\004\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\045\uffe8\046\uffe8" +
    "\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\001\002\000" +
    "\036\004\103\006\101\007\071\010\100\011\070\012\102" +
    "\016\076\017\072\021\126\024\075\025\067\026\074\027" +
    "\077\030\073\001\002\000\004\021\125\001\002\000\106" +
    "\002\uffd6\003\uffd6\004\uffd6\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\015\uffd6\016\uffd6\017\uffd6\021\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\001\002\000\106\002\uffea\003\uffea\004\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\015\uffea\016" +
    "\uffea\017\uffea\021\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\042\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\001\002\000" +
    "\052\002\uffc7\003\uffc7\014\161\016\uffc7\021\uffc7\031\uffc7" +
    "\032\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\041\uffc7\042" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\001\002\000\004\016\155\001\002\000\004\031" +
    "\146\001\002\000\004\031\uffc2\001\002\000\004\031\134" +
    "\001\002\000\016\013\064\020\055\025\056\043\057\053" +
    "\022\056\060\001\002\000\004\031\uffc1\001\002\000\004" +
    "\031\137\001\002\000\016\013\uffc0\020\uffc0\025\uffc0\043" +
    "\uffc0\053\uffc0\056\uffc0\001\002\000\016\013\064\020\055" +
    "\025\056\043\057\053\022\056\060\001\002\000\036\004" +
    "\103\006\101\007\071\010\100\011\070\012\102\016\076" +
    "\017\072\024\075\025\067\026\074\027\077\030\073\034" +
    "\uffbf\001\002\000\004\034\143\001\002\000\030\032\041" +
    "\034\024\035\035\036\020\042\014\045\013\046\037\050" +
    "\017\051\015\052\030\053\022\001\002\000\032\032\041" +
    "\034\024\035\035\036\020\041\145\042\014\045\013\046" +
    "\037\050\017\051\015\052\030\053\022\001\002\000\042" +
    "\002\uffbe\003\uffbe\032\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\041\uffbe\042\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\001\002\000\016\013\064\020" +
    "\055\025\056\043\057\053\022\056\060\001\002\000\004" +
    "\031\150\001\002\000\016\013\064\020\055\025\056\043" +
    "\057\053\022\056\060\001\002\000\036\004\103\006\101" +
    "\007\071\010\100\011\070\012\102\016\076\017\072\024" +
    "\075\025\067\026\074\027\077\030\073\034\152\001\002" +
    "\000\030\032\041\034\024\035\035\036\020\042\014\045" +
    "\013\046\037\050\017\051\015\052\030\053\022\001\002" +
    "\000\032\032\041\034\024\035\035\036\020\041\154\042" +
    "\014\045\013\046\037\050\017\051\015\052\030\053\022" +
    "\001\002\000\042\002\uffbd\003\uffbd\032\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\041\uffbd\042\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\001\002\000" +
    "\020\003\160\013\064\020\055\025\056\043\057\053\022" +
    "\056\060\001\002\000\100\002\uffd3\003\uffd3\004\103\006" +
    "\101\007\071\010\100\011\070\012\102\016\076\017\072" +
    "\023\uffd3\024\075\025\067\026\074\027\077\030\073\031" +
    "\uffd3\032\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3" +
    "\042\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\001\002\000\044\002\uffcc\003\uffcc\031\uffcc" +
    "\032\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\041\uffcc\042" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\001\002\000\044\002\uffcb\003\uffcb\031\uffcb\032" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\041\uffcb\042\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\001\002\000\016\013\064\020\055\025\056\043\057" +
    "\053\022\056\060\001\002\000\036\004\103\006\101\007" +
    "\071\010\100\011\070\012\102\015\163\016\076\017\072" +
    "\024\075\025\067\026\074\027\077\030\073\001\002\000" +
    "\106\002\uffc6\003\uffc6\004\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\015\uffc6\016\uffc6\017\uffc6\021\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\001\002\000\022\003\160\013\064\020" +
    "\055\022\165\025\056\043\057\053\022\056\060\001\002" +
    "\000\020\013\064\020\055\023\166\025\056\043\057\053" +
    "\022\056\060\001\002\000\042\002\uffcd\003\uffcd\032\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\041\uffcd\042\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\001\002\000\046\002\uffd4\003\uffd4\023\uffd4\031\uffd4\032" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4\042\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\001\002\000\010\003\172\023\173\031\171\001\002" +
    "\000\016\013\064\020\055\025\056\043\057\053\022\056" +
    "\060\001\002\000\042\002\uffce\003\uffce\032\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\041\uffce\042\uffce\045\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\001\002" +
    "\000\042\002\uffcf\003\uffcf\032\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\041\uffcf\042\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\051\uffcf\052\uffcf\053\uffcf\001\002\000\046\002" +
    "\uffd5\003\uffd5\023\uffd5\031\uffd5\032\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\041\uffd5\042\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\001\002\000\026" +
    "\013\uff9e\020\uff9e\021\uff9e\025\uff9e\031\uff9e\043\uff9e\044" +
    "\200\053\uff9e\054\176\056\uff9e\001\002\000\004\021\215" +
    "\001\002\000\022\013\064\020\055\021\uff9a\025\056\031" +
    "\uff9a\043\057\053\022\056\060\001\002\000\004\020\201" +
    "\001\002\000\004\054\202\001\002\000\004\031\203\001" +
    "\002\000\022\013\uffa0\020\uffa0\021\uffa0\025\uffa0\031\uffa0" +
    "\043\uffa0\053\uffa0\056\uffa0\001\002\000\022\013\064\020" +
    "\055\021\uff9a\025\056\031\uff9a\043\057\053\022\056\060" +
    "\001\002\000\006\021\210\031\207\001\002\000\040\004" +
    "\103\006\101\007\071\010\100\011\070\012\102\016\076" +
    "\017\072\021\uff9b\024\075\025\067\026\074\027\077\030" +
    "\073\031\uff9b\001\002\000\016\013\064\020\055\025\056" +
    "\043\057\053\022\056\060\001\002\000\004\021\211\001" +
    "\002\000\042\002\uff9f\003\uff9f\032\uff9f\034\uff9f\035\uff9f" +
    "\036\uff9f\037\uff9f\041\uff9f\042\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\001\002\000\040" +
    "\004\103\006\101\007\071\010\100\011\070\012\102\016" +
    "\076\017\072\021\uff9c\024\075\025\067\026\074\027\077" +
    "\030\073\031\uff9c\001\002\000\006\021\214\031\207\001" +
    "\002\000\042\002\uff9d\003\uff9d\032\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\041\uff9d\042\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\001\002\000\042" +
    "\002\uffa1\003\uffa1\032\uffa1\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\041\uffa1\042\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\001\002\000\030\032\041\034" +
    "\024\035\035\036\020\042\014\045\013\046\037\050\017" +
    "\051\015\052\030\053\022\001\002\000\032\032\041\034" +
    "\024\035\035\036\020\041\220\042\014\045\013\046\037" +
    "\050\017\051\015\052\030\053\022\001\002\000\042\002" +
    "\uffc4\003\uffc4\032\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\041\uffc4\042\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\053\uffc4\001\002\000\022\013\064\020\055" +
    "\021\uff9a\025\056\031\uff9a\043\057\053\022\056\060\001" +
    "\002\000\006\021\223\031\207\001\002\000\106\002\uff99" +
    "\003\uff99\004\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012" +
    "\uff99\015\uff99\016\uff99\017\uff99\021\uff99\023\uff99\024\uff99" +
    "\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\034" +
    "\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99" +
    "\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053" +
    "\uff99\001\002\000\030\032\041\034\024\035\035\036\020" +
    "\042\014\045\013\046\037\050\017\051\015\052\030\053" +
    "\022\001\002\000\016\013\064\020\055\025\056\043\057" +
    "\053\022\056\060\001\002\000\004\040\uffb2\001\002\000" +
    "\004\040\230\001\002\000\030\032\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\042\uffb1\045\uffb1\046\uffb1\050\uffb1\051\uffb1\052" +
    "\uffb1\053\uffb1\001\002\000\030\032\041\034\024\035\035" +
    "\036\020\042\014\045\013\046\037\050\017\051\015\052" +
    "\030\053\022\001\002\000\034\032\041\034\024\035\035" +
    "\036\020\037\uffb0\041\uffb0\042\014\045\013\046\037\050" +
    "\017\051\015\052\030\053\022\001\002\000\006\037\uffad" +
    "\041\uffaa\001\002\000\004\041\241\001\002\000\004\037" +
    "\236\001\002\000\030\032\uffac\034\uffac\035\uffac\036\uffac" +
    "\042\uffac\045\uffac\046\uffac\050\uffac\051\uffac\052\uffac\053" +
    "\uffac\001\002\000\030\032\041\034\024\035\035\036\020" +
    "\042\014\045\013\046\037\050\017\051\015\052\030\053" +
    "\022\001\002\000\032\032\041\034\024\035\035\036\020" +
    "\041\uffab\042\014\045\013\046\037\050\017\051\015\052" +
    "\030\053\022\001\002\000\042\002\uffaf\003\uffaf\032\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\041\uffaf\042\uffaf\045" +
    "\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\001\002\000\034\032\041\034\024\035\035\036\020\037" +
    "\uffad\041\uffaa\042\014\045\013\046\037\050\017\051\015" +
    "\052\030\053\022\001\002\000\004\041\244\001\002\000" +
    "\042\002\uffae\003\uffae\032\uffae\034\uffae\035\uffae\036\uffae" +
    "\037\uffae\041\uffae\042\uffae\045\uffae\046\uffae\047\uffae\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\001\002\000\004\053\260" +
    "\001\002\000\006\021\uffa8\053\127\001\002\000\006\021" +
    "\uffa9\031\255\001\002\000\050\002\uffc9\003\uffc9\016\uffc9" +
    "\021\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\041\uffc9\042\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\001\002\000\004\021\252\001" +
    "\002\000\030\032\041\034\024\035\035\036\020\042\014" +
    "\045\013\046\037\050\017\051\015\052\030\053\022\001" +
    "\002\000\032\003\254\032\041\034\024\035\035\036\020" +
    "\042\014\045\013\046\037\050\017\051\015\052\030\053" +
    "\022\001\002\000\042\002\uffa4\003\uffa4\032\uffa4\034\uffa4" +
    "\035\uffa4\036\uffa4\037\uffa4\041\uffa4\042\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\001\002" +
    "\000\006\003\257\053\127\001\002\000\050\002\uffca\003" +
    "\uffca\016\uffca\021\uffca\031\uffca\032\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\041\uffca\042\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\001\002\000\050" +
    "\002\uffc8\003\uffc8\016\uffc8\021\uffc8\031\uffc8\032\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\041\uffc8\042\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\001" +
    "\002\000\004\020\261\001\002\000\006\021\uffa8\053\127" +
    "\001\002\000\004\021\263\001\002\000\030\032\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\042\uffa6\045\uffa6\046\uffa6\050\uffa6" +
    "\051\uffa6\052\uffa6\053\uffa6\001\002\000\030\032\041\034" +
    "\024\035\035\036\020\042\014\045\013\046\037\050\017" +
    "\051\015\052\030\053\022\001\002\000\030\032\041\034" +
    "\024\035\035\036\020\042\014\045\013\046\037\050\017" +
    "\051\015\052\030\053\022\001\002\000\032\032\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\041\267\042\ufff2\045\ufff2\046\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\053\ufff2\001\002\000\042\002" +
    "\uffa5\003\uffa5\032\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5" +
    "\041\uffa5\042\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\001\002\000\004\002\001\001\002" +
    "\000\074\002\uffa3\003\uffa3\004\103\006\101\007\071\010" +
    "\100\011\070\012\102\016\076\017\072\024\075\025\067" +
    "\026\074\027\077\030\073\032\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\041\uffa3\042\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\053\uffa3\001\002\000\042\002" +
    "\uffa2\003\uffa2\032\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2" +
    "\041\uffa2\042\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051" +
    "\uffa2\052\uffa2\053\uffa2\001\002\000\046\002\uffd2\003\uffd2" +
    "\016\uffd2\031\255\032\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\041\uffd2\042\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\001\002\000\030\032\041\034" +
    "\024\035\035\036\020\042\014\045\013\046\037\050\017" +
    "\051\015\052\030\053\022\001\002\000\016\013\064\020" +
    "\055\025\056\043\057\053\022\056\060\001\002\000\004" +
    "\034\uffbb\001\002\000\004\034\300\001\002\000\030\032" +
    "\uffba\034\uffba\035\uffba\036\uffba\042\uffba\045\uffba\046\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\001\002\000\030\032" +
    "\041\034\024\035\035\036\020\042\014\045\013\046\037" +
    "\050\017\051\015\052\030\053\022\001\002\000\032\032" +
    "\041\034\024\035\035\036\020\041\303\042\014\045\013" +
    "\046\037\050\017\051\015\052\030\053\022\001\002\000" +
    "\042\002\uffb9\003\uffb9\032\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\041\uffb9\042\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\001\002\000\032\032\041" +
    "\034\024\035\035\036\020\041\305\042\014\045\013\046" +
    "\037\050\017\051\015\052\030\053\022\001\002\000\042" +
    "\002\uffb8\003\uffb8\032\uffb8\034\uffb8\035\uffb8\036\uffb8\037" +
    "\uffb8\041\uffb8\042\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\001\002\000\016\013\064\020" +
    "\055\025\056\043\057\053\022\056\060\001\002\000\044" +
    "\002\uffd1\003\uffd1\031\171\032\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\041\uffd1\042\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\053\uffd1\001\002\000\016\013" +
    "\064\020\055\025\056\043\057\053\022\056\060\001\002" +
    "\000\044\002\uffd0\003\uffd0\031\171\032\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\041\uffd0\042\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\054\002\035\003\020\004\032\005\007\006" +
    "\011\007\010\011\030\012\022\013\037\014\005\015\042" +
    "\016\031\020\041\021\003\023\015\024\025\025\006\026" +
    "\004\027\033\033\026\035\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\274\001\001\000\006\007\272\027\247\001\001\000" +
    "\010\027\064\032\270\035\062\001\001\000\002\001\001" +
    "\000\004\057\244\001\001\000\004\051\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\002\035\003\020" +
    "\004\032\005\007\006\011\007\010\011\030\013\051\014" +
    "\005\015\042\016\031\020\041\021\003\024\025\025\006" +
    "\026\004\027\033\033\026\035\024\001\001\000\004\036" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\127" +
    "\033\131\001\001\000\002\001\001\000\004\046\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\002\035\003\020\004\032\005\007" +
    "\006\011\007\010\011\030\012\047\013\037\014\005\015" +
    "\042\016\031\020\041\021\003\024\025\025\006\026\004" +
    "\027\033\033\026\035\024\001\001\000\052\002\035\003" +
    "\020\004\032\005\007\006\011\007\010\011\030\013\051" +
    "\014\005\015\042\016\031\020\041\021\003\024\025\025" +
    "\006\026\004\027\033\033\026\035\024\047\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\053\001" +
    "\001\000\012\027\064\031\061\032\060\035\062\001\001" +
    "\000\010\027\064\032\122\035\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\027\064\032" +
    "\065\035\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\064\032\120\035\062\001\001\000\010\027" +
    "\064\032\117\035\062\001\001\000\010\027\064\032\116" +
    "\035\062\001\001\000\010\027\064\032\115\035\062\001" +
    "\001\000\010\027\064\032\114\035\062\001\001\000\010" +
    "\027\064\032\113\035\062\001\001\000\010\027\064\032" +
    "\112\035\062\001\001\000\002\001\001\000\010\027\064" +
    "\032\107\035\062\001\001\000\010\027\064\032\106\035" +
    "\062\001\001\000\010\027\064\032\105\035\062\001\001" +
    "\000\010\027\064\032\104\035\062\001\001\000\010\027" +
    "\064\032\103\035\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\064\032\111\035\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\132\001\001\000\002\001\001\000\012\027\064\031\134" +
    "\032\060\035\062\001\001\000\004\040\135\001\001\000" +
    "\002\001\001\000\004\041\137\001\001\000\010\027\064" +
    "\032\140\035\062\001\001\000\004\042\141\001\001\000" +
    "\002\001\001\000\052\002\035\003\020\004\032\005\007" +
    "\006\011\007\010\011\030\012\143\013\037\014\005\015" +
    "\042\016\031\020\041\021\003\024\025\025\006\026\004" +
    "\027\033\033\026\035\024\001\001\000\050\002\035\003" +
    "\020\004\032\005\007\006\011\007\010\011\030\013\051" +
    "\014\005\015\042\016\031\020\041\021\003\024\025\025" +
    "\006\026\004\027\033\033\026\035\024\001\001\000\002" +
    "\001\001\000\012\027\064\031\146\032\060\035\062\001" +
    "\001\000\002\001\001\000\010\027\064\032\150\035\062" +
    "\001\001\000\002\001\001\000\052\002\035\003\020\004" +
    "\032\005\007\006\011\007\010\011\030\012\152\013\037" +
    "\014\005\015\042\016\031\020\041\021\003\024\025\025" +
    "\006\026\004\027\033\033\026\035\024\001\001\000\050" +
    "\002\035\003\020\004\032\005\007\006\011\007\010\011" +
    "\030\013\051\014\005\015\042\016\031\020\041\021\003" +
    "\024\025\025\006\026\004\027\033\033\026\035\024\001" +
    "\001\000\002\001\001\000\012\027\064\030\156\032\155" +
    "\035\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\027\064\032\161\035\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\064\030" +
    "\156\032\155\035\062\001\001\000\014\010\167\027\064" +
    "\030\166\032\155\035\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\027\064\030\173" +
    "\032\155\035\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\176\001\001\000\002" +
    "\001\001\000\012\027\064\032\205\034\212\035\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\203\001\001\000\012\027\064\032\205\034" +
    "\204\035\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\064\032\211\035\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\002\035\003" +
    "\020\004\032\005\007\006\011\007\010\011\030\012\216" +
    "\013\037\014\005\015\042\016\031\020\041\021\003\024" +
    "\025\025\006\026\004\027\033\033\026\035\024\001\001" +
    "\000\050\002\035\003\020\004\032\005\007\006\011\007" +
    "\010\011\030\013\051\014\005\015\042\016\031\020\041" +
    "\021\003\024\025\025\006\026\004\027\033\033\026\035" +
    "\024\001\001\000\002\001\001\000\012\027\064\032\205" +
    "\034\221\035\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\002\035\003\020\004\032\005\007\006\011" +
    "\007\010\011\030\012\241\013\037\014\005\015\042\016" +
    "\031\020\041\021\003\024\025\025\006\026\004\027\033" +
    "\033\026\035\024\001\001\000\012\027\064\031\225\032" +
    "\060\035\062\001\001\000\004\052\226\001\001\000\002" +
    "\001\001\000\004\053\230\001\001\000\052\002\035\003" +
    "\020\004\032\005\007\006\011\007\010\011\030\012\231" +
    "\013\037\014\005\015\042\016\031\020\041\021\003\024" +
    "\025\025\006\026\004\027\033\033\026\035\024\001\001" +
    "\000\052\002\035\003\020\004\032\005\007\006\011\007" +
    "\010\011\030\013\051\014\005\015\042\016\031\020\041" +
    "\021\003\024\025\025\006\026\004\027\033\033\026\035" +
    "\024\054\232\001\001\000\006\017\233\055\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\236\001" +
    "\001\000\052\002\035\003\020\004\032\005\007\006\011" +
    "\007\010\011\030\012\237\013\037\014\005\015\042\016" +
    "\031\020\041\021\003\024\025\025\006\026\004\027\033" +
    "\033\026\035\024\001\001\000\050\002\035\003\020\004" +
    "\032\005\007\006\011\007\010\011\030\013\051\014\005" +
    "\015\042\016\031\020\041\021\003\024\025\025\006\026" +
    "\004\027\033\033\026\035\024\001\001\000\002\001\001" +
    "\000\054\002\035\003\020\004\032\005\007\006\011\007" +
    "\010\011\030\013\051\014\005\015\042\016\031\017\242" +
    "\020\041\021\003\024\025\025\006\026\004\027\033\033" +
    "\026\035\024\055\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\246\022\250\027" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\002\035\003\020\004\032\005\007\006" +
    "\011\007\010\011\030\012\252\013\037\014\005\015\042" +
    "\016\031\020\041\021\003\024\025\025\006\026\004\027" +
    "\033\033\026\035\024\001\001\000\050\002\035\003\020" +
    "\004\032\005\007\006\011\007\010\011\030\013\051\014" +
    "\005\015\042\016\031\020\041\021\003\024\025\025\006" +
    "\026\004\027\033\033\026\035\024\001\001\000\002\001" +
    "\001\000\004\027\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\246\022\261\027" +
    "\247\001\001\000\002\001\001\000\004\060\263\001\001" +
    "\000\052\002\035\003\020\004\032\005\007\006\011\007" +
    "\010\011\030\012\264\013\037\014\005\015\042\016\031" +
    "\020\041\021\003\024\025\025\006\026\004\027\033\033" +
    "\026\035\024\001\001\000\050\002\035\003\020\004\032" +
    "\005\007\006\011\007\010\011\030\013\051\014\005\015" +
    "\042\016\031\020\265\021\003\024\025\025\006\026\004" +
    "\027\033\033\026\035\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\002\035\003\020\004" +
    "\032\005\007\006\011\007\010\011\030\012\303\013\037" +
    "\014\005\015\042\016\031\020\041\021\003\024\025\025" +
    "\006\026\004\027\033\033\026\035\024\001\001\000\012" +
    "\027\064\031\275\032\060\035\062\001\001\000\004\044" +
    "\276\001\001\000\002\001\001\000\004\045\300\001\001" +
    "\000\052\002\035\003\020\004\032\005\007\006\011\007" +
    "\010\011\030\012\301\013\037\014\005\015\042\016\031" +
    "\020\041\021\003\024\025\025\006\026\004\027\033\033" +
    "\026\035\024\001\001\000\050\002\035\003\020\004\032" +
    "\005\007\006\011\007\010\011\030\013\051\014\005\015" +
    "\042\016\031\020\041\021\003\024\025\025\006\026\004" +
    "\027\033\033\026\035\024\001\001\000\002\001\001\000" +
    "\050\002\035\003\020\004\032\005\007\006\011\007\010" +
    "\011\030\013\051\014\005\015\042\016\031\020\041\021" +
    "\003\024\025\025\006\026\004\027\033\033\026\035\024" +
    "\001\001\000\002\001\001\000\014\010\306\027\064\030" +
    "\166\032\155\035\062\001\001\000\002\001\001\000\014" +
    "\010\310\027\064\030\166\032\155\035\062\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    /* Main symbol table for global variables included in all scopes */
   currentSymTable = globalSymbolTable = new parser.SymbolTable(null, false); 

    /* buffer for function declaration */
   funcBuffer = new StringBuffer();

   /* buffer for global var declaration */
   globalDecBuffer = new StringBuffer(); 

   /* buffer used for main function */
   mainBuffer = new StringBuffer(); 

   /* initially set the mainBuffer as the current one, will 
    * be changed when entering in a function 
    */
   currentSymTable.currentBuffer=mainBuffer;

   /* final output file */
   bwr = new BufferedWriter(new FileWriter(new File("output.ll"))); 

   /* loopCount needed to count nested loops */
   loopCount = 0;

   /* Need to keep track of number of labels for loop */
   totLoopCount = 0;

   /* Stack used to keep track of loop number in nested loop */
   loopList=new LinkedList<Integer>();

   /* Counter used for numbering strings */
   indexString = 0;

   /* List of string that will be append at beginning of output file */
   stringList = new ArrayList<String>();

   /* String declaration buffer that is used to declare strings and append to file */
   stringDecl = new StringBuffer();

   /* Symbol table for function: keeps track of functions name to detect duplicates */
   funcTable = new HashMap<String, FuncObj>();

   /* Used to construct function names like libraryName.functionName
    * When not parsing a library, the name is "" because we are in the main file
    */
   libraryName = "";

   /* List used to keep track of of the libraries already inserted and detect duplicates */
   requiredFileList=new ArrayList<String>();


    }


  public SymbolTable globalSymbolTable;
  public SymbolTable currentSymTable;
  public StringBuffer funcBuffer;
  public StringBuffer globalDecBuffer;
  public StringBuffer mainBuffer;
  public BufferedWriter bwr;
  public int loopCount;
  public int totLoopCount;
  public LinkedList<Integer> loopList;
  public ArrayList<String> requiredFileList;
  public int indexString;
  public ArrayList<String> stringList;
  public StringBuffer stringDecl;
  public HashMap<String, FuncObj> funcTable;
  static public String libraryName;

    /*
     * NUMBER: whichever variable that stores a NUMBER and addressed with a pointer
     * TABLE:  whichever variable thast stores a TABLE
     * IMMEDIATE: an immediate value
     * RVALUE: a register containing a NUMBER
     * BOOL: a register containing a boolean value
     */
  public enum Type {
    NUMBER, TABLE, IMMEDIATE, RVALUE, BOOL
  }; 

  public class SymbolTable {
    /* Used in multiple assignment */
    public ArrayList<ValueObj> varList;
    /* Used in multiple assignment */
    public ArrayList<ValueObj> expList;
    /* Actual Symbol table storing NAME : VALUE */
    public HashMap<String, ValueObj> varTable;
    /* Counter of llvm registers */
    public Integer registerCount; // used as counter for SSA registers
    /* reference to previous symbol table - used in local scopes */
    SymbolTable prev;
    /* stores the current buffer to append to */
    StringBuffer currentBuffer;
    /* 
     *boolean storing if we are in a function or not
     * needed to distinguish closure from functions
     */
    boolean isFunc;

    public SymbolTable getPrev(boolean insideSameFunction) {
      if (insideSameFunction) {
        prev.registerCount = registerCount;
        return prev;
      } else {
        return prev;
      }
    }

    /*
     * isFunction is needed to distinguish closure from functions
     */
    public SymbolTable(SymbolTable p, boolean isFunction) { 
      this.varTable = new HashMap<String, ValueObj>();
      this.varList = new ArrayList<ValueObj>();
      this.expList = new ArrayList<ValueObj>();
      this.prev = p;

      /*
       * when starting parsing, register counter start from 1
       * when entering a closure, continue with previous counter
       */

      this.registerCount = p == null ? 1 : p.registerCount; 

      /*
       * when starting parsing, set current buffer to main buffer
       * when entering a closure, continue with previous buffer
       */

      currentBuffer = p == null ? currentBuffer : p.currentBuffer; 
      isFunc=false;
      if (isFunction) {
        /* if it is a funct, restart from 1 */
        registerCount = 1; 
        /* as it is a func, use func buffer */
        currentBuffer = funcBuffer; 
        isFunc=true;
      }
    }

    public ValueObj get(String s) {
      /*
       * Given an id, look for it in the current symbol table
       * and in all the ones above
       */


      for (SymbolTable sym = this; sym != null; sym = sym.prev) {
        ValueObj found = sym.varTable.get(s);
        if (found != null)
          return found;
      }
      return null;
    }
  }

  public class ValueObj {
    /* stores value for immediates */
    Double value;
    /* register or variable name used in llvm code */
    public String name;
    /* type of variable */
    public Type type;
    /* scope: either local % or global @ */
    public String scope;
    /* length of array in case of table, null otherwise */
    Integer nElement; 

    public ValueObj(String name) {
      super();
      this.name = name;
      type = null;
    }

    public ValueObj(Double value) {
      this.value = value;
      type = Type.IMMEDIATE;
    }

    public void setDouble() {
      this.type = Type.NUMBER;
    }

    public void setGlobal() {
      scope = "@";
    }

    public void setLocal() {
      scope = "%";
    }

    public void setRVALUE() {
      this.type = Type.RVALUE;
    }

    public void setBool() {
      this.type = Type.BOOL;
    }

    public boolean isLocal() {
      return scope.compareTo("%") == 0;
    }

  }

  public class FuncObj {

    public String name;
    public int nargsTot;
    public ArrayList<ValueObj> paramsList;
    public int varCount;
    public boolean ret;

    public FuncObj(String name) {
      this.name = name;
      this.paramsList = new ArrayList<>();
      this.varCount = 1;
      this.nargsTot = 0;
      this.ret = false;

    }
  }

      // It can be "stdout" to write output program to standard
    // output or "file" to dump program in a file.
    public static String dumpOutput;

    // It's true if the semantic check is enabled
    public boolean enableSem = true;

      // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // Return actual symbol
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



      // Disable semantic check
    private void disableSem(){
        parser.enableSem = false;
    }
    // Return true if semantic is enabled, false otherwise
    private boolean sem(){
        return parser.enableSem;
    }

    // Error management
    private void pSemError(String message){
        System.err.println("SEM ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);

        parser.done_parsing();
    }
    private void pSemWarning(String message){
        System.err.println("SEM WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
    }
    private void pSynError(String message){
        System.err.println("SYN ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.done_parsing();
    }
    private void pSynWarning(String message){
        System.err.println("SYN WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        /* Quando c'è un errore sintattico continuo il parsing ma disabilito la semantiva */
        disableSem();
    }


    public void appendFuncBuffer(String s, boolean newLine) {
      funcBuffer.append(s);
      if (newLine)
        funcBuffer.append("\n");
    }

    public void appendGlobalDecBuffer(String s, boolean newLine) {
      globalDecBuffer.append(s);
      if (newLine)
        globalDecBuffer.append("\n");
    }

    public void appendMainBuffer(String s, boolean newLine) {
      currentSymTable.currentBuffer.append(s);
      if (newLine)
        currentSymTable.currentBuffer.append("\n");
    }

    public String getRegister() {
      return String.valueOf(currentSymTable.registerCount++);
    }

    public String createGlovalVarLLVM(String name, String type, String value) {

      return "@" + name + " = " + "global " + type + " " + value + ", align 8";

    }

    public String storeLLVM(String source, String sourceType, String dest, String destType, String align) {
      // store i32 %4, i32* %3, align 4
      return "store " + sourceType + " " + source + ", " + destType + "* " + dest + ", align " + align;

    }

    public String loadLLVM(String outName, String outType, String inputType, String inputName, String align) {
      // %2 = load double, double* @b, align 8

      return outName + " = " + "load " + outType + ", " + inputType + "* " + inputName + ", " + "align " + align;

    }

    public ValueObj initLocalVar(ValueObj n, ValueObj x) {

      String op1, op2;
      // %1 = alloca i32, align 4
      if (x.type == Type.IMMEDIATE) {
        op2 = "" + x.value;
        if (n.type == null) {
          n.setDouble(); // set type number in the variable
          n.setLocal();
          n.name = getRegister(); // assign to local var a new register
          appendMainBuffer("%" + n.name + " = alloca double, align 8", true); // append to the main declaration buffer
          appendMainBuffer(storeLLVM("" + op2, "double", n.scope + n.name, "double", "8"), true); // load with a new
                                                                                                  // value

        } else if (n.type == Type.NUMBER) {
          appendMainBuffer(storeLLVM("" + op2, "double", n.scope + n.name, "double", "8"), true); // load with a new
                                                                                                  // value
        }
      } else if (x.type == Type.NUMBER) {
        op2 = x.scope + x.name;
        if (n.type == null) {
          n.setDouble(); // set type number in the variable
          n.setLocal();
          n.name = getRegister(); // assign to local var a new register
          appendMainBuffer("%" + n.name + " = alloca double, align 8", true); // allocate new varappend to the main
                                                                              // declaration buffer

          String reg = getRegister(); // get a new register
          appendMainBuffer(loadLLVM("%" + reg, "double", "double", op2, "8"), true); // save the value of the var into
                                                                                     // the register
          appendMainBuffer(storeLLVM("%" + reg, "double", n.scope + n.name, "double", "8"), true); // store new var with
                                                                                                   // value pointed by
                                                                                                   // the variable
        } else if (n.type == Type.NUMBER) {
          String reg = getRegister();
          appendMainBuffer(loadLLVM("%" + reg, "double", "double", x.scope + x.name, "8"), true);
          appendMainBuffer(storeLLVM("%" + reg, "double", n.scope + n.name, "double", "8"), true);

        }
      } else if (x.type == Type.RVALUE) {
        op2 = "%" + x.name;
        if (n.type == null) {
          n.setDouble(); // set type number in the variable
          n.setLocal();
          n.name = getRegister(); // assign to local var a new register
          appendMainBuffer("%" + n.name + " = alloca double, align 8", true); // allocate new varappend to the main
                                                                              // declaration buffer
          appendMainBuffer(storeLLVM(op2, "double", n.scope + n.name, "double", "8"), true);
        } else if (n.type == Type.NUMBER) {
          appendMainBuffer(storeLLVM(op2, "double", n.scope + n.name, "double", "8"), true);
        }
      }

      return n;

    }

    public ValueObj initVar(ValueObj n, ValueObj x) {

      String op1, op2;

      if (n.scope != null && n.isLocal()) {
        return initLocalVar(n, x);
      }

      if (x.type == Type.IMMEDIATE) {
        op2 = "" + x.value;
        if (n.type == null) {
          n.setDouble(); // set type number in the variable
          n.setGlobal();
          appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", "" + op2), true); // append to the Global
                                                                                        // declaration buffer
          appendMainBuffer(storeLLVM("" + op2, "double", n.scope + n.name, "double", "8"), true); // load with a new
                                                                                                  // value

        } else if (n.type == Type.NUMBER) {
          appendMainBuffer(storeLLVM("" + op2, "double", n.scope + n.name, "double", "8"), true); // load with a new
                                                                                                  // value
        }
      } else if (x.type == Type.NUMBER) {
        op2 = x.scope + x.name;
        if (n.type == null) {
          n.setDouble(); // set type number in the variable
          n.setGlobal();
          appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", "0.0"), true); // append to the Global declaration
                                                                                     // buffer
          String reg = getRegister(); // get a new register
          appendMainBuffer(loadLLVM("%" + reg, "double", "double", op2, "8"), true); // save the value of the var into
                                                                                     // the register
          appendMainBuffer(storeLLVM("%" + reg, "double", n.scope + n.name, "double", "8"), true); // store new var with
                                                                                                   // value pointed by
                                                                                                   // the variable
        } else if (n.type == Type.NUMBER) {
          String reg = getRegister();
          appendMainBuffer(loadLLVM("%" + reg, "double", "double", x.scope + x.name, "8"), true);
          appendMainBuffer(storeLLVM("%" + reg, "double", n.scope + n.name, "double", "8"), true);

        }
      } else if (x.type == Type.RVALUE) {
        op2 = "%" + x.name;
        if (n.type == null) {
          n.setDouble(); // set type number in the variable
          n.setGlobal();
          appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", "0.0"), true); // append to the Global declaration
                                                                                     // buffer
          appendMainBuffer(storeLLVM(op2, "double", n.scope + n.name, "double", "8"), true);
        } else if (n.type == Type.NUMBER) {
          appendMainBuffer(storeLLVM(op2, "double", n.scope + n.name, "double", "8"), true);
        }
      }

      return n;
    }

    public ValueObj operation(String operation, ValueObj x, ValueObj y) { // type of operation, value of first operand,
                                                                          // value of second operand
      ValueObj RESULT = null; // final result to return
      String a = null; // variables for registers
      String b = null;
      String r = null;
      String op1 = null, op2 = null;

      if(x.type==Type.TABLE || y.type==Type.TABLE){
          pSemError("CANNOT PERFORM OPERATION ON ARRAYS");
      }

      if (x.type == Type.IMMEDIATE && y.type == Type.IMMEDIATE) { // if both are immediates, perform operation at
                                                                  // compile time
        /// create switch
        if (operation.compareTo("fadd") == 0)
          RESULT = new ValueObj(x.value + y.value);
        else if (operation.compareTo("fsub") == 0)
          RESULT = new ValueObj(x.value - y.value);
        else if (operation.compareTo("fmul") == 0)
          RESULT = new ValueObj(x.value * y.value);
        else if (operation.compareTo("fdiv") == 0)
          RESULT = new ValueObj(x.value / y.value);
        else if (operation.compareTo("pow") == 0)
          RESULT = new ValueObj(Math.pow(x.value, y.value));

        RESULT.type = Type.IMMEDIATE; // the returning value is itself a double
      } else {



        if (x.type == Type.NUMBER) {
          a = getRegister();
          appendMainBuffer(loadLLVM("%" + a, "double", "double", x.scope + x.name, "8"), true); // load value of first
          op1 = "%" + a;
        } else if (x.type == Type.IMMEDIATE) {
          op1 = "" + x.value;
        } else if (x.type == Type.RVALUE) {
          op1 = "%" + x.name;
        }

        if (y.type == Type.NUMBER) {
          b = getRegister();
          appendMainBuffer(loadLLVM("%" + b, "double", "double", y.scope + y.name, "8"), true); // load value of second
          op2 = "%" + b;
        } else if (y.type == Type.IMMEDIATE) {
          op2 = "" + y.value;
        } else if (y.type == Type.RVALUE) {
          op2 = "%" + y.name;
        }
        r = getRegister();
        appendMainBuffer("%" + r + " = " + operation + " double " + op1 + ", " + op2, true); // perform operation and
                                                                                             // save in register
        RESULT = new ValueObj(r);
        RESULT.setLocal();
        RESULT.setRVALUE();
      }

      return RESULT;
    }

    public ValueObj logicExpEval(String operation, ValueObj x, ValueObj y) {

      String op1 = null;
      String op2 = null;
      if (x.type == Type.IMMEDIATE) { // if first operand is and immediate
        op1 = "" + x.value; // just store the value
      } else if (x.type == Type.NUMBER) { // if it is a var
        String reg = getRegister();
        // loadLLVM(String outName, String outType, String inputType, String inputName,
        // String align )
        appendMainBuffer(loadLLVM("%" + reg, "double", "double", x.scope + x.name, "8"), true); // load it
        op1 = "%" + reg; // save register where it is loaded
      } else if (x.type == Type.RVALUE) {
        op1 = x.scope + x.name;

      }
      if (y.type == Type.IMMEDIATE) { // same as first operand
        op2 = "" + y.value;
      } else if (y.type == Type.NUMBER) {
        String reg = getRegister();
        appendMainBuffer(loadLLVM("%" + reg, "double", "double", y.scope + y.name, "8"), true);
        op2 = "%" + reg;
      } else if (y.type == Type.RVALUE) {
        op2 = y.scope + y.name;
      }
      String result = getRegister(); // get register for output
      appendMainBuffer("%" + result + " = fcmp " + operation + " double " + op1 + ", " + op2, true); // calculate result
      ValueObj RESULT = new ValueObj(result); // return new value
      RESULT.setBool();
      RESULT.setLocal();

      return RESULT;

    }

    public int genLabelString() {
      return indexString++;
    }

    private void printStrings() {

      stringDecl.append("declare i32 @printf(i8*, ...)\n"); // declare printf instruction
      for (int i = 0; i < stringList.size(); i++) {

        String s = stringList.get(i);
        s = s.substring(1, s.length() - 1);
        int length = s.length();
        if (!s.contains("\\n"))
          length++;
        s = s.replace("\\n", "\\0A");
        s = s + "\\00";
        stringDecl.append("@.str." + i + " = private constant [" + length + " x i8] c\"" + s + "\", align 1\n");
      }

    }




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= stmt_list 
            {
              Object RESULT =null;
		
                      printStrings();
                      bwr.write(stringDecl.toString()+"\n");
                      bwr.write(globalDecBuffer.toString()+"\n");
                      bwr.write(funcBuffer.toString()+"\n");
                      bwr.write("define void @main(){\n");
                      bwr.write(mainBuffer.toString());
                      bwr.write("ret void\n}");
                      bwr.flush();
                      //close the stream
                      bwr.close();
	                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // include ::= REQUIRE FILE 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  libraryName=x; 
                                if(requiredFileList.contains(x)){
                                  pSemError("FILE ALREADY INCLUDED");
                                }
                                requiredFileList.add(x); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("include",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // include ::= REQUIRE FNF 
            {
              Object RESULT =null;
		 pSynWarning("REQUIRED FILE NOT FOUND"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("include",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // include ::= REQUIRE error 
            {
              Object RESULT =null;
		 pSynError("REQUIRED FILE NOT SPECIFIED"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("include",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= local_var_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= local_var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= global_var_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= array_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= if_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= for_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= print_func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= ret 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= while_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= repeat_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= function_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= include 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= RO exp RC 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= NUMBER 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new ValueObj(x);

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= MINUS NUMBER 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=new ValueObj(-x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= var 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
             ValueObj tmp = currentSymTable.get(x.name);
             
            if(tmp == null && x.nElement == null){ //if it is not declared and it is not an array cell
                pSemError("VARIABLE " +"\""+x.name+"\"" +" NOT DECLARED");
            }
            if (x.nElement != null){
                RESULT=x;
            }else{
                RESULT=tmp;}  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= NIL 
            {
              ValueObj RESULT =null;
		                String reg=getRegister();
                        RESULT= new ValueObj(reg); 
                        RESULT.setBool();
                        RESULT.setLocal();
                      
                        appendMainBuffer("%"+reg + " = icmp "+ "eq" +" i32 0" +", " + "1", true); //calculate result

                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= func_call 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ValueObj retValue = new ValueObj(x);
                 retValue.setRVALUE();
                 retValue.setLocal();
                 RESULT=retValue;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp PLUS exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=operation("fadd", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp MINUS exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=operation("fsub", x, y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp STAR exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=operation("fmul", x, y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp DIV exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=operation("fdiv", x, y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp HAT exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=operation("pow", x, y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp AND exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		     

                    String r = getRegister();
                    if(x.type == Type.BOOL && y.type == Type.BOOL){ //if both are bool, just compare them
                        appendMainBuffer("%"+r+ " = and" + " i1 " + x.scope+x.name+", "+ y.scope+y.name, true );
                    }else if(x.type != Type.BOOL && y.type != Type.BOOL){ //if both are not bool, the result is 1 (all values are true except false and nil)
                        appendMainBuffer("%"+r+ " = and" + " i1 " + "1"+", "+ "1", true );
                    }else if(x.type == Type.BOOL && y.type != Type.BOOL ){ //if 1 is bool and one not, the bool is the result
                        appendMainBuffer("%"+r+ " = and" + " i1 " + x.scope+x.name+", "+ x.scope+x.name, true );
                    }else{
                        appendMainBuffer("%"+r+ " = and" + " i1 " + y.scope+y.name+", "+ y.scope+y.name, true ); //same above
                    }
                   
                    ValueObj bool = new ValueObj(r);
                    bool.setBool();
                    bool.setLocal();
                    RESULT = bool;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp OR exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                         
                    String r = getRegister();
                     if(x.type == Type.BOOL && y.type == Type.BOOL){ //if both are bool, just compare them
                        appendMainBuffer("%"+r+ " = and" + " i1 " + x.scope+x.name+", "+ y.scope+y.name, true );
                    }else{
                        appendMainBuffer("%"+r+ " = and" + " i1 " + "1"+", "+ "1", true );
                    }
                    ValueObj bool = new ValueObj(r);
                    bool.setBool();
                    bool.setLocal();
                    RESULT = bool;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= NOT exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                         
                    pSemError("NOT LOGICAL OPERATION NOT SUPPORTED");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp EQ EQ exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=logicExpEval("oeq", x, y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp NOTEQ exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=logicExpEval("one", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp MIN exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=logicExpEval("olt", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp MAJ exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=logicExpEval("ogt", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp MIN_EQ exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=logicExpEval("ole", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp MAJ_EQ exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=logicExpEval("oge", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= RO error RC 
            {
              ValueObj RESULT =null;
		 pSynError("EXPRESSION NOT CORRECT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ass_list ::= ass_list CM ass_exp 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 currentSymTable.expList.add(x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ass_list ::= ass_exp 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 currentSymTable.expList.add(x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ass_exp ::= exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_exp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // local_var_list ::= LOCAL var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // local_var_init ::= local_var_list EQ ass_list 
            {
              Object RESULT =null;
		//check is sizes match and generate error if not
                                                  for(int i=0; i<currentSymTable.varList.size(); i++){ //var list stores the ValueObj of those var
                                                      ValueObj ValueObjectOfVar = currentSymTable.varList.get(i); //get valueObj of that var
                                                      ValueObj tmp = currentSymTable.get(ValueObjectOfVar.name); //try to get it from symbol table
                                                      if(tmp == null){				                     //if null, it has never been declared
		                                                    currentSymTable.varTable.put(ValueObjectOfVar.name, ValueObjectOfVar); //put in simbol table
                                                        ValueObjectOfVar.setLocal(); //set local to distinguish in var init
                                                        initVar(ValueObjectOfVar, currentSymTable.expList.get(i)); //init var
                                                      }else{
                                                        initVar(tmp, currentSymTable.expList.get(i)); //if it has been already declared, pass the valueObj of the symbol table
                                                      }
                                               
                                                  }
                                                  currentSymTable.varList.clear();
                                                  currentSymTable.expList.clear();
                                            
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var_init",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // global_var_init ::= var_list EQ ass_list 
            {
              Object RESULT =null;
		//check is sizes match and generate error if not
                                            
                                            for(int i=0; i<currentSymTable.varList.size(); i++){ //var list stores the ValueObj of those var
                                                ValueObj ValueObjectOfVar = currentSymTable.varList.get(i); //get valueObj of that var
                                                ValueObj tmp = currentSymTable.get(ValueObjectOfVar.name); //try to get it from symbol table
                                                 if(tmp == null){				                     //if null, it has never been declared
                                                    if(currentSymTable.isFunc){
                                                        pSemError("CANNOT DECLARE GLOBAL VARIABLES INSIDE FUNCTION");
                                                    }
		                                                globalSymbolTable.varTable.put(ValueObjectOfVar.name, ValueObjectOfVar); //put in simbol table
                                                    initVar(ValueObjectOfVar, currentSymTable.expList.get(i)); //init var
                                                 }else{
                                                    initVar(tmp, currentSymTable.expList.get(i)); //if it has been already declared, pass the valueObj of the symbol table
                                                  }
                                               
                                            }
                                            currentSymTable.varList.clear();
                                            currentSymTable.expList.clear();
                                            
                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_var_init",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // array_declaration ::= var EQ BO ass_list BC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		

                    if(currentSymTable.get(n.name) != null){
                         pSemError("VARIABLE " +"\""+n.name+"\"" +" ALREADY DECLARED: CANNOT REDECLARE VARIABLE TO ARRAY");
                    }else{
                        Integer dim = currentSymTable.expList.size();
                        //    @a = common dso_local global [5 x double] zeroinitializer, align 16
                        //"@"+name+" = " +"global "+type+" "+value+ ", align 8";
                        String type="["+dim+" x double]";
                        appendGlobalDecBuffer("@"+n.name+ " = " + "global "+ type + " zeroinitializer, align 16", true);
                        n.type=Type.TABLE;
                        n.nElement=dim;
                        n.setGlobal();
                        globalSymbolTable.varTable.put(n.name, n);

                      for(int i = 0; i<dim; i++){
                        //<result> = getelementptr inbounds [<#elements> x <type>], [<#elements> x <type>]* <variable>, i32 0, i32 <index>
                        // %2 = getelementptr inbounds [9 x i32], [9 x i32]* %1, i32 0, i32 7
                        String reg = getRegister();
                        String arrayType=" [" + dim +" x double]";
                        appendMainBuffer("%"+reg+ " = " + "getelementptr inbounds" + arrayType+","+arrayType+"*"+ n.scope+n.name+", i32 0, i32 " + i, true);
                        ValueObj arrayCell = new ValueObj(reg);
                        arrayCell.setLocal();
                        arrayCell.type=Type.NUMBER;
                        initVar(arrayCell, currentSymTable.expList.get(i));

                    }
                    currentSymTable.expList.clear();
                    }
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // array_declaration ::= var EQ BO ass_list error 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 
                    
                    pSynWarning("MISSING }");
                    if(currentSymTable.get(n.name) != null){
                         pSemError("VARIABLE " +"\""+n.name+"\"" +" ALREADY DECLARED: CANNOT REDECLARE VARIABLE TO ARRAY");
                    }else{
                        Integer dim = currentSymTable.expList.size();
                    //    @a = common dso_local global [5 x double] zeroinitializer, align 16
                    //"@"+name+" = " +"global "+type+" "+value+ ", align 8";
                    String type="["+dim+" x double]";
                    appendGlobalDecBuffer("@"+n.name+ " = " + "global "+ type + " zeroinitializer, align 16", true);
                    n.type=Type.TABLE;
                    n.nElement=dim;
                    n.setGlobal();
                    globalSymbolTable.varTable.put(n.name, n);

                    for(int i = 0; i<dim; i++){
                        //<result> = getelementptr inbounds [<#elements> x <type>], [<#elements> x <type>]* <variable>, i32 0, i32 <index>
                        // %2 = getelementptr inbounds [9 x i32], [9 x i32]* %1, i32 0, i32 7
                        String reg = getRegister();
                        String arrayType=" [" + dim +" x double]";
                        appendMainBuffer("%"+reg+ " = " + "getelementptr inbounds" + arrayType+","+arrayType+"*"+ n.scope+n.name+", i32 0, i32 " + i, true);
                        ValueObj arrayCell = new ValueObj(reg);
                        arrayCell.setLocal();
                        arrayCell.type=Type.NUMBER;
                        initVar(arrayCell, currentSymTable.expList.get(i));

                    }
                      currentSymTable.expList.clear();
                    } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // array_declaration ::= var EQ BO BC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		

                    if(currentSymTable.get(n.name) != null){
                         pSemError("VARIABLE " +"\""+n.name+"\"" +" ALREADY DECLARED: CANNOT REDECLARE VARIABLE TO ARRAY");
                    }else{
                        Integer dim = currentSymTable.expList.size();
                        System.out.println(dim);
                    //    @a = common dso_local global [5 x double] zeroinitializer, align 16
                    //"@"+name+" = " +"global "+type+" "+value+ ", align 8";
                        String type="["+dim+" x double]";
                        appendGlobalDecBuffer("@"+n.name+ " = " + "global "+ type + " zeroinitializer, align 16", true);
                        n.type=Type.TABLE;
                        n.nElement=dim;
                        n.setGlobal();
                        globalSymbolTable.varTable.put(n.name, n);

                    for(int i = 0; i<dim; i++){
                        //<result> = getelementptr inbounds [<#elements> x <type>], [<#elements> x <type>]* <variable>, i32 0, i32 <index>
                        // %2 = getelementptr inbounds [9 x i32], [9 x i32]* %1, i32 0, i32 7
                        String reg = getRegister();
                        String arrayType=" [" + dim +" x double]";
                        appendMainBuffer("%"+reg+ " = " + "getelementptr inbounds" + arrayType+","+arrayType+"*"+ n.scope+n.name+", i32 0, i32 " + i, true);
                        ValueObj arrayCell = new ValueObj(reg);
                        arrayCell.setLocal();
                        arrayCell.type=Type.NUMBER;
                        initVar(arrayCell, currentSymTable.expList.get(i));

                    }
                      currentSymTable.expList.clear();
                    }



              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assignment ::= var EQ ass_exp 
            {
              ValueObj RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        ValueObj tmp = currentSymTable.get(n.name);
                         
                        if(tmp == null && n.nElement == null){ //if the variable is not declared and it is not an array cell 
                            if(currentSymTable.isFunc){ 
                                pSemError("CANNOT DECLARE GLOBAL VARIABLES INSIDE FUNCTION");
                            }				                    
		                        globalSymbolTable.varTable.put(n.name, n);//TO DO: need to distinguish here between local and global var
                            RESULT = initVar(n, x);
                        }else{ //if it is declared or it is an array cell 
                            if(n.nElement != null){
                                RESULT = initVar(n, x); //if is is an array cell
                            }else{
                                RESULT = initVar(tmp, x); //if it is a declared var
                            }
                        }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assignment ::= var EQ error 
            {
              ValueObj RESULT =null;
		 pSynWarning("ERROR IN RHS OF ASSIGNMENT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // var_list ::= var_list CM var 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  currentSymTable.varList.add(x) ;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // var_list ::= var 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.currentSymTable.varList.add(x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // var_list ::= var_list CM error 
            {
              Object RESULT =null;
		 pSynError("WRONG VARIABLE LIST");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // var ::= ID 
            {
              ValueObj RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

                   /* 
                    * var does not put the variable in the symbol table, otherwise would 
                    * be sufficient to write a to have a variable
                    * avoids things like a=b where b is not previously declared 
                    */
                  
                  RESULT = new ValueObj(n);  
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // var ::= ID SO exp SC 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValueObj i = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 //INSERT ARRAY OUT OF BOUNDS CHECKSSSS
                            
                          ValueObj tmp = currentSymTable.get(x); //get element corresponding to var ID from symbol table
                            if(tmp == null){ //if it is null we cannot do anything
                             pSemError("ARRAY " +"\""+x+"\"" +" NOT DECLARED, CANNOT ACCESS ARRAY ELEMENT");
                              
                            }else{
                                ///////FIX BUG HERE
                                if(tmp.type == Type.TABLE){ //we check if the variable ID is a table
                                    String index=null;
                                    if(i.type == Type.IMMEDIATE){ //if the index is an immediate
                                        index=String.valueOf(i.value.intValue()-1); //just use its value
                                        
                                        /* Consider the offset -> in Lua arrays start from index 1 */
                                        if(i.value.intValue()-1 < 0 || i.value.intValue()-1 >= tmp.nElement ){
                                          pSemError("ARRAY INDEX OUT OF BOUNDS");
                                        }
                                    }else if(i.type == Type.NUMBER){ //if it is a number
                                    String reg=getRegister();
                                    String reg2=getRegister();
                                    appendMainBuffer(loadLLVM("%"+reg, "double", "double", i.scope+i.name,"8"), true); //save the value of the var into the register
                                     //%X = fptosi double -123.0 to i32
                                    appendMainBuffer("%"+reg2+ " = " + "fptosi double "+"%"+reg+" to i32", true); //cast it to int32
                                    index="%"+reg2;
                                    }else if(i.type == Type.RVALUE){  //if it is a register with a number in it
                                        String reg=getRegister();
                                        appendMainBuffer("%"+reg+ " = " + "fptosi double "+"%"+i.name+" to i32", true); //just cast it to i32
                                        index="%"+reg;
                                    }


                                
                                    String reg = getRegister();
                                    String arrayType=" [" + tmp.nElement +" x double]";   
                                    appendMainBuffer("%"+reg+ " = " + "getelementptr inbounds" + arrayType+","+arrayType+"*"+ tmp.scope+tmp.name+", i32 0, i32 " + index, true); //get address of the array cell
                                    ValueObj arrayCell = new ValueObj(reg); //create a new object to store the register containing the reference
                                    arrayCell.setLocal();
                                    arrayCell.type=Type.NUMBER;
                                    arrayCell.name=reg; 
                                    arrayCell.nElement=tmp.nElement;//save the name in the array cell so that we can understand it has already been declared
                                    RESULT = arrayCell;
                                
                                }else{
                                    
                                     pSemError("CANNOT ACCESS VARIABLE " +"\""+x+"\"" +" AS AN ARRAY");
                                }
                            }
                            
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$0 ::= 
            {
              Object RESULT =null;
 currentSymTable = new SymbolTable(currentSymTable, false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // block ::= DO NT$0 stmt_list END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 currentSymTable=currentSymTable.getPrev(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // loop_cond ::= exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            if(x.type!=Type.BOOL){
                                String reg=getRegister();
                                RESULT= new ValueObj(reg); 
                                RESULT.setBool();
                                RESULT.setLocal();
                                appendMainBuffer("%"+reg + " = icmp "+ "eq" +" i32 0" +", " + "0", true); //calculate result
                            }else{
                                RESULT=x;
                            }

                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_cond",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$1 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;


                                currentSymTable = new SymbolTable(currentSymTable, false);
                                loopCount = ++totLoopCount;
                                loopList.push(loopCount);    
                                appendMainBuffer(("br label %for.cond." + loopCount), true);
                                appendMainBuffer(("for.cond." + loopCount + ":"), true);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 //what to allow?
                                              appendMainBuffer(("br i1 " + x.scope+x.name + ", label %for.body." + loopCount + ", label %for.exit." + loopCount), true);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                                  appendMainBuffer(("for.inc." + loopCount + ":"), true);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                                    ValueObj tmp=operation("fadd", n, y);
                                    initVar(n, tmp);
                                    appendMainBuffer(("br label %for.cond." + loopCount), true);
                                    appendMainBuffer(("for.body." + loopCount + ":"), true);
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // for_loop ::= FOR assignment NT$1 CM loop_cond NT$2 CM NT$3 exp NT$4 DO stmt_list END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                                                loopCount=loopList.pop(); //restore it when statement is finished
                                                appendMainBuffer(("br label %for.inc." + loopCount), true);
                                                appendMainBuffer(("for.exit." + loopCount + ":"), true);
                                                currentSymTable=currentSymTable.getPrev(true);
                            
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // for_loop ::= FOR error CM loop_cond CM exp DO stmt_list END 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 pSynError("WRONG LOOP VAR INITIALIZATION: MUST BE var=immediate");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$5 ::= 
            {
              Object RESULT =null;
 currentSymTable = new SymbolTable(currentSymTable, false); 
                        loopCount = ++totLoopCount;
                        loopList.push(loopCount); //when entering a statement, save the loop number on the stack
                        appendMainBuffer(("br label %for.cond." + loopCount), true);
                        appendMainBuffer(("for.cond." + loopCount + ":"), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                        appendMainBuffer(("br i1 " + x.scope+x.name + ", label %for.body." + loopCount + ", label %for.exit." + loopCount), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                        appendMainBuffer(("for.body." + loopCount + ":"), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // while_loop ::= WHILE NT$5 loop_cond NT$6 DO NT$7 stmt_list END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                        currentSymTable=currentSymTable.getPrev(true);
                        loopCount=loopList.pop(); //restore it when statement is finished
                        appendMainBuffer(("br label %for.cond." + loopCount), true);
                        appendMainBuffer(("for.exit." + loopCount + ":"), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_loop",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // while_loop ::= WHILE error stmt_list END 
            {
              Object RESULT =null;
		 pSynWarning("MISSING \"DO\"");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_loop",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$8 ::= 
            {
              Object RESULT =null;

                         currentSymTable = new SymbolTable(currentSymTable, false); 
                        loopCount = ++totLoopCount;
                        loopList.push(loopCount); //when entering a statement, save the loop number on the stack
                        appendMainBuffer(("br label %for.body." + loopCount), true);
                        appendMainBuffer(("for.body." + loopCount + ":"), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
                        loopCount=loopList.pop(); //restore it when statement is finished                   
                        appendMainBuffer(("br label %for.cond." + loopCount), true);
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        appendMainBuffer(("for.cond." + loopCount + ":"), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // repeat_loop ::= REPEAT NT$8 stmt_list NT$9 UNTIL NT$10 loop_cond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                        
                        appendMainBuffer(("br i1 " + x.scope+x.name + ", label %for.body." + loopCount + ", label %for.exit." + loopCount), true);
                        appendMainBuffer(("for.exit." + loopCount + ":"), true);
                        currentSymTable=currentSymTable.getPrev(true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_loop",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$11 ::= 
            {
              Object RESULT =null;
  currentSymTable = new SymbolTable(currentSymTable, false); 
                    loopCount = ++totLoopCount; loopList.push(loopCount);//when entering a statement, save the loop number on the stack
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    appendMainBuffer(("br i1 " + x.scope+x.name + ", label %if.body." + loopCount + ", label %if.else." + loopCount), true);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                    appendMainBuffer(("if.body." + loopCount + ":"), true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
loopCount=loopList.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // if_block ::= IF NT$11 loop_cond NT$12 THEN NT$13 stmt_list NT$14 else_block END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // if_block ::= IF error stmt_list else_block END 
            {
              Object RESULT =null;
		 pSynWarning("ERROR IN IF CONDITION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$15 ::= 
            {
              Object RESULT =null;
 
                     appendMainBuffer(("br label %if.exit." + loopCount), true);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
                    appendMainBuffer(("if.else." + loopCount + ":"), true); 
                    loopList.push(loopCount);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // else_block ::= NT$15 ELSE NT$16 stmt_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   
                     loopCount=loopList.pop();
                    appendMainBuffer(("br label %if.exit." + loopCount), true);
                    appendMainBuffer(("if.exit." + loopCount + ":"), true);
                    currentSymTable=currentSymTable.getPrev(true);
                    
                  
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // else_block ::= 
            {
              Object RESULT =null;
		
                        appendMainBuffer(("br label %if.else." + loopCount), true);
                        appendMainBuffer(("if.else." + loopCount + ":"), true); 
                        currentSymTable=currentSymTable.getPrev(true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // func_decl_param ::= var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl_param",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // func_decl_param ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl_param",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$17 ::= 
            {
              Object RESULT =null;
 currentSymTable = new SymbolTable(currentSymTable, true); //use new symbol table
                              currentSymTable.currentBuffer=funcBuffer; //set buffer to func buffer

                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String fName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                    if(!libraryName.isBlank()){  //to account for module functions
                         fName=libraryName+"."+fName;
                    }
                   
                    if(funcTable.containsKey(fName)){
                        pSemError("FUNCTION ALREADY DECLARED");
                    }
                    FuncObj func = new FuncObj(fName); //create new funct object
                    funcTable.put(fName, func);
                    func.nargsTot=currentSymTable.varList.size(); //set number of param in the function

                    appendMainBuffer(("define double @" + fName + "("), false); //definition of function
                    
                    for (int i = 0; i < currentSymTable.varList.size(); i++){ //loop through all parameters and append it to the function delcaration
                        if(i!=currentSymTable.varList.size()-1)
                            appendMainBuffer("double, ", false);
                        else
                            appendMainBuffer("double ", false);
                    }
                   
                    appendMainBuffer((") {"), true); //end  function declaration

                     currentSymTable.registerCount = func.nargsTot + 1;


                
                    for (int i = 0; i < currentSymTable.varList.size(); i++){ //inside the function, allocate a value for each parameter
                        String reg = getRegister();
                        ValueObj tmp = new ValueObj(reg); //create new value parameter
                        tmp.setDouble();
                        tmp.setLocal();
                        currentSymTable.varTable.put(currentSymTable.varList.get(i).name, tmp); //add to the symbol table
                   
                        appendMainBuffer(("%" + reg + " = alloca " + "double" + ", align " + "8"), true); //allocate parameter
                        appendMainBuffer(("store " + "double" + " %" + i + ", "  + "double* " + "%" + reg + ", align 8"), true); //store passed parameter in the function param
                    }
                    
                    currentSymTable.varList.clear();  //clear var list
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // function_decl ::= FUNCTION NT$17 ID RO func_decl_param RC NT$18 stmt_list ret END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String fName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 appendMainBuffer("\n}", true);  //use directly the regitter

                                        currentSymTable = currentSymTable.getPrev(false); currentSymTable.currentBuffer=mainBuffer; //go to previous symbol table e buffer
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // function_decl ::= FUNCTION RO func_decl_param RC stmt_list error 
            {
              Object RESULT =null;
		 pSynWarning("MISSING RETURN STATEMENT ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ret ::= RETURN exp 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        
                        if(x.type == Type.IMMEDIATE){ 
                            appendMainBuffer("ret double " + x.value, true);  //append just the value
                             getRegister();
                        }else if(x.type == Type.NUMBER){
                            String reg = getRegister(); //need to load the value into a register
                            appendMainBuffer(loadLLVM("%"+reg, "double", "double", x.scope+x.name, "8"), true);
                            appendMainBuffer("ret double " + "%"+reg, true); 
                            getRegister(); 
                        }else if(x.type == Type.RVALUE){
                            appendMainBuffer("ret double " + x.scope+x.name, true);  //use directly the regitter
                             getRegister();
                        }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ret ::= RETURN error 
            {
              Object RESULT =null;
		 pSynWarning("MISSING RETURN VALUE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // print_func ::= PRINT RO STRING RC 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 


    int label = genLabelString();
    String s = value;
    s = s.substring(1, s.length() - 1);
    int length = s.length();
    if (!s.contains("\\n"))
      length++;
    s = s.replace("\\n", "\\0A");
    s = s + "\\00";
    
    appendMainBuffer(("%" + getRegister() + " = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([" + length + " x i8], [" + length + " x i8]* @.str." + label + ", i32 0, i32 0))"), true);
    stringList.add(value);
   
    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$19 ::= 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = new ArrayList<ValueObj>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // print_func ::= PRINT RO STRFRT RO STRING CM NT$19 func_param_list RC RC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ValueObj> x = (ArrayList<ValueObj>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                    ArrayList<ValueObj> paramsList = (ArrayList<ValueObj>) x; //list of parameters to print
                                    if(paramsList.size()==0){
                                        pSynError("MISSING PARAMETERS IN PRINT FUNCTION");
                                    }
                                    int label = genLabelString(); //save the string format
    
                                    String s = value;
                                    s = s.substring(1, s.length() - 1);
                                    int length = s.length();
                                    if (!s.contains("\\n"))
                                    length++;
                                    s = s.replace("\\n", "\\0A");
                                    s = s + "\\00";
                                    //use a temporary buffer so that we can load elements from memory before writing the print
                                    StringBuffer printBuffer = new StringBuffer();
                                    //do not specify the register output because we need to put it after loading eventually var of type NUMBER
                                    printBuffer.append(" = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([" + length + " x i8], [" + length + " x i8]* @.str." + label + ", i32 0, i32 0), ");
                                    stringList.add(value);

                                    

   
                                                for (int i = 0; i < paramsList.size(); i++){
                                                            ValueObj param = x.get(i);                                                
                                                    if(param.type==Type.IMMEDIATE){ //if it is an immediate
                                                        printBuffer.append("double "+param.value); //just append the value
                                                    }else if(param.type==Type.RVALUE){ //if it is a register number
                                                        printBuffer.append("double %"+param.name); //append the register
                                                    }else if(param.type==Type.NUMBER){ //if it is a number
                                                        String reg1 = getRegister(); //load the register
                                                        appendMainBuffer(loadLLVM("%"+reg1, "double", "double", param.scope+param.name, "8"), true);
                                                         printBuffer.append("double %"+reg1); //and attach theregister
                                                    }
                                                    if(i!=paramsList.size()-1){
                                                        printBuffer.append(", ");
                                                    }
                                                    
                                                }
                                                        //"%" + getRegister() + 
                                                        printBuffer.append((")")); //close the printf func
                                                        printBuffer.reverse(); //this is a trick to append at the beginning instead of at the end
                                                        printBuffer.append(new StringBuffer("%" + getRegister()).reverse());
                                                        printBuffer.reverse();
                                                        appendMainBuffer(printBuffer.toString(), true);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$20 ::= 
            {
              Object RESULT =null;
 RESULT = new ArrayList<ValueObj>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // print_func ::= PRINT RO NT$20 func_param_list RC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ValueObj> x = (ArrayList<ValueObj>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                    ArrayList<ValueObj> paramsList = (ArrayList<ValueObj>) x; //list of parameters to print
                                    if(paramsList.size()==0){
                                        pSynError("MISSING PARAMETERS IN PRINT FUNCTION");
                                    }
                                    
                                    //use a temporary buffer so that we can load elements from memory before writing the print
                                    StringBuffer printBuffer = new StringBuffer();
                                    StringBuffer printBuffer2 = new StringBuffer();
                                    StringBuffer value2 = new StringBuffer();
                                    //do not specify the register output because we need to put it after loading eventually var of type NUMBER
                                    value2.append("  ");

                                    

   
                                                for (int i = 0; i < paramsList.size(); i++){
                                                            ValueObj param = x.get(i);                                                
                                                    if(param.type==Type.IMMEDIATE){ //if it is an immediate
                                                        printBuffer2.append("double "+param.value); //just append the value
                                                    }else if(param.type==Type.RVALUE){ //if it is a register number
                                                        printBuffer2.append("double %"+param.name); //append the register
                                                    }else if(param.type==Type.NUMBER){ //if it is a number
                                                        String reg1 = getRegister(); //load the register
                                                        appendMainBuffer(loadLLVM("%"+reg1, "double", "double", param.scope+param.name, "8"), true);
                                                         printBuffer2.append("double %"+reg1); //and attach theregister
                                                    }
                                                    if(i!=paramsList.size()-1){
                                                        printBuffer2.append(", ");
                                                    }
                                                    value2.append("%.0f ");
                                                }

                                                        value2.append("\n");
                                                        int label = genLabelString(); //save the string format
                                                        String value =value2.toString();
                                                        String s = value;
                                                        s = s.substring(1, s.length() - 1);
                                                        int length = s.length();
                                                        if (!s.contains("\\n"))
                                                        length++;
                                                        s = s.replace("\\n", "\\0A");
                                                        s = s + "\\00";
                                                        stringList.add(value);
                                                        printBuffer.append(" = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([" + length + " x i8], [" + length + " x i8]* @.str." + label + ", i32 0, i32 0), ");
                                                        printBuffer.append(printBuffer2.toString());
                                                        printBuffer.append((")")); //close the printf func
                                                        printBuffer.reverse(); //this is a trick to append at the beginning instead of at the end
                                                        printBuffer.append(new StringBuffer("%" + getRegister()).reverse());
                                                        printBuffer.reverse();
                                                        appendMainBuffer(printBuffer.toString(), true);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // func_param_list ::= func_param_list CM exp 
            {
              ArrayList<ValueObj> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ValueObj> x = (ArrayList<ValueObj>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=x;
                                                    x.add(y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_param_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // func_param_list ::= exp 
            {
              ArrayList<ValueObj> RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ArrayList<ValueObj>();
                                RESULT.add(y);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_param_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // func_param_list ::= 
            {
              ArrayList<ValueObj> RESULT =null;
		 RESULT= new ArrayList<ValueObj>();
                                
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_param_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // func_call ::= ID RO func_param_list RC 
            {
              String RESULT =null;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String fName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ValueObj> x = (ArrayList<ValueObj>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 //function invocatio
                                                if(!funcTable.containsKey(fName)){ //if function is not declared
                                                    if(libraryName.isBlank()){
                                                        pSemError("FUNCTION "+fName+" NOT DECLARE, CANNOT INVOKE IT"); 
                                                    }else{
                                                        fName=libraryName+"."+fName;
                                                    }                                                 
                                                }
                                                FuncObj func = funcTable.get(fName);
                                                if(func.nargsTot != x.size()){ //if parameters passed do not coincide with declaration
                                                     pSemError("WRONG NUMBER OF PARAMETERS IN FUNCTION "+fName);
                                                   
                                                }

                                                
                                                
                                                StringBuffer parameters = new StringBuffer();
                                                for(int i = 0; i<func.nargsTot; i++){ //loop through the parameters 
                                                    ValueObj param = x.get(i);                                                
                                                    if(param.type==Type.IMMEDIATE){ //if it is an immediate
                                                        parameters.append("double "+param.value); //just append the value
                                                    }else if(param.type==Type.RVALUE){ //if it is a register number
                                                        parameters.append("double %"+param.name); //append the register
                                                    }else if(param.type==Type.NUMBER){ //if it is a number
                                                        String reg1 = getRegister(); //load the register
                                                        appendMainBuffer(loadLLVM("%"+reg1, "double", "double", param.scope+param.name, "8"), true);
                                                        parameters.append("double %"+reg1); //and attach theregister
                                                    }else if(param.type==Type.TABLE){
                                                        pSynError("TRYING TO PASS A TABLE TO A FUNCTION -- NOT ALLOWED HERE");
                                                        //parameters.append("double "+param.scope+param.name); //append the register

                                                    }
                                                    if(i!=func.nargsTot-1){
                                                        parameters.append(", ");
                                                    }
                

                                                }
                                                String reg=getRegister();
                                                appendMainBuffer("%"+reg+" = call double @"+fName+"("+parameters.toString()+")", true); //call the function
                                                RESULT=reg;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
