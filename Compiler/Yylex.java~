/* The following code was generated by JFlex 1.7.0 */

import java_cup.runtime.*;
import java.io.FileReader;
import java.io.FileNotFoundException;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.jflex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {
  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INCL = 2;
  public static final int DELETENR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\13\1\57\1\57\1\12\22\0\1\14\1\0\1\11"+
    "\4\0\1\7\1\42\1\43\1\50\1\47\1\56\1\10\1\4\1\51"+
    "\1\2\11\3\2\0\1\52\1\46\1\53\2\0\4\1\1\6\25\1"+
    "\1\15\1\0\1\16\1\54\1\1\1\0\1\33\1\1\1\36\1\34"+
    "\1\5\1\30\1\27\1\40\1\22\2\1\1\35\1\32\1\26\1\31"+
    "\1\37\1\20\1\17\1\24\1\25\1\21\1\1\1\41\3\1\1\44"+
    "\1\0\1\45\1\55\6\0\1\57\u1fa2\0\1\57\1\57\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\1\3\1\4"+
    "\1\6\1\3\2\1\1\7\1\10\15\4\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\3\1\24\1\0\1\1\2\0\1\5\2\4"+
    "\2\0\1\25\2\4\1\26\6\4\1\27\1\4\1\30"+
    "\3\4\1\31\1\32\1\33\1\0\1\4\1\5\1\0"+
    "\1\34\1\4\2\0\6\4\1\35\1\36\1\4\1\37"+
    "\1\40\3\4\1\41\1\5\1\0\1\42\1\0\5\4"+
    "\1\43\4\4\3\0\2\1\3\4\1\44\2\4\1\45"+
    "\1\46\1\47\4\0\1\4\1\50\1\51\2\4\2\0"+
    "\1\52\1\0\1\4\1\1\1\0\1\4\1\53\4\4"+
    "\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\220\0\220\0\220\0\u0240"+
    "\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0"+
    "\0\u03f0\0\u0420\0\u0450\0\u0480\0\220\0\220\0\220\0\220"+
    "\0\220\0\220\0\220\0\220\0\u04b0\0\u04e0\0\220\0\u0510"+
    "\0\220\0\u0540\0\u0570\0\u05a0\0\360\0\u05d0\0\u0600\0\u0630"+
    "\0\u0660\0\u01e0\0\220\0\u0690\0\u06c0\0\300\0\u06f0\0\u0720"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\300\0\u0810\0\300\0\u0840"+
    "\0\u0870\0\u08a0\0\220\0\220\0\220\0\u08d0\0\u0900\0\220"+
    "\0\u0930\0\300\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50"+
    "\0\u0a80\0\u0ab0\0\u0ae0\0\300\0\300\0\u0b10\0\300\0\300"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\220\0\u0bd0\0\u0c00\0\300\0\u0c30"+
    "\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\300\0\u0d50\0\u0d80"+
    "\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00"+
    "\0\u0f30\0\u0f60\0\300\0\u0f90\0\u0fc0\0\300\0\300\0\300"+
    "\0\u0bd0\0\u0ff0\0\u0ed0\0\u1020\0\u1050\0\300\0\300\0\u1080"+
    "\0\u10b0\0\u10e0\0\u1110\0\300\0\u1140\0\u1170\0\u0990\0\u11a0"+
    "\0\u11d0\0\300\0\u1200\0\u1230\0\u1260\0\u1290\0\u0900";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\5\1\4"+
    "\1\12\1\13\1\14\2\15\1\16\1\17\1\20\1\5"+
    "\1\21\1\22\1\4\1\23\1\24\1\25\1\5\1\26"+
    "\1\27\1\5\1\30\1\31\1\32\1\5\1\33\1\5"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\12\0\1\52"+
    "\2\0\1\53\6\0\1\53\46\0\2\3\7\0\1\3"+
    "\115\0\3\5\1\54\2\5\10\0\4\5\1\0\16\5"+
    "\20\0\2\55\1\56\55\0\2\7\1\56\55\0\2\56"+
    "\55\0\3\5\1\54\2\5\10\0\4\5\1\0\2\5"+
    "\1\57\6\5\1\60\4\5\26\0\1\61\47\0\11\62"+
    "\1\63\46\62\13\0\1\15\45\0\3\5\1\54\1\64"+
    "\1\5\10\0\4\5\1\0\16\5\17\0\3\5\1\54"+
    "\2\5\10\0\4\5\1\0\2\5\1\65\13\5\17\0"+
    "\3\5\1\54\2\5\10\0\4\5\1\0\4\5\1\66"+
    "\11\5\17\0\3\5\1\54\2\5\10\0\4\5\1\0"+
    "\1\5\1\67\14\5\17\0\3\5\1\54\2\5\10\0"+
    "\4\5\1\0\14\5\1\70\1\5\17\0\3\5\1\54"+
    "\2\5\10\0\3\5\1\71\1\0\5\5\1\72\10\5"+
    "\17\0\3\5\1\54\2\5\10\0\2\5\1\73\1\5"+
    "\1\0\5\5\1\74\10\5\17\0\3\5\1\54\2\5"+
    "\10\0\1\75\3\5\1\0\16\5\17\0\3\5\1\54"+
    "\2\5\10\0\4\5\1\0\2\5\1\76\13\5\17\0"+
    "\3\5\1\54\2\5\10\0\4\5\1\0\5\5\1\77"+
    "\10\5\17\0\3\5\1\54\2\5\10\0\4\5\1\0"+
    "\5\5\1\100\10\5\17\0\3\5\1\54\2\5\10\0"+
    "\1\101\3\5\1\0\16\5\17\0\3\5\1\54\2\5"+
    "\10\0\4\5\1\0\14\5\1\102\1\5\64\0\1\103"+
    "\57\0\1\104\57\0\1\105\12\0\1\106\3\0\2\106"+
    "\10\0\4\106\1\0\16\106\32\0\1\53\6\0\1\53"+
    "\35\0\1\107\3\0\2\107\10\0\4\107\1\0\16\107"+
    "\20\0\2\56\1\0\1\110\1\111\52\0\3\5\1\54"+
    "\2\5\10\0\4\5\1\0\10\5\1\112\5\5\17\0"+
    "\3\5\1\54\2\5\10\0\4\5\1\0\1\113\15\5"+
    "\16\0\12\114\1\14\1\15\1\114\1\115\42\114\1\0"+
    "\3\5\1\54\2\5\10\0\1\5\1\116\2\5\1\0"+
    "\1\5\1\117\11\5\1\120\2\5\17\0\3\5\1\54"+
    "\2\5\10\0\4\5\1\0\1\5\1\121\14\5\17\0"+
    "\3\5\1\54\2\5\10\0\1\122\3\5\1\0\16\5"+
    "\17\0\3\5\1\54\1\123\1\5\10\0\4\5\1\0"+
    "\16\5\17\0\3\5\1\54\2\5\10\0\4\5\1\0"+
    "\11\5\1\124\4\5\17\0\3\5\1\54\2\5\10\0"+
    "\4\5\1\0\1\5\1\125\14\5\17\0\3\5\1\54"+
    "\2\5\10\0\4\5\1\0\2\5\1\126\13\5\17\0"+
    "\3\5\1\54\2\5\10\0\1\127\3\5\1\0\16\5"+
    "\17\0\3\5\1\54\2\5\10\0\4\5\1\0\10\5"+
    "\1\130\5\5\17\0\3\5\1\54\2\5\10\0\4\5"+
    "\1\0\12\5\1\131\3\5\17\0\3\5\1\54\2\5"+
    "\10\0\3\5\1\132\1\0\16\5\17\0\3\5\1\54"+
    "\2\5\10\0\3\5\1\133\1\0\16\5\17\0\6\106"+
    "\2\0\1\134\5\0\4\106\1\0\16\106\17\0\3\107"+
    "\1\0\2\107\10\0\4\107\1\0\16\107\20\0\2\135"+
    "\3\0\1\136\51\0\3\5\1\54\1\137\1\5\10\0"+
    "\4\5\1\0\16\5\16\0\12\114\1\14\1\15\56\114"+
    "\1\14\1\15\1\114\1\140\42\114\1\0\3\5\1\54"+
    "\2\5\10\0\2\5\1\141\1\5\1\0\16\5\17\0"+
    "\3\5\1\54\2\5\10\0\2\5\1\142\1\5\1\0"+
    "\16\5\17\0\3\5\1\54\1\143\1\5\10\0\4\5"+
    "\1\0\16\5\17\0\3\5\1\54\2\5\10\0\3\5"+
    "\1\144\1\0\16\5\17\0\3\5\1\54\2\5\10\0"+
    "\3\5\1\145\1\0\16\5\17\0\3\5\1\54\2\5"+
    "\10\0\4\5\1\0\2\5\1\146\13\5\17\0\3\5"+
    "\1\54\2\5\10\0\4\5\1\0\12\5\1\147\3\5"+
    "\17\0\3\5\1\54\2\5\10\0\4\5\1\0\7\5"+
    "\1\150\6\5\17\0\3\5\1\54\2\5\10\0\4\5"+
    "\1\0\2\5\1\151\13\5\17\0\3\5\1\54\2\5"+
    "\10\0\4\5\1\0\11\5\1\152\4\5\20\0\2\135"+
    "\63\0\1\153\1\154\47\0\10\140\1\155\1\140\1\156"+
    "\1\157\44\140\1\0\3\5\1\54\2\5\10\0\3\5"+
    "\1\160\1\0\16\5\17\0\3\5\1\54\2\5\10\0"+
    "\1\161\3\5\1\0\16\5\17\0\3\5\1\54\2\5"+
    "\10\0\4\5\1\0\7\5\1\162\6\5\17\0\3\5"+
    "\1\54\2\5\10\0\4\5\1\0\11\5\1\163\4\5"+
    "\17\0\3\5\1\54\2\5\10\0\4\5\1\0\2\5"+
    "\1\164\13\5\17\0\3\5\1\54\2\5\10\0\4\5"+
    "\1\0\1\5\1\165\14\5\17\0\3\5\1\54\2\5"+
    "\10\0\4\5\1\0\11\5\1\166\4\5\17\0\3\5"+
    "\1\54\2\5\10\0\4\5\1\0\1\5\1\167\14\5"+
    "\17\0\3\5\1\54\1\170\1\5\10\0\4\5\1\0"+
    "\16\5\20\0\2\135\3\0\1\153\57\0\1\171\50\0"+
    "\10\140\1\172\1\140\1\156\1\157\44\140\10\173\1\174"+
    "\2\173\1\157\54\173\1\174\47\173\1\0\3\5\1\54"+
    "\2\5\10\0\1\175\3\5\1\0\16\5\17\0\3\5"+
    "\1\54\2\5\10\0\4\5\1\0\2\5\1\176\13\5"+
    "\17\0\3\5\1\54\2\5\10\0\4\5\1\0\1\5"+
    "\1\177\14\5\17\0\3\5\1\54\2\5\10\0\4\5"+
    "\1\0\3\5\1\200\12\5\17\0\3\5\1\54\2\5"+
    "\10\0\3\5\1\201\1\0\16\5\16\0\10\140\1\172"+
    "\1\140\1\156\1\157\2\140\1\202\41\140\10\173\1\203"+
    "\47\173\1\0\3\5\1\54\1\204\1\5\10\0\4\5"+
    "\1\0\16\5\17\0\3\5\1\205\2\5\10\0\4\5"+
    "\1\0\16\5\17\0\3\5\1\54\2\5\10\0\4\5"+
    "\1\0\5\5\1\206\10\5\16\0\10\140\1\155\1\140"+
    "\1\156\1\157\2\140\1\207\41\140\10\173\1\203\5\173"+
    "\1\210\41\173\1\0\1\107\3\0\2\107\10\0\4\107"+
    "\1\0\4\107\1\211\11\107\17\0\3\5\1\54\2\5"+
    "\10\0\4\5\1\0\2\5\1\212\13\5\16\0\10\173"+
    "\1\174\5\173\1\15\41\173\1\0\3\107\1\0\2\107"+
    "\10\0\4\107\1\0\5\107\1\213\10\107\17\0\3\107"+
    "\1\0\2\107\10\0\1\214\3\107\1\0\16\107\17\0"+
    "\3\107\1\0\2\107\10\0\4\107\1\0\6\107\1\215"+
    "\7\107\17\0\3\107\1\0\2\107\10\0\4\107\1\0"+
    "\7\107\1\216\6\107\17\0\3\107\1\0\2\107\10\0"+
    "\4\107\1\0\1\107\1\217\14\107\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\10\1\3\11\15\1\10\11\2\1"+
    "\1\11\1\1\1\11\1\0\1\1\2\0\3\1\2\0"+
    "\1\11\17\1\3\11\1\0\1\1\1\11\1\0\2\1"+
    "\2\0\16\1\1\11\1\1\1\0\1\1\1\0\12\1"+
    "\3\0\13\1\4\0\5\1\2\0\1\1\1\0\2\1"+
    "\1\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** the stack of open (nested) input streams to read from */
  private java.util.Deque<ZzFlexStreamInfo> zzStreams
    = new java.util.ArrayDeque<ZzFlexStreamInfo>();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int yyline;
    long yychar;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtBOL;
    boolean zzAtEOF;
    boolean zzEOFDone;
    int zzFinalHighSurrogate;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, char [] zzBuffer,
                  boolean zzAtBOL, boolean zzAtEOF, boolean zzEOFDone,
                  int zzFinalHighSurrogate, int yyline, long yychar,
                  int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtBOL       = zzAtBOL;
      this.zzAtEOF       = zzAtEOF;
      this.zzEOFDone     = zzEOFDone;
      this.zzFinalHighSurrogate = zzFinalHighSurrogate;
      this.yyline        = yyline;
      this.yychar        = yychar;
      this.yycolumn      = yycolumn;
    }
  }

  /* user code: */
  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
	
  }


  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;           // indicate end of file
    zzEndRead = zzStartRead;  // invalidate buffer

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopStream (usually in an {@code <<EOF>>} action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtBOL, zzAtEOF, zzEOFDone,
                        zzFinalHighSurrogate, yyline, yychar, yycolumn)
    );
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    yyResetPosition();
  }


  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack.
   *
   * @throws java.util.NoSuchElementException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos;
    zzAtBOL       = s.zzAtBOL;
    zzAtEOF       = s.zzAtEOF;
    zzEOFDone     = s.zzEOFDone;
    zzFinalHighSurrogate = s.zzFinalHighSurrogate;
    yyline        = s.yyline;
    yychar        = s.yychar;
    yycolumn      = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to {@code ZZ_INITIAL}.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }

  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                if(yymoreStreams()){
          yypopStream();
          yybegin(DELETENR);
          parser.libraryName="";
      }else return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { ;
            } 
            // fall through
          case 45: break;
          case 2: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 46: break;
          case 3: 
            { System.out.println("SCANNER ERROR: "+yytext());
            } 
            // fall through
          case 47: break;
          case 4: 
            { return symbol(sym.ID, yytext());
            } 
            // fall through
          case 48: break;
          case 5: 
            { return symbol(sym.NUMBER, new Double(yytext()));
            } 
            // fall through
          case 49: break;
          case 6: 
            { return symbol(sym.MINUS);
            } 
            // fall through
          case 50: break;
          case 7: 
            { return symbol(sym.SO);
            } 
            // fall through
          case 51: break;
          case 8: 
            { return symbol(sym.SC);
            } 
            // fall through
          case 52: break;
          case 9: 
            { return symbol(sym.RO);
            } 
            // fall through
          case 53: break;
          case 10: 
            { return symbol(sym.RC);
            } 
            // fall through
          case 54: break;
          case 11: 
            { return symbol(sym.BO);
            } 
            // fall through
          case 55: break;
          case 12: 
            { return symbol(sym.BC);
            } 
            // fall through
          case 56: break;
          case 13: 
            { return symbol(sym.EQ);
            } 
            // fall through
          case 57: break;
          case 14: 
            { return symbol(sym.PLUS);
            } 
            // fall through
          case 58: break;
          case 15: 
            { return symbol(sym.STAR);
            } 
            // fall through
          case 59: break;
          case 16: 
            { return symbol(sym.DIV);
            } 
            // fall through
          case 60: break;
          case 17: 
            { return symbol(sym.MIN);
            } 
            // fall through
          case 61: break;
          case 18: 
            { return symbol(sym.MAJ);
            } 
            // fall through
          case 62: break;
          case 19: 
            { return symbol(sym.HAT);
            } 
            // fall through
          case 63: break;
          case 20: 
            { return symbol(sym.CM);
            } 
            // fall through
          case 64: break;
          case 21: 
            { return symbol(sym.STRING, yytext());
            } 
            // fall through
          case 65: break;
          case 22: 
            { return symbol(sym.IF);
            } 
            // fall through
          case 66: break;
          case 23: 
            { return symbol(sym.OR);
            } 
            // fall through
          case 67: break;
          case 24: 
            { return symbol(sym.DO);
            } 
            // fall through
          case 68: break;
          case 25: 
            { return symbol(sym.MIN_EQ);
            } 
            // fall through
          case 69: break;
          case 26: 
            { return symbol(sym.MAJ_EQ);
            } 
            // fall through
          case 70: break;
          case 27: 
            { return symbol(sym.NOTEQ);
            } 
            // fall through
          case 71: break;
          case 28: 
            { return symbol(sym.END);
            } 
            // fall through
          case 72: break;
          case 29: 
            { return symbol(sym.NIL);
            } 
            // fall through
          case 73: break;
          case 30: 
            { return symbol(sym.NOT);
            } 
            // fall through
          case 74: break;
          case 31: 
            { return symbol(sym.FOR);
            } 
            // fall through
          case 75: break;
          case 32: 
            { return symbol(sym.AND);
            } 
            // fall through
          case 76: break;
          case 33: 
            { System.out.println(yytext());
    String file = yytext().substring(1, yytext().length()-1);
    try{
    yypushStream(new FileReader(file.trim()));
    yybegin(YYINITIAL);
    return symbol(sym.FILE, file.substring(0, file.length()-4));
    }catch(FileNotFoundException e){

      return symbol(sym.FNF);

    }
            } 
            // fall through
          case 77: break;
          case 34: 
            { return symbol(sym.ELSE);
            } 
            // fall through
          case 78: break;
          case 35: 
            { return symbol(sym.THEN);
            } 
            // fall through
          case 79: break;
          case 36: 
            { return symbol(sym.UNTIL);
            } 
            // fall through
          case 80: break;
          case 37: 
            { return symbol(sym.LOCAL);
            } 
            // fall through
          case 81: break;
          case 38: 
            { return symbol(sym.PRINT);
            } 
            // fall through
          case 82: break;
          case 39: 
            { return symbol(sym.WHILE);
            } 
            // fall through
          case 83: break;
          case 40: 
            { return symbol(sym.RETURN);
            } 
            // fall through
          case 84: break;
          case 41: 
            { return symbol(sym.REPEAT);
            } 
            // fall through
          case 85: break;
          case 42: 
            { System.out.println(yytext());
                    yybegin(INCL); 
                    return symbol(sym.REQUIRE);
            } 
            // fall through
          case 86: break;
          case 43: 
            { return symbol(sym.FUNCTION);
            } 
            // fall through
          case 87: break;
          case 44: 
            { return symbol(sym.STRFRT);
            } 
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
