
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;
import java.util.Map.*;
import java.util.ArrayList;
import java.util.regex.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\026\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\013\004\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\036\005\000\002\036\003\000\002\036\004\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\004\000\002\036\006\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\011\005\000\002\011" +
    "\003\000\002\034\003\000\002\007\004\000\002\006\005" +
    "\000\002\002\005\000\002\005\007\000\002\005\007\000" +
    "\002\037\005\000\002\037\005\000\002\010\005\000\002" +
    "\010\003\000\002\010\005\000\002\033\003\000\002\033" +
    "\006\000\002\042\002\000\002\004\006\000\002\035\003" +
    "\000\002\043\002\000\002\044\002\000\002\045\002\000" +
    "\002\046\002\000\002\012\017\000\002\012\013\000\002" +
    "\047\002\000\002\050\002\000\002\051\002\000\002\015" +
    "\012\000\002\015\006\000\002\052\002\000\002\053\002" +
    "\000\002\054\002\000\002\016\011\000\002\055\002\000" +
    "\002\056\002\000\002\057\002\000\002\060\002\000\002" +
    "\017\014\000\002\017\007\000\002\061\002\000\002\062" +
    "\002\000\002\020\006\000\002\020\002\000\002\022\003" +
    "\000\002\022\002\000\002\024\002\000\002\024\004\000" +
    "\002\063\002\000\002\064\002\000\002\030\014\000\002" +
    "\030\010\000\002\021\004\000\002\021\004\000\002\031" +
    "\006\000\002\065\002\000\002\031\014\000\002\066\002" +
    "\000\002\031\007\000\002\040\005\000\002\040\003\000" +
    "\002\040\002\000\002\041\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\026\032\023\033\033\034\017\040\013\043" +
    "\012\044\035\046\016\047\014\050\027\051\021\001\002" +
    "\000\040\002\ufff4\003\ufff4\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\037\ufff4\040\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\001\002\000\040\002\ufff2\003" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2\040\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\001\002\000\040\002\ufff6\003\ufff6\032\ufff6\033\ufff6" +
    "\034\ufff6\035\ufff6\037\ufff6\040\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\001\002\000\040" +
    "\002\uffff\003\uffff\032\uffff\033\uffff\034\uffff\035\uffff\037" +
    "\uffff\040\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff" +
    "\050\uffff\051\uffff\001\002\000\006\016\302\031\247\001" +
    "\002\000\042\002\ufffe\003\ufffe\016\300\032\ufffe\033\ufffe" +
    "\034\ufffe\035\ufffe\037\ufffe\040\ufffe\043\ufffe\044\ufffe\045" +
    "\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\001\002\000\020" +
    "\003\266\013\uffc1\020\uffc1\025\uffc1\041\uffc1\051\uffc1\053" +
    "\uffc1\001\002\000\004\051\135\001\002\000\020\003\264" +
    "\013\057\020\050\025\051\041\052\051\021\053\053\001" +
    "\002\000\004\002\262\001\002\000\006\020\240\051\uffaa" +
    "\001\002\000\020\003\216\013\uffb8\020\uffb8\025\uffb8\041" +
    "\uffb8\051\uffb8\053\uffb8\001\002\000\040\002\ufff0\003\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0\040\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0" +
    "\001\002\000\110\002\uffcc\003\uffcc\004\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\014\164\015\uffcc\016\uffcc" +
    "\017\uffcc\020\213\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\040\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\001\002\000\030" +
    "\002\000\032\023\033\033\034\017\040\013\043\012\044" +
    "\035\046\016\047\014\050\027\051\021\001\002\000\026" +
    "\032\uffca\033\uffca\034\uffca\040\uffca\043\uffca\044\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\001\002\000\040\002\ufff3" +
    "\003\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\037\ufff3\040" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\001\002\000\040\002\uffef\003\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\037\uffef\040\uffef\043\uffef\044\uffef" +
    "\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\001\002\000" +
    "\040\002\ufffc\003\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc" +
    "\037\ufffc\040\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\001\002\000\004\020\167\001\002" +
    "\000\040\002\ufff7\003\ufff7\032\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\037\ufff7\040\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\050\ufff7\051\ufff7\001\002\000\040\002\ufff8\003" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\037\ufff8\040\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051" +
    "\ufff8\001\002\000\040\002\ufffb\003\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\037\ufffb\040\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\001\002\000\006" +
    "\003\136\051\135\001\002\000\006\016\122\031\uffce\001" +
    "\002\000\026\032\uffbc\033\uffbc\034\uffbc\040\uffbc\043\uffbc" +
    "\044\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\001\002\000" +
    "\040\002\ufffd\003\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\037\ufffd\040\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\001\002\000\040\002\ufff9\003\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\037\ufff9\040\ufff9\043" +
    "\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\001\002\000\040\002\ufff5\003\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\035\ufff5\037\ufff5\040\ufff5\043\ufff5\044\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\050\ufff5\051\ufff5\001\002\000\040\002" +
    "\ufff1\003\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\037\ufff1" +
    "\040\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\001\002\000\026\032\023\033\033\034\017" +
    "\040\013\043\012\044\035\046\016\047\014\050\027\051" +
    "\021\001\002\000\030\032\023\033\033\034\017\040\013" +
    "\043\012\044\035\045\uffbb\046\016\047\014\050\027\051" +
    "\021\001\002\000\004\045\046\001\002\000\040\002\ufffa" +
    "\003\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\037\ufffa\040" +
    "\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\001\002\000\016\013\uffba\020\uffba\025\uffba\041" +
    "\uffba\051\uffba\053\uffba\001\002\000\016\013\057\020\050" +
    "\025\051\041\052\051\021\053\053\001\002\000\020\003" +
    "\117\013\057\020\050\025\051\041\052\051\021\053\053" +
    "\001\002\000\004\053\115\001\002\000\104\002\uffea\003" +
    "\uffea\004\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\015\uffea\016\uffea\017\uffea\021\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\001\002" +
    "\000\104\002\uffed\003\uffed\004\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\015\uffed\016\uffed\017\uffed\021\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050" +
    "\uffed\051\uffed\001\002\000\076\002\uffc8\003\uffc8\004\075" +
    "\006\074\007\064\010\073\011\063\012\076\016\071\017" +
    "\065\024\070\025\062\026\067\027\072\030\066\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\001\002\000\040\002\uffb9\003\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\037\uffb9\040\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\001\002\000" +
    "\104\002\uffe9\003\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\001\002\000\016\013\057\020\050\025\051\041" +
    "\052\051\021\053\053\001\002\000\104\002\uffeb\003\uffeb" +
    "\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\021\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\043\uffeb\044\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\001\002\000" +
    "\104\002\uffe1\003\uffe1\004\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\066\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\001\002\000\016\013\057\020\050\025\051\041" +
    "\052\051\021\053\053\001\002\000\016\013\057\020\050" +
    "\025\051\041\052\051\021\053\053\001\002\000\016\013" +
    "\057\020\050\025\051\041\052\051\021\053\053\001\002" +
    "\000\016\013\057\020\050\025\051\041\052\051\021\053" +
    "\053\001\002\000\016\013\057\020\050\025\051\041\052" +
    "\051\021\053\053\001\002\000\016\013\057\020\050\025" +
    "\051\041\052\051\021\053\053\001\002\000\016\013\057" +
    "\020\050\025\051\041\052\051\021\053\053\001\002\000" +
    "\004\016\104\001\002\000\016\013\057\020\050\025\051" +
    "\041\052\051\021\053\053\001\002\000\016\013\057\020" +
    "\050\025\051\041\052\051\021\053\053\001\002\000\016" +
    "\013\057\020\050\025\051\041\052\051\021\053\053\001" +
    "\002\000\016\013\057\020\050\025\051\041\052\051\021" +
    "\053\053\001\002\000\016\013\057\020\050\025\051\041" +
    "\052\051\021\053\053\001\002\000\104\002\uffe2\003\uffe2" +
    "\004\075\006\074\007\064\010\073\011\063\012\uffe2\015" +
    "\uffe2\016\071\017\065\021\uffe2\023\uffe2\024\070\025\062" +
    "\026\067\027\072\030\066\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\043\uffe2\044\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\001\002\000" +
    "\104\002\uffde\003\uffde\004\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\015\uffde\016\uffde\017\uffde\021\uffde\023" +
    "\uffde\024\070\025\062\026\067\027\072\030\066\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\001\002\000\104\002\uffdd\003\uffdd\004\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\021\uffdd\023\uffdd\024\070\025\062\026\067\027" +
    "\072\030\066\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\001\002\000\104\002\uffdb" +
    "\003\uffdb\004\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb\023\uffdb\024\070" +
    "\025\062\026\067\027\072\030\066\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\001" +
    "\002\000\104\002\uffe5\003\uffe5\004\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\015\uffe5\016\uffe5\017\uffe5\021" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\066" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\001\002\000\016\013\057\020\050\025" +
    "\051\041\052\051\021\053\053\001\002\000\104\002\uffe0" +
    "\003\uffe0\004\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0\023\uffe0\024\070" +
    "\025\062\026\067\027\072\030\066\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\001" +
    "\002\000\104\002\uffe8\003\uffe8\004\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\015\uffe8\016\uffe8\017\uffe8\021" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\067\027\072\030\066" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\001\002\000\104\002\uffe6\003\uffe6\004" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\066\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\001\002\000\104" +
    "\002\uffe4\003\uffe4\004\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\066\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051" +
    "\uffe4\001\002\000\104\002\uffdf\003\uffdf\004\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\021\uffdf\023\uffdf\024\070\025\062\026\067\027\072" +
    "\030\066\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\001\002\000\104\002\uffdc\003" +
    "\uffdc\004\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\021\uffdc\023\uffdc\024\070\025" +
    "\062\026\067\027\072\030\066\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\001\002" +
    "\000\104\002\uffe3\003\uffe3\004\075\006\074\007\064\010" +
    "\073\011\uffe3\012\uffe3\015\uffe3\016\071\017\065\021\uffe3" +
    "\023\uffe3\024\070\025\062\026\067\027\072\030\066\031" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\001\002\000\104\002\uffe7\003\uffe7\004\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7\026\067" +
    "\027\072\030\066\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\051\uffe7\001\002\000\104\002" +
    "\uffec\003\uffec\004\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\015\uffec\016\uffec\017\uffec\021\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\043" +
    "\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec" +
    "\001\002\000\036\004\075\006\074\007\064\010\073\011" +
    "\063\012\076\016\071\017\065\021\121\024\070\025\062" +
    "\026\067\027\072\030\066\001\002\000\004\021\120\001" +
    "\002\000\104\002\uffda\003\uffda\004\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\015\uffda\016\uffda\017\uffda\021" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\050\uffda\051\uffda\001\002\000\104\002\uffee\003\uffee\004" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\015\uffee" +
    "\016\uffee\017\uffee\021\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\043\uffee\044\uffee\045" +
    "\uffee\046\uffee\047\uffee\050\uffee\051\uffee\001\002\000\022" +
    "\003\126\013\057\020\050\022\125\025\051\041\052\051" +
    "\021\053\053\001\002\000\076\002\uffd7\003\uffd7\004\075" +
    "\006\074\007\064\010\073\011\063\012\076\016\071\017" +
    "\065\023\uffd7\024\070\025\062\026\067\027\072\030\066" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7\040" +
    "\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7" +
    "\051\uffd7\001\002\000\042\002\uffd1\003\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\037\uffd1\040\uffd1\043\uffd1" +
    "\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\001" +
    "\002\000\016\013\057\020\050\025\051\041\052\051\021" +
    "\053\053\001\002\000\042\002\uffd0\003\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0\043\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\001" +
    "\002\000\044\002\uffd8\003\uffd8\023\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\001\002" +
    "\000\010\003\132\023\133\031\131\001\002\000\016\013" +
    "\057\020\050\025\051\041\052\051\021\053\053\001\002" +
    "\000\040\002\uffd2\003\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\037\uffd2\040\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\001\002\000\040\002\uffd3\003" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\037\uffd3\040\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\001\002\000\044\002\uffd9\003\uffd9\023\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037\uffd9\040\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\001\002\000\050\002\uffcc\003\uffcc\014\164\016\uffcc\021" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\037\uffcc" +
    "\040\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\001\002\000\004\031\155\001\002\000\004" +
    "\016\154\001\002\000\004\031\uffc7\001\002\000\004\031" +
    "\142\001\002\000\016\013\057\020\050\025\051\041\052" +
    "\051\021\053\053\001\002\000\004\031\uffc6\001\002\000" +
    "\004\031\145\001\002\000\016\013\uffc5\020\uffc5\025\uffc5" +
    "\041\uffc5\051\uffc5\053\uffc5\001\002\000\016\013\057\020" +
    "\050\025\051\041\052\051\021\053\053\001\002\000\036" +
    "\004\075\006\074\007\064\010\073\011\063\012\076\016" +
    "\071\017\065\024\070\025\062\026\067\027\072\030\066" +
    "\032\uffc4\001\002\000\004\032\151\001\002\000\026\032" +
    "\023\033\033\034\017\040\013\043\012\044\035\046\016" +
    "\047\014\050\027\051\021\001\002\000\030\032\023\033" +
    "\033\034\017\037\153\040\013\043\012\044\035\046\016" +
    "\047\014\050\027\051\021\001\002\000\040\002\uffc3\003" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\037\uffc3\040\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\001\002\000\020\003\126\013\057\020\050\025\051" +
    "\041\052\051\021\053\053\001\002\000\016\013\057\020" +
    "\050\025\051\041\052\051\021\053\053\001\002\000\004" +
    "\031\157\001\002\000\016\013\057\020\050\025\051\041" +
    "\052\051\021\053\053\001\002\000\036\004\075\006\074" +
    "\007\064\010\073\011\063\012\076\016\071\017\065\024" +
    "\070\025\062\026\067\027\072\030\066\032\161\001\002" +
    "\000\026\032\023\033\033\034\017\040\013\043\012\044" +
    "\035\046\016\047\014\050\027\051\021\001\002\000\030" +
    "\032\023\033\033\034\017\037\163\040\013\043\012\044" +
    "\035\046\016\047\014\050\027\051\021\001\002\000\040" +
    "\002\uffc2\003\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\037" +
    "\uffc2\040\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\001\002\000\016\013\057\020\050\025" +
    "\051\041\052\051\021\053\053\001\002\000\036\004\075" +
    "\006\074\007\064\010\073\011\063\012\076\015\166\016" +
    "\071\017\065\024\070\025\062\026\067\027\072\030\066" +
    "\001\002\000\104\002\uffcb\003\uffcb\004\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\021\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\001\002\000\026\013\uffa1\020\uffa1" +
    "\021\uffa1\025\uffa1\031\uffa1\041\uffa1\042\172\051\uffa1\052" +
    "\170\053\uffa1\001\002\000\004\021\207\001\002\000\022" +
    "\013\057\020\050\021\uff9d\025\051\031\uff9d\041\052\051" +
    "\021\053\053\001\002\000\004\020\173\001\002\000\004" +
    "\052\174\001\002\000\004\031\175\001\002\000\022\013" +
    "\uffa3\020\uffa3\021\uffa3\025\uffa3\031\uffa3\041\uffa3\051\uffa3" +
    "\053\uffa3\001\002\000\022\013\057\020\050\021\uff9d\025" +
    "\051\031\uff9d\041\052\051\021\053\053\001\002\000\006" +
    "\021\202\031\201\001\002\000\040\004\075\006\074\007" +
    "\064\010\073\011\063\012\076\016\071\017\065\021\uff9e" +
    "\024\070\025\062\026\067\027\072\030\066\031\uff9e\001" +
    "\002\000\016\013\057\020\050\025\051\041\052\051\021" +
    "\053\053\001\002\000\004\021\203\001\002\000\040\002" +
    "\uffa2\003\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\037\uffa2" +
    "\040\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\001\002\000\040\004\075\006\074\007\064" +
    "\010\073\011\063\012\076\016\071\017\065\021\uff9f\024" +
    "\070\025\062\026\067\027\072\030\066\031\uff9f\001\002" +
    "\000\006\021\206\031\201\001\002\000\040\002\uffa0\003" +
    "\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\037\uffa0\040\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051" +
    "\uffa0\001\002\000\040\002\uffa4\003\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\037\uffa4\040\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\001\002\000\026" +
    "\032\023\033\033\034\017\040\013\043\012\044\035\046" +
    "\016\047\014\050\027\051\021\001\002\000\030\032\023" +
    "\033\033\034\017\037\212\040\013\043\012\044\035\046" +
    "\016\047\014\050\027\051\021\001\002\000\040\002\uffc9" +
    "\003\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\037\uffc9\040" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\001\002\000\022\013\057\020\050\021\uff9d\025" +
    "\051\031\uff9d\041\052\051\021\053\053\001\002\000\006" +
    "\021\215\031\201\001\002\000\104\002\uff9c\003\uff9c\004" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\015\uff9c" +
    "\016\uff9c\017\uff9c\021\uff9c\023\uff9c\024\uff9c\025\uff9c\026" +
    "\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c" +
    "\035\uff9c\036\uff9c\037\uff9c\040\uff9c\043\uff9c\044\uff9c\045" +
    "\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\001\002\000\026" +
    "\032\023\033\033\034\017\040\013\043\012\044\035\046" +
    "\016\047\014\050\027\051\021\001\002\000\016\013\057" +
    "\020\050\025\051\041\052\051\021\053\053\001\002\000" +
    "\004\036\uffb7\001\002\000\004\036\222\001\002\000\026" +
    "\032\uffb6\033\uffb6\034\uffb6\040\uffb6\043\uffb6\044\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\001\002\000\026\032\023" +
    "\033\033\034\017\040\013\043\012\044\035\046\016\047" +
    "\014\050\027\051\021\001\002\000\032\032\023\033\033" +
    "\034\017\035\uffb5\037\uffb5\040\013\043\012\044\035\046" +
    "\016\047\014\050\027\051\021\001\002\000\006\035\uffb2" +
    "\037\uffaf\001\002\000\004\037\233\001\002\000\004\035" +
    "\230\001\002\000\026\032\uffb1\033\uffb1\034\uffb1\040\uffb1" +
    "\043\uffb1\044\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\001" +
    "\002\000\026\032\023\033\033\034\017\040\013\043\012" +
    "\044\035\046\016\047\014\050\027\051\021\001\002\000" +
    "\030\032\023\033\033\034\017\037\uffb0\040\013\043\012" +
    "\044\035\046\016\047\014\050\027\051\021\001\002\000" +
    "\040\002\uffb4\003\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\037\uffb4\040\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\051\uffb4\001\002\000\032\032\023\033\033" +
    "\034\017\035\uffb2\037\uffaf\040\013\043\012\044\035\046" +
    "\016\047\014\050\027\051\021\001\002\000\004\037\236" +
    "\001\002\000\040\002\uffb3\003\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\037\uffb3\040\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\001\002\000\004\051" +
    "\252\001\002\000\006\021\uffad\051\135\001\002\000\006" +
    "\021\uffae\031\247\001\002\000\046\002\uffce\003\uffce\016" +
    "\uffce\021\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\037\uffce\040\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047" +
    "\uffce\050\uffce\051\uffce\001\002\000\004\021\244\001\002" +
    "\000\026\032\023\033\033\034\017\040\013\043\012\044" +
    "\035\046\016\047\014\050\027\051\021\001\002\000\030" +
    "\003\246\032\023\033\033\034\017\040\013\043\012\044" +
    "\035\046\016\047\014\050\027\051\021\001\002\000\040" +
    "\002\uffa7\003\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\037" +
    "\uffa7\040\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\050\uffa7\051\uffa7\001\002\000\006\003\250\051\135\001" +
    "\002\000\046\002\uffcd\003\uffcd\016\uffcd\021\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd\040\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\001\002\000\046\002\uffcf\003\uffcf\016\uffcf\021\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\037\uffcf\040\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\001\002\000\004\020\253\001\002\000\006\021\uffad" +
    "\051\135\001\002\000\004\021\255\001\002\000\026\032" +
    "\uffa9\033\uffa9\034\uffa9\040\uffa9\043\uffa9\044\uffa9\046\uffa9" +
    "\047\uffa9\050\uffa9\051\uffa9\001\002\000\026\032\023\033" +
    "\033\034\017\040\013\043\012\044\035\046\016\047\014" +
    "\050\027\051\021\001\002\000\026\032\023\033\033\034" +
    "\017\040\013\043\012\044\035\046\016\047\014\050\027" +
    "\051\021\001\002\000\030\032\ufff5\033\ufff5\034\ufff5\037" +
    "\261\040\ufff5\043\ufff5\044\ufff5\046\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\001\002\000\040\002\uffa8\003\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\037\uffa8\040\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\001\002\000" +
    "\004\002\001\001\002\000\072\002\uffa6\003\uffa6\004\075" +
    "\006\074\007\064\010\073\011\063\012\076\016\071\017" +
    "\065\024\070\025\062\026\067\027\072\030\066\032\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\037\uffa6\040\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\001\002" +
    "\000\040\002\uffa5\003\uffa5\032\uffa5\033\uffa5\034\uffa5\035" +
    "\uffa5\037\uffa5\040\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\050\uffa5\051\uffa5\001\002\000\044\002\uffd6\003" +
    "\uffd6\016\uffd6\031\247\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\037\uffd6\040\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\001\002\000\026\032\023\033\033" +
    "\034\017\040\013\043\012\044\035\046\016\047\014\050" +
    "\027\051\021\001\002\000\016\013\057\020\050\025\051" +
    "\041\052\051\021\053\053\001\002\000\004\032\uffc0\001" +
    "\002\000\004\032\272\001\002\000\026\032\uffbf\033\uffbf" +
    "\034\uffbf\040\uffbf\043\uffbf\044\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\001\002\000\026\032\023\033\033\034\017" +
    "\040\013\043\012\044\035\046\016\047\014\050\027\051" +
    "\021\001\002\000\030\032\023\033\033\034\017\037\275" +
    "\040\013\043\012\044\035\046\016\047\014\050\027\051" +
    "\021\001\002\000\040\002\uffbe\003\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\037\uffbe\040\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\001\002\000\030" +
    "\032\023\033\033\034\017\037\277\040\013\043\012\044" +
    "\035\046\016\047\014\050\027\051\021\001\002\000\040" +
    "\002\uffbd\003\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\037" +
    "\uffbd\040\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\001\002\000\016\013\057\020\050\025" +
    "\051\041\052\051\021\053\053\001\002\000\042\002\uffd5" +
    "\003\uffd5\031\131\032\uffd5\033\uffd5\034\uffd5\035\uffd5\037" +
    "\uffd5\040\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\001\002\000\016\013\057\020\050\025" +
    "\051\041\052\051\021\053\053\001\002\000\042\002\uffd4" +
    "\003\uffd4\031\131\032\uffd4\033\uffd4\034\uffd4\035\uffd4\037" +
    "\uffd4\040\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\052\002\035\004\017\005\031\006\006\007" +
    "\010\010\007\012\027\013\021\014\036\015\004\016\040" +
    "\017\030\021\037\026\014\030\024\031\005\032\003\033" +
    "\033\037\025\041\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\266\001\001\000\006" +
    "\010\264\033\241\001\001\000\010\033\057\036\262\041" +
    "\055\001\001\000\002\001\001\000\004\063\236\001\001" +
    "\000\004\055\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\002\035\004\017\005\031\006\006\007\010" +
    "\010\007\012\027\014\044\015\004\016\040\017\030\021" +
    "\037\030\024\031\005\032\003\033\033\037\025\041\023" +
    "\001\001\000\004\042\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\136\037\137\001\001\000\002\001\001\000\004\052\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\002\035\004\017\005\031" +
    "\006\006\007\010\010\007\012\027\013\042\014\036\015" +
    "\004\016\040\017\030\021\037\030\024\031\005\032\003" +
    "\033\033\037\025\041\023\001\001\000\050\002\035\004" +
    "\017\005\031\006\006\007\010\010\007\012\027\014\044" +
    "\015\004\016\040\017\030\021\037\030\024\031\005\032" +
    "\003\033\033\037\025\041\023\053\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\046\001\001\000" +
    "\012\033\057\035\054\036\053\041\055\001\001\000\010" +
    "\033\057\036\115\041\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\033\057\036\060\041" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\057\036\113\041\055\001\001\000\010\033\057\036" +
    "\112\041\055\001\001\000\010\033\057\036\111\041\055" +
    "\001\001\000\010\033\057\036\110\041\055\001\001\000" +
    "\010\033\057\036\107\041\055\001\001\000\010\033\057" +
    "\036\106\041\055\001\001\000\010\033\057\036\105\041" +
    "\055\001\001\000\002\001\001\000\010\033\057\036\102" +
    "\041\055\001\001\000\010\033\057\036\101\041\055\001" +
    "\001\000\010\033\057\036\100\041\055\001\001\000\010" +
    "\033\057\036\077\041\055\001\001\000\010\033\057\036" +
    "\076\041\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\033\057\036\104\041\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\033\057" +
    "\034\123\036\122\041\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\127\033\057\034\126\036\122" +
    "\041\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\033\057\034\133\036\122\041\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\140\001\001\000\002\001\001\000\012\033" +
    "\057\035\142\036\053\041\055\001\001\000\004\044\143" +
    "\001\001\000\002\001\001\000\004\045\145\001\001\000" +
    "\010\033\057\036\146\041\055\001\001\000\004\046\147" +
    "\001\001\000\002\001\001\000\050\002\035\004\017\005" +
    "\031\006\006\007\010\010\007\012\027\013\151\014\036" +
    "\015\004\016\040\017\030\021\037\030\024\031\005\032" +
    "\003\033\033\037\025\041\023\001\001\000\046\002\035" +
    "\004\017\005\031\006\006\007\010\010\007\012\027\014" +
    "\044\015\004\016\040\017\030\021\037\030\024\031\005" +
    "\032\003\033\033\037\025\041\023\001\001\000\002\001" +
    "\001\000\012\033\057\034\123\036\122\041\055\001\001" +
    "\000\012\033\057\035\155\036\053\041\055\001\001\000" +
    "\002\001\001\000\010\033\057\036\157\041\055\001\001" +
    "\000\002\001\001\000\050\002\035\004\017\005\031\006" +
    "\006\007\010\010\007\012\027\013\161\014\036\015\004" +
    "\016\040\017\030\021\037\030\024\031\005\032\003\033" +
    "\033\037\025\041\023\001\001\000\046\002\035\004\017" +
    "\005\031\006\006\007\010\010\007\012\027\014\044\015" +
    "\004\016\040\017\030\021\037\030\024\031\005\032\003" +
    "\033\033\037\025\041\023\001\001\000\002\001\001\000" +
    "\010\033\057\036\164\041\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\170\001\001\000\002\001" +
    "\001\000\012\033\057\036\177\040\204\041\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\175\001\001\000\012\033\057\036\177\040\176" +
    "\041\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\033\057\036\203\041\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\002\035\004\017" +
    "\005\031\006\006\007\010\010\007\012\027\013\210\014" +
    "\036\015\004\016\040\017\030\021\037\030\024\031\005" +
    "\032\003\033\033\037\025\041\023\001\001\000\046\002" +
    "\035\004\017\005\031\006\006\007\010\010\007\012\027" +
    "\014\044\015\004\016\040\017\030\021\037\030\024\031" +
    "\005\032\003\033\033\037\025\041\023\001\001\000\002" +
    "\001\001\000\012\033\057\036\177\040\213\041\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\002\035" +
    "\004\017\005\031\006\006\007\010\010\007\012\027\013" +
    "\233\014\036\015\004\016\040\017\030\021\037\030\024" +
    "\031\005\032\003\033\033\037\025\041\023\001\001\000" +
    "\012\033\057\035\217\036\053\041\055\001\001\000\004" +
    "\056\220\001\001\000\002\001\001\000\004\057\222\001" +
    "\001\000\050\002\035\004\017\005\031\006\006\007\010" +
    "\010\007\012\027\013\223\014\036\015\004\016\040\017" +
    "\030\021\037\030\024\031\005\032\003\033\033\037\025" +
    "\041\023\001\001\000\050\002\035\004\017\005\031\006" +
    "\006\007\010\010\007\012\027\014\044\015\004\016\040" +
    "\017\030\021\037\030\024\031\005\032\003\033\033\037" +
    "\025\041\023\060\224\001\001\000\006\020\225\061\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\230\001\001\000\050\002\035\004\017\005\031\006\006" +
    "\007\010\010\007\012\027\013\231\014\036\015\004\016" +
    "\040\017\030\021\037\030\024\031\005\032\003\033\033" +
    "\037\025\041\023\001\001\000\046\002\035\004\017\005" +
    "\031\006\006\007\010\010\007\012\027\014\044\015\004" +
    "\016\040\017\030\021\037\030\024\031\005\032\003\033" +
    "\033\037\025\041\023\001\001\000\002\001\001\000\052" +
    "\002\035\004\017\005\031\006\006\007\010\010\007\012" +
    "\027\014\044\015\004\016\040\017\030\020\234\021\037" +
    "\030\024\031\005\032\003\033\033\037\025\041\023\061" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\240\022\242\033\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\002\035\004\017\005\031\006\006\007\010\010\007\012" +
    "\027\013\244\014\036\015\004\016\040\017\030\021\037" +
    "\030\024\031\005\032\003\033\033\037\025\041\023\001" +
    "\001\000\046\002\035\004\017\005\031\006\006\007\010" +
    "\010\007\012\027\014\044\015\004\016\040\017\030\021" +
    "\037\030\024\031\005\032\003\033\033\037\025\041\023" +
    "\001\001\000\002\001\001\000\004\033\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\240\022\253\033\241\001\001\000\002\001\001\000" +
    "\004\064\255\001\001\000\050\002\035\004\017\005\031" +
    "\006\006\007\010\010\007\012\027\013\256\014\036\015" +
    "\004\016\040\017\030\021\037\030\024\031\005\032\003" +
    "\033\033\037\025\041\023\001\001\000\046\002\035\004" +
    "\017\005\031\006\006\007\010\010\007\012\027\014\044" +
    "\015\004\016\040\017\030\021\257\030\024\031\005\032" +
    "\003\033\033\037\025\041\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\002\035\004\017" +
    "\005\031\006\006\007\010\010\007\012\027\013\275\014" +
    "\036\015\004\016\040\017\030\021\037\030\024\031\005" +
    "\032\003\033\033\037\025\041\023\001\001\000\012\033" +
    "\057\035\267\036\053\041\055\001\001\000\004\050\270" +
    "\001\001\000\002\001\001\000\004\051\272\001\001\000" +
    "\050\002\035\004\017\005\031\006\006\007\010\010\007" +
    "\012\027\013\273\014\036\015\004\016\040\017\030\021" +
    "\037\030\024\031\005\032\003\033\033\037\025\041\023" +
    "\001\001\000\046\002\035\004\017\005\031\006\006\007" +
    "\010\010\007\012\027\014\044\015\004\016\040\017\030" +
    "\021\037\030\024\031\005\032\003\033\033\037\025\041" +
    "\023\001\001\000\002\001\001\000\046\002\035\004\017" +
    "\005\031\006\006\007\010\010\007\012\027\014\044\015" +
    "\004\016\040\017\030\021\037\030\024\031\005\032\003" +
    "\033\033\037\025\041\023\001\001\000\002\001\001\000" +
    "\014\011\300\033\057\034\126\036\122\041\055\001\001" +
    "\000\002\001\001\000\014\011\302\033\057\034\126\036" +
    "\122\041\055\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

   currentSymTable = globalSymbolTable = new parser.SymbolTable(null, false); //Main symbol table for global variables included in all scopes
   funcBuffer = new StringBuffer(); //buffer for function declaration
   globalDecBuffer = new StringBuffer(); //buffer for global var declaration
   mainBuffer = new StringBuffer(); //buffer used for main function
   currentSymTable.currentBuffer=mainBuffer;
   bwr = new BufferedWriter(new FileWriter(new File("output.ll"))); //output file
   loopCount = 0;
   totLoopCount = 0;
   loopList=new LinkedList<Integer>();
   indexString = 0;
   stringList = new ArrayList<String>();
   stringDecl = new StringBuffer();
   funcTable = new HashMap<String, FuncObj>();
   /*Structure:
   Global buffer
   Function buffer
   main buffer


   */

    }


  public SymbolTable globalSymbolTable;
  public SymbolTable currentSymTable;
  public StringBuffer funcBuffer;
  public StringBuffer globalDecBuffer;
  public StringBuffer mainBuffer;
  public BufferedWriter bwr;
  public int loopCount;
  public int totLoopCount;
  public LinkedList<Integer> loopList;
  public int indexString;
  public ArrayList<String> stringList;
  public StringBuffer stringDecl;
  public HashMap<String, FuncObj> funcTable;

  public enum Type {
    NUMBER, TABLE, IMMEDIATE, RNUM, BOOL
  }; // different types of values NUMBER means that the value is assigned to a var
     // and is of type NUMBER, IMMEDIATE means it is a immediate read from file

  public class SymbolTable {
    public ArrayList<ValueObj> varList;
    public ArrayList<ValueObj> expList;
    public HashMap<String, ValueObj> varTable;
    public int nargs;
    public Integer registerCount; // used as counter for SSA registers
    SymbolTable prev;
    StringBuffer currentBuffer;
    boolean isFunc;

    public SymbolTable getPrev(boolean insideSameFunction) {
      if (insideSameFunction) {
        prev.registerCount = registerCount;
        return prev;
      } else {
        return prev;
      }
    }

    public SymbolTable(SymbolTable p, boolean isFunction) { // isFunction is needed to distinguish closure from
                                                            // functions
      this.varTable = new HashMap<String, ValueObj>();
      this.varList = new ArrayList<ValueObj>();
      this.expList = new ArrayList<ValueObj>();
      this.nargs = 0;
      this.prev = p;
      this.registerCount = p == null ? 1 : p.registerCount; // if it the main table, start reg from 1
      currentBuffer = p == null ? currentBuffer : p.currentBuffer; // set buffer main buffer
      isFunc=false;
      if (isFunction) {
        registerCount = 1; // if it is a funct, restart from 1
        currentBuffer = funcBuffer; // as it is a func, use func buffer
        isFunc=true;
      }
    }

    public ValueObj get(String s) {
      for (SymbolTable sym = this; sym != null; sym = sym.prev) {
        ValueObj found = sym.varTable.get(s);
        if (found != null)
          return found;
      }
      return null;
    }
  }

  public class ValueObj {

    Double value;
    public String name;
    public Type type;
    public String scope;
    Integer nElement; // for arrrays

    public ValueObj(String name) {
      super();
      this.name = name;
      type = null;
    }

    public ValueObj(Double value) {
      this.value = value;
      type = Type.IMMEDIATE;
    }

    public void setDouble() {
      this.type = Type.NUMBER;
    }

    public void setGlobal() {
      scope = "@";
    }

    public void setLocal() {
      scope = "%";
    }

    public void setRNUM() {
      this.type = Type.RNUM;
    }

    public void setBool() {
      this.type = Type.BOOL;
    }

    public boolean isLocal() {
      return scope.compareTo("%") == 0;
    }

  }

  public class FuncObj {

    public String name;
    public int nargsTot;
    public ArrayList<ValueObj> paramsList;
    public int varCount;
    public boolean ret;

    public FuncObj(String name) {
      this.name = name;
      this.paramsList = new ArrayList<>();
      this.varCount = 1;
      this.nargsTot = 0;
      this.ret = false;

    }
  }

      // It can be "stdout" to write output program to standard
    // output or "file" to dump program in a file.
    public static String dumpOutput;

    // It's true if the semantic check is enabled
    public boolean enableSem = true;

      // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // Return actual symbol
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



      // Disable semantic check
    private void disableSem(){
        parser.enableSem = false;
    }
    // Return true if semantic is enabled, false otherwise
    private boolean sem(){
        return parser.enableSem;
    }

    // Error management
    private void pSemError(String message){
        System.err.println("SEM ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);

        parser.done_parsing();
    }
    private void pSemWarning(String message){
        System.err.println("SEM WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
    }
    private void pSynError(String message){
        System.err.println("SYN ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.done_parsing();
    }
    private void pSynWarning(String message){
        System.err.println("SYN WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        /* Quando c'è un errore sintattico continuo il parsing ma disabilito la semantiva */
        disableSem();
    }


    public void appendFuncBuffer(String s, boolean newLine) {
      funcBuffer.append(s);
      if (newLine)
        funcBuffer.append("\n");
    }

    public void appendGlobalDecBuffer(String s, boolean newLine) {
      globalDecBuffer.append(s);
      if (newLine)
        globalDecBuffer.append("\n");
    }

    public void appendMainBuffer(String s, boolean newLine) {
      currentSymTable.currentBuffer.append(s);
      if (newLine)
        currentSymTable.currentBuffer.append("\n");
    }

    public String getRegister() {
      return String.valueOf(currentSymTable.registerCount++);
    }

    public String createGlovalVarLLVM(String name, String type, String value) {

      return "@" + name + " = " + "global " + type + " " + value + ", align 8";

    }

    public String storeLLVM(String source, String sourceType, String dest, String destType, String align) {
      // store i32 %4, i32* %3, align 4
      return "store " + sourceType + " " + source + ", " + destType + "* " + dest + ", align " + align;

    }

    public String loadLLVM(String outName, String outType, String inputType, String inputName, String align) {
      // %2 = load double, double* @b, align 8

      return outName + " = " + "load " + outType + ", " + inputType + "* " + inputName + ", " + "align " + align;

    }

    public ValueObj initLocalVar(ValueObj n, ValueObj x) {

      String op1, op2;
      // %1 = alloca i32, align 4
      if (x.type == Type.IMMEDIATE) {
        op2 = "" + x.value;
        if (n.type == null) {
          n.setDouble(); // set type number in the variable
          n.setLocal();
          n.name = getRegister(); // assign to local var a new register
          appendMainBuffer("%" + n.name + " = alloca double, align 8", true); // append to the main declaration buffer
          appendMainBuffer(storeLLVM("" + op2, "double", n.scope + n.name, "double", "8"), true); // load with a new
                                                                                                  // value

        } else if (n.type == Type.NUMBER) {
          appendMainBuffer(storeLLVM("" + op2, "double", n.scope + n.name, "double", "8"), true); // load with a new
                                                                                                  // value
        }
      } else if (x.type == Type.NUMBER) {
        op2 = x.scope + x.name;
        if (n.type == null) {
          n.setDouble(); // set type number in the variable
          n.setLocal();
          n.name = getRegister(); // assign to local var a new register
          appendMainBuffer("%" + n.name + " = alloca double, align 8", true); // allocate new varappend to the main
                                                                              // declaration buffer

          String reg = getRegister(); // get a new register
          appendMainBuffer(loadLLVM("%" + reg, "double", "double", op2, "8"), true); // save the value of the var into
                                                                                     // the register
          appendMainBuffer(storeLLVM("%" + reg, "double", n.scope + n.name, "double", "8"), true); // store new var with
                                                                                                   // value pointed by
                                                                                                   // the variable
        } else if (n.type == Type.NUMBER) {
          String reg = getRegister();
          appendMainBuffer(loadLLVM("%" + reg, "double", "double", x.scope + x.name, "8"), true);
          appendMainBuffer(storeLLVM("%" + reg, "double", n.scope + n.name, "double", "8"), true);

        }
      } else if (x.type == Type.RNUM) {
        op2 = "%" + x.name;
        if (n.type == null) {
          n.setDouble(); // set type number in the variable
          n.setLocal();
          n.name = getRegister(); // assign to local var a new register
          appendMainBuffer("%" + n.name + " = alloca double, align 8", true); // allocate new varappend to the main
                                                                              // declaration buffer
          appendMainBuffer(storeLLVM(op2, "double", n.scope + n.name, "double", "8"), true);
        } else if (n.type == Type.NUMBER) {
          appendMainBuffer(storeLLVM(op2, "double", n.scope + n.name, "double", "8"), true);
        }
      }

      return n;

    }

    public ValueObj initVar(ValueObj n, ValueObj x) {

      String op1, op2;

      if (n.scope != null && n.isLocal()) {
        return initLocalVar(n, x);
      }

      if (x.type == Type.IMMEDIATE) {
        op2 = "" + x.value;
        if (n.type == null) {
          n.setDouble(); // set type number in the variable
          n.setGlobal();
          appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", "" + op2), true); // append to the Global
                                                                                        // declaration buffer
          appendMainBuffer(storeLLVM("" + op2, "double", n.scope + n.name, "double", "8"), true); // load with a new
                                                                                                  // value

        } else if (n.type == Type.NUMBER) {
          appendMainBuffer(storeLLVM("" + op2, "double", n.scope + n.name, "double", "8"), true); // load with a new
                                                                                                  // value
        }
      } else if (x.type == Type.NUMBER) {
        op2 = x.scope + x.name;
        if (n.type == null) {
          n.setDouble(); // set type number in the variable
          n.setGlobal();
          appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", "0.0"), true); // append to the Global declaration
                                                                                     // buffer
          String reg = getRegister(); // get a new register
          appendMainBuffer(loadLLVM("%" + reg, "double", "double", op2, "8"), true); // save the value of the var into
                                                                                     // the register
          appendMainBuffer(storeLLVM("%" + reg, "double", n.scope + n.name, "double", "8"), true); // store new var with
                                                                                                   // value pointed by
                                                                                                   // the variable
        } else if (n.type == Type.NUMBER) {
          String reg = getRegister();
          appendMainBuffer(loadLLVM("%" + reg, "double", "double", x.scope + x.name, "8"), true);
          appendMainBuffer(storeLLVM("%" + reg, "double", n.scope + n.name, "double", "8"), true);

        }
      } else if (x.type == Type.RNUM) {
        op2 = "%" + x.name;
        if (n.type == null) {
          n.setDouble(); // set type number in the variable
          n.setGlobal();
          appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", "0.0"), true); // append to the Global declaration
                                                                                     // buffer
          appendMainBuffer(storeLLVM(op2, "double", n.scope + n.name, "double", "8"), true);
        } else if (n.type == Type.NUMBER) {
          appendMainBuffer(storeLLVM(op2, "double", n.scope + n.name, "double", "8"), true);
        }
      }

      return n;
    }

    public ValueObj operation(String operation, ValueObj x, ValueObj y) { // type of operation, value of first operand,
                                                                          // value of second operand
      ValueObj RESULT = null; // final result to return
      String a = null; // variables for registers
      String b = null;
      String r = null;
      String op1 = null, op2 = null;

      if(x.type==Type.TABLE || y.type==Type.TABLE){
          pSemError("CANNOT PERFORM OPERATION ON ARRAYS");
      }

      if (x.type == Type.IMMEDIATE && y.type == Type.IMMEDIATE) { // if both are immediates, perform operation at
                                                                  // compile time
        /// create switch
        if (operation.compareTo("fadd") == 0)
          RESULT = new ValueObj(x.value + y.value);
        else if (operation.compareTo("fsub") == 0)
          RESULT = new ValueObj(x.value - y.value);
        else if (operation.compareTo("fmul") == 0)
          RESULT = new ValueObj(x.value * y.value);
        else if (operation.compareTo("fdiv") == 0)
          RESULT = new ValueObj(x.value / y.value);
        else if (operation.compareTo("pow") == 0)
          RESULT = new ValueObj(Math.pow(x.value, y.value));

        RESULT.type = Type.IMMEDIATE; // the returning value is itself a double
      } else {



        if (x.type == Type.NUMBER) {
          a = getRegister();
          appendMainBuffer(loadLLVM("%" + a, "double", "double", x.scope + x.name, "8"), true); // load value of first
          op1 = "%" + a;
        } else if (x.type == Type.IMMEDIATE) {
          op1 = "" + x.value;
        } else if (x.type == Type.RNUM) {
          op1 = "%" + x.name;
        }

        if (y.type == Type.NUMBER) {
          b = getRegister();
          appendMainBuffer(loadLLVM("%" + b, "double", "double", y.scope + y.name, "8"), true); // load value of second
          op2 = "%" + b;
        } else if (y.type == Type.IMMEDIATE) {
          op2 = "" + y.value;
        } else if (y.type == Type.RNUM) {
          op2 = "%" + y.name;
        }
        r = getRegister();
        appendMainBuffer("%" + r + " = " + operation + " double " + op1 + ", " + op2, true); // perform operation and
                                                                                             // save in register
        RESULT = new ValueObj(r);
        RESULT.setLocal();
        RESULT.setRNUM();
      }

      return RESULT;
    }

    public ValueObj logicExpEval(String operation, ValueObj x, ValueObj y) {

      String op1 = null;
      String op2 = null;
      if (x.type == Type.IMMEDIATE) { // if first operand is and immediate
        op1 = "" + x.value; // just store the value
      } else if (x.type == Type.NUMBER) { // if it is a var
        String reg = getRegister();
        // loadLLVM(String outName, String outType, String inputType, String inputName,
        // String align )
        appendMainBuffer(loadLLVM("%" + reg, "double", "double", x.scope + x.name, "8"), true); // load it
        op1 = "%" + reg; // save register where it is loaded
      } else if (x.type == Type.RNUM) {
        op1 = x.scope + x.name;

      }
      if (y.type == Type.IMMEDIATE) { // same as first operand
        op2 = "" + y.value;
      } else if (y.type == Type.NUMBER) {
        String reg = getRegister();
        appendMainBuffer(loadLLVM("%" + reg, "double", "double", y.scope + y.name, "8"), true);
        op2 = "%" + reg;
      } else if (y.type == Type.RNUM) {
        op2 = y.scope + y.name;
      }
      String result = getRegister(); // get register for output
      appendMainBuffer("%" + result + " = fcmp " + operation + " double " + op1 + ", " + op2, true); // calculate result
      ValueObj RESULT = new ValueObj(result); // return new value
      RESULT.setBool();
      RESULT.setLocal();

      return RESULT;

    }

    public int genLabelString() {
      return indexString++;
    }

    private void printStrings() {

      stringDecl.append("declare i32 @printf(i8*, ...)\n"); // declare printf instruction
      for (int i = 0; i < stringList.size(); i++) {

        String s = stringList.get(i);
        s = s.substring(1, s.length() - 1);
        int length = s.length();
        if (!s.contains("\\n"))
          length++;
        s = s.replace("\\n", "\\0A");
        s = s + "\\00";
        stringDecl.append("@.str." + i + " = private constant [" + length + " x i8] c\"" + s + "\", align 1\n");
      }

    }




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= stmt_list 
            {
              Object RESULT =null;
		
        printStrings();
        bwr.write(stringDecl.toString()+"\n");
		bwr.write(globalDecBuffer.toString()+"\n");
        bwr.write(funcBuffer.toString()+"\n");
	    bwr.write("define void @main(){\n");
        bwr.write(mainBuffer.toString());
	
	
		bwr.write("ret void\n}");
		bwr.flush();
 
		//close the stream
		bwr.close();
	
	
	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration ::= local_var_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration ::= local_var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= global_var_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= array_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= if_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= for_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= print_func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= ret 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= while_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= repeat_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= function_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= RO exp RC 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= NUMBER 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new ValueObj(x);

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= MINUS NUMBER 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=new ValueObj(-x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= var 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
             ValueObj tmp = currentSymTable.get(x.name);
             
            if(tmp == null && x.nElement == null){ //if it is not declared and it is not an array cell
                pSemError("VARIABLE " +"\""+x.name+"\"" +" NOT DECLARED");
            }
            if (x.nElement != null){
                RESULT=x;
            }else{
                RESULT=tmp;}  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= NIL 
            {
              ValueObj RESULT =null;
		                String reg=getRegister();
                        RESULT= new ValueObj(reg); 
                        RESULT.setBool();
                        RESULT.setLocal();
                      
                        appendMainBuffer("%"+reg + " = icmp "+ "eq" +" i32 0" +", " + "1", true); //calculate result

                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= func_call 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ValueObj retValue = new ValueObj(x);
                 retValue.setRNUM();
                 retValue.setLocal();
                 RESULT=retValue;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp PLUS exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=operation("fadd", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp MINUS exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=operation("fsub", x, y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp STAR exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=operation("fmul", x, y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp DIV exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=operation("fdiv", x, y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp HAT exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=operation("pow", x, y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp AND exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		     

                    String r = getRegister();
                    if(x.type == Type.BOOL && y.type == Type.BOOL){ //if both are bool, just compare them
                        appendMainBuffer("%"+r+ " = and" + " i1 " + x.scope+x.name+", "+ y.scope+y.name, true );
                    }else if(x.type != Type.BOOL && y.type != Type.BOOL){ //if both are not bool, the result is 1 (all values are true except false and nil)
                        appendMainBuffer("%"+r+ " = and" + " i1 " + "1"+", "+ "1", true );
                    }else if(x.type == Type.BOOL && y.type != Type.BOOL ){ //if 1 is bool and one not, the bool is the result
                        appendMainBuffer("%"+r+ " = and" + " i1 " + x.scope+x.name+", "+ x.scope+x.name, true );
                    }else{
                        appendMainBuffer("%"+r+ " = and" + " i1 " + y.scope+y.name+", "+ y.scope+y.name, true ); //same above
                    }
                   
                    ValueObj bool = new ValueObj(r);
                    bool.setBool();
                    bool.setLocal();
                    RESULT = bool;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp OR exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                         
                    String r = getRegister();
                     if(x.type == Type.BOOL && y.type == Type.BOOL){ //if both are bool, just compare them
                        appendMainBuffer("%"+r+ " = and" + " i1 " + x.scope+x.name+", "+ y.scope+y.name, true );
                    }else{
                        appendMainBuffer("%"+r+ " = and" + " i1 " + "1"+", "+ "1", true );
                    }
                    ValueObj bool = new ValueObj(r);
                    bool.setBool();
                    bool.setLocal();
                    RESULT = bool;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= NOT exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                         
                    pSemError("NOT LOGICAL OPERATION NOT SUPPORTED");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp EQ EQ exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=logicExpEval("oeq", x, y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp NOTEQ exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=logicExpEval("one", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp MIN exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=logicExpEval("olt", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp MAJ exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=logicExpEval("ogt", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp MIN_EQ exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=logicExpEval("ole", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp MAJ_EQ exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=logicExpEval("oge", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= RO error RC 
            {
              ValueObj RESULT =null;
		 pSynError("EXPRESSION NOT CORRECT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ass_list ::= ass_list CM ass_exp 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 currentSymTable.expList.add(x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ass_list ::= ass_exp 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 currentSymTable.expList.add(x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ass_exp ::= exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT=x;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_exp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // local_var_list ::= LOCAL var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // local_var_init ::= local_var_list EQ ass_list 
            {
              Object RESULT =null;
		//check is sizes match and generate error if not
                                            for(int i=0; i<currentSymTable.varList.size(); i++){ //var list stores the ValueObj of those var
                                                ValueObj ValueObjectOfVar = currentSymTable.varList.get(i); //get valueObj of that var
                                                ValueObj tmp = currentSymTable.get(ValueObjectOfVar.name); //try to get it from symbol table
                                                 if(tmp == null){				                     //if null, it has never been declared
		                                         currentSymTable.varTable.put(ValueObjectOfVar.name, ValueObjectOfVar); //put in simbol table
                                                 ValueObjectOfVar.setLocal(); //set local to distinguish in var init
                                                 initVar(ValueObjectOfVar, currentSymTable.expList.get(i)); //init var
                                                 }else{
                                                    initVar(tmp, currentSymTable.expList.get(i)); //if it has been already declared, pass the valueObj of the symbol table
                                                    }
                                               
                                            }
                                            currentSymTable.varList.clear();
                                            currentSymTable.expList.clear();
                                            
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var_init",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // global_var_init ::= var_list EQ ass_list 
            {
              Object RESULT =null;
		//check is sizes match and generate error if not
                                            
                                            for(int i=0; i<currentSymTable.varList.size(); i++){ //var list stores the ValueObj of those var
                                                ValueObj ValueObjectOfVar = currentSymTable.varList.get(i); //get valueObj of that var
                                                ValueObj tmp = currentSymTable.get(ValueObjectOfVar.name); //try to get it from symbol table
                                                 if(tmp == null){				                     //if null, it has never been declared
                                                    if(currentSymTable.isFunc){
                                                        pSemError("CANNOT DECLARE GLOBAL VARIABLES INSIDE FUNCTION");
                                                    }
		                                         globalSymbolTable.varTable.put(ValueObjectOfVar.name, ValueObjectOfVar); //put in simbol table
                                                 initVar(ValueObjectOfVar, currentSymTable.expList.get(i)); //init var
                                                 }else{
                                                    initVar(tmp, currentSymTable.expList.get(i)); //if it has been already declared, pass the valueObj of the symbol table
                                                    }
                                               
                                            }
                                            currentSymTable.varList.clear();
                                            currentSymTable.expList.clear();
                                            
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_var_init",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // array_declaration ::= var EQ BO ass_list BC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		

                    if(currentSymTable.get(n.name) != null){
                         pSemError("VARIABLE " +"\""+n.name+"\"" +" ALREADY DECLARED: CANNOT REDECLARE VARIABLE TO ARRAY");
                    }else{
                        Integer dim = currentSymTable.expList.size();
                    //    @a = common dso_local global [5 x double] zeroinitializer, align 16
                    //"@"+name+" = " +"global "+type+" "+value+ ", align 8";
                    String type="["+dim+"x double]";
                    appendGlobalDecBuffer("@"+n.name+ " = " + "global "+ type + " zeroinitializer, align 16", true);
                    n.type=Type.TABLE;
                    n.nElement=dim;
                    n.setGlobal();
                    globalSymbolTable.varTable.put(n.name, n);

                    for(int i = 0; i<dim; i++){
                        //<result> = getelementptr inbounds [<#elements> x <type>], [<#elements> x <type>]* <variable>, i32 0, i32 <index>
                        // %2 = getelementptr inbounds [9 x i32], [9 x i32]* %1, i32 0, i32 7
                        String reg = getRegister();
                        String arrayType=" [" + dim +"x double]";
                        appendMainBuffer("%"+reg+ " = " + "getelementptr inbounds" + arrayType+","+arrayType+"*"+ n.scope+n.name+", i32 0, i32 " + i, true);
                        ValueObj arrayCell = new ValueObj(reg);
                        arrayCell.setLocal();
                        arrayCell.type=Type.NUMBER;
                        initVar(arrayCell, currentSymTable.expList.get(i));

                    }
                    currentSymTable.expList.clear();
                    }



              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // array_declaration ::= var EQ BO ass_list error 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 pSynWarning("MISSING }");
                                                     if(currentSymTable.get(n.name) != null){
                         pSemError("VARIABLE " +"\""+n.name+"\"" +" ALREADY DECLARED: CANNOT REDECLARE VARIABLE TO ARRAY");
                    }else{
                        Integer dim = currentSymTable.expList.size();
                    //    @a = common dso_local global [5 x double] zeroinitializer, align 16
                    //"@"+name+" = " +"global "+type+" "+value+ ", align 8";
                    String type="["+dim+"x double]";
                    appendGlobalDecBuffer("@"+n.name+ " = " + "global "+ type + " zeroinitializer, align 16", true);
                    n.type=Type.TABLE;
                    n.nElement=dim;
                    n.setGlobal();
                    globalSymbolTable.varTable.put(n.name, n);

                    for(int i = 0; i<dim; i++){
                        //<result> = getelementptr inbounds [<#elements> x <type>], [<#elements> x <type>]* <variable>, i32 0, i32 <index>
                        // %2 = getelementptr inbounds [9 x i32], [9 x i32]* %1, i32 0, i32 7
                        String reg = getRegister();
                        String arrayType=" [" + dim +"x double]";
                        appendMainBuffer("%"+reg+ " = " + "getelementptr inbounds" + arrayType+","+arrayType+"*"+ n.scope+n.name+", i32 0, i32 " + i, true);
                        ValueObj arrayCell = new ValueObj(reg);
                        arrayCell.setLocal();
                        arrayCell.type=Type.NUMBER;
                        initVar(arrayCell, currentSymTable.expList.get(i));

                    }
                    currentSymTable.expList.clear();
                    } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment ::= var EQ ass_exp 
            {
              ValueObj RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        ValueObj tmp = currentSymTable.get(n.name);
                         
                        if(tmp == null && n.nElement == null){ //if the variable is not declared and it is not an array cell 
                             if(currentSymTable.isFunc){ 
                                pSemError("CANNOT DECLARE GLOBAL VARIABLES INSIDE FUNCTION");
                                }				                    
		                    globalSymbolTable.varTable.put(n.name, n);//TO DO: need to distinguish here between local and global var
                            RESULT = initVar(n, x);
                        }else{ //if it is declared or it is an array cell
                            if(n.nElement != null){
                                RESULT = initVar(n, x); //if is is an array cell
                            }else{
                                RESULT = initVar(tmp, x); //if it is a declared var
                            }
                        }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assignment ::= var EQ error 
            {
              ValueObj RESULT =null;
		 pSynWarning("ERROR IN RHS OF ASSIGNMENT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var_list ::= var_list CM var 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  currentSymTable.varList.add(x) ;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var_list ::= var 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.currentSymTable.varList.add(x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var_list ::= var_list CM error 
            {
              Object RESULT =null;
		 pSynError("WRONG VARIABLE LIST");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // var ::= ID 
            {
              ValueObj RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ValueObj(n);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // var ::= ID SO exp SC 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValueObj i = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 //INSERT ARRAY OUT OF BOUNDS CHECKSSSS
                            
                          ValueObj tmp = currentSymTable.get(x); //get element corresponding to var ID from symbol table
                            if(tmp == null){ //if it is null we cannot do anything
                             pSemError("ARRAY " +"\""+x+"\"" +" NOT DECLARED, CANNOT ACCESS ARRAY ELEMENT");
                              
                            }else{
                                
                                if(tmp.type == Type.TABLE){ //we check if the variable ID is a table
                                    String index=null;
                                    if(i.type == Type.IMMEDIATE){ //if the index is an immediate
                                        index=String.valueOf(i.value.intValue()); //just use its value
                                    }else if(i.type == Type.NUMBER){ //if it is a number
                                    String reg=getRegister();
                                    String reg2=getRegister();
                                    appendMainBuffer(loadLLVM("%"+reg, "double", "double", i.scope+i.name,"8"), true); //save the value of the var into the register
                                     //%X = fptosi double -123.0 to i32
                                    appendMainBuffer("%"+reg2+ " = " + "fptosi double "+"%"+reg+" to i32", true); //cast it to int32
                                    index="%"+reg2;
                                    }else if(i.type == Type.RNUM){  //if it is a register with a number in it
                                        String reg=getRegister();
                                        appendMainBuffer("%"+reg+ " = " + "fptosi double "+"%"+i.name+" to i32", true); //just cast it to i32
                                        index="%"+reg;
                                    }


                                
                                    String reg = getRegister();
                                    String arrayType=" [" + tmp.nElement +"x double]";   
                                    appendMainBuffer("%"+reg+ " = " + "getelementptr inbounds" + arrayType+","+arrayType+"*"+ tmp.scope+tmp.name+", i32 0, i32 " + index, true); //get address of the array cell
                                    ValueObj arrayCell = new ValueObj(reg); //create a new object to store the register containing the reference
                                    arrayCell.setLocal();
                                    arrayCell.type=Type.NUMBER;
                                    arrayCell.name=reg; 
                                    arrayCell.nElement=tmp.nElement;//save the name in the array cell so that we can understand it has already been declared
                                    RESULT = arrayCell;
                                
                                }else{
                                    
                                     pSemError("CANNOT ACCESS VARIABLE " +"\""+x+"\"" +" AS AN ARRAY");
                                }
                            }
                            
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$0 ::= 
            {
              Object RESULT =null;
 currentSymTable = new SymbolTable(currentSymTable, false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // block ::= DO NT$0 stmt_list END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 currentSymTable=currentSymTable.getPrev(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // loop_cond ::= exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            if(x.type!=Type.BOOL){
                                 String reg=getRegister();
                                RESULT= new ValueObj(reg); 
                                RESULT.setBool();
                                RESULT.setLocal();
                                appendMainBuffer("%"+reg + " = icmp "+ "eq" +" i32 0" +", " + "0", true); //calculate result
                            }else{
                                RESULT=x;
                            }

                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$1 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            currentSymTable = new SymbolTable(currentSymTable, false);
                            loopCount = ++totLoopCount;
                            loopList.push(loopCount);    
                            appendMainBuffer(("br label %for.cond." + loopCount), true);
                            appendMainBuffer(("for.cond." + loopCount + ":"), true);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 //what to allow?
                            appendMainBuffer(("br i1 " + x.scope+x.name + ", label %for.body." + loopCount + ", label %for.exit." + loopCount), true);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                            appendMainBuffer(("for.inc." + loopCount + ":"), true);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            ValueObj tmp=operation("fadd", n, y);
                            initVar(n, tmp);
                            appendMainBuffer(("br label %for.cond." + loopCount), true);
                            appendMainBuffer(("for.body." + loopCount + ":"), true);
                            
                        
                            
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for_loop ::= FOR assignment NT$1 CM loop_cond NT$2 CM NT$3 exp NT$4 DO stmt_list END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                            loopCount=loopList.pop(); //restore it when statement is finished
                            appendMainBuffer(("br label %for.inc." + loopCount), true);
                            appendMainBuffer(("for.exit." + loopCount + ":"), true);
                            currentSymTable=currentSymTable.getPrev(true);
                            
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // for_loop ::= FOR error CM loop_cond CM exp DO stmt_list END 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 pSynError("WRONG LOOP VAR INITIALIZATION: MUST BE var=immediate");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$5 ::= 
            {
              Object RESULT =null;
 currentSymTable = new SymbolTable(currentSymTable, false); 
                        loopCount = ++totLoopCount;
                        loopList.push(loopCount); //when entering a statement, save the loop number on the stack
                        appendMainBuffer(("br label %for.cond." + loopCount), true);
                        appendMainBuffer(("for.cond." + loopCount + ":"), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                        appendMainBuffer(("br i1 " + x.scope+x.name + ", label %for.body." + loopCount + ", label %for.exit." + loopCount), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                        appendMainBuffer(("for.body." + loopCount + ":"), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // while_loop ::= WHILE NT$5 loop_cond NT$6 DO NT$7 stmt_list END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                        currentSymTable=currentSymTable.getPrev(true);
                        loopCount=loopList.pop(); //restore it when statement is finished
                        appendMainBuffer(("br label %for.cond." + loopCount), true);
                        appendMainBuffer(("for.exit." + loopCount + ":"), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_loop",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // while_loop ::= WHILE error stmt_list END 
            {
              Object RESULT =null;
		 pSynWarning("MISSING \"DO\"");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_loop",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$8 ::= 
            {
              Object RESULT =null;

                         currentSymTable = new SymbolTable(currentSymTable, false); 
                        loopCount = ++totLoopCount;
                        loopList.push(loopCount); //when entering a statement, save the loop number on the stack
                        appendMainBuffer(("br label %for.body." + loopCount), true);
                        appendMainBuffer(("for.body." + loopCount + ":"), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
                        loopCount=loopList.pop(); //restore it when statement is finished                   
                        appendMainBuffer(("br label %for.cond." + loopCount), true);
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        appendMainBuffer(("for.cond." + loopCount + ":"), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // repeat_loop ::= REPEAT NT$8 stmt_list NT$9 UNTIL NT$10 loop_cond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                        
                        appendMainBuffer(("br i1 " + x.scope+x.name + ", label %for.body." + loopCount + ", label %for.exit." + loopCount), true);
                        appendMainBuffer(("for.exit." + loopCount + ":"), true);
                        currentSymTable=currentSymTable.getPrev(true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_loop",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$11 ::= 
            {
              Object RESULT =null;
  currentSymTable = new SymbolTable(currentSymTable, false); 
                    loopCount = ++totLoopCount; loopList.push(loopCount);//when entering a statement, save the loop number on the stack
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    appendMainBuffer(("br i1 " + x.scope+x.name + ", label %if.body." + loopCount + ", label %if.else." + loopCount), true);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                    appendMainBuffer(("if.body." + loopCount + ":"), true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
loopCount=loopList.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_block ::= IF NT$11 loop_cond NT$12 THEN NT$13 stmt_list NT$14 else_block END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if_block ::= IF error stmt_list else_block END 
            {
              Object RESULT =null;
		 pSynWarning("ERROR IN IF CONDITION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$15 ::= 
            {
              Object RESULT =null;
 
                     appendMainBuffer(("br label %if.exit." + loopCount), true);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
                    appendMainBuffer(("if.else." + loopCount + ":"), true); 
                    loopList.push(loopCount);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // else_block ::= NT$15 ELSE NT$16 stmt_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   
                     loopCount=loopList.pop();
                    appendMainBuffer(("br label %if.exit." + loopCount), true);
                    appendMainBuffer(("if.exit." + loopCount + ":"), true);
                    currentSymTable=currentSymTable.getPrev(true);
                    
                  
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // else_block ::= 
            {
              Object RESULT =null;
		
                        appendMainBuffer(("br label %if.else." + loopCount), true);
                        appendMainBuffer(("if.else." + loopCount + ":"), true); 
                        currentSymTable=currentSymTable.getPrev(true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // func_decl_param ::= var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl_param",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // func_decl_param ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl_param",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // func_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // func_list ::= func_list function_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$17 ::= 
            {
              Object RESULT =null;
 currentSymTable = new SymbolTable(currentSymTable, true); //use new symbol table
                              currentSymTable.currentBuffer=funcBuffer; //set buffer to func buffer

                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String fName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;


                    if(funcTable.containsKey(fName)){
                        pSemError("FUNCTION ALREADY DECLARED");
                    }
                    FuncObj func = new FuncObj(fName); //create new funct object
                    funcTable.put(fName, func);
                    func.nargsTot=currentSymTable.varList.size(); //set number of param in the function

                    appendMainBuffer(("define double @" + fName + "("), false); //definition of function
                    
                    for (int i = 0; i < currentSymTable.varList.size(); i++){ //loop through all parameters and append it to the function delcaration
                        if(i!=currentSymTable.varList.size()-1)
                            appendMainBuffer("double, ", false);
                        else
                            appendMainBuffer("double ", false);
                    }
                   
                    appendMainBuffer((") {"), true); //end  function declaration

                     currentSymTable.registerCount = func.nargsTot + 1;


                
                    for (int i = 0; i < currentSymTable.varList.size(); i++){ //inside the function, allocate a value for each parameter
                        String reg = getRegister();
                        ValueObj tmp = new ValueObj(reg); //create new value parameter
                        tmp.setDouble();
                        tmp.setLocal();
                        currentSymTable.varTable.put(currentSymTable.varList.get(i).name, tmp); //add to the symbol table
                   
                        appendMainBuffer(("%" + reg + " = alloca " + "double" + ", align " + "8"), true); //allocate parameter
                        appendMainBuffer(("store " + "double" + " %" + i + ", "  + "double* " + "%" + reg + ", align 8"), true); //store passed parameter in the function param
                    }
                    
                    currentSymTable.varList.clear();  //clear var list
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // function_decl ::= FUNCTION NT$17 ID RO func_decl_param RC NT$18 stmt_list ret END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String fName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 appendMainBuffer("\n}", true);  //use directly the regitter

                                        currentSymTable = currentSymTable.getPrev(false); currentSymTable.currentBuffer=mainBuffer; //go to previous symbol table e buffer
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // function_decl ::= FUNCTION RO func_decl_param RC stmt_list error 
            {
              Object RESULT =null;
		 pSynWarning("MISSING RETURN STATEMENT ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ret ::= RETURN exp 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        
                        if(x.type == Type.IMMEDIATE){ 
                            appendMainBuffer("ret double " + x.value, true);  //append just the value
                             getRegister();
                        }else if(x.type == Type.NUMBER){
                            String reg = getRegister(); //need to load the value into a register
                            appendMainBuffer(loadLLVM("%"+reg, "double", "double", x.scope+x.name, "8"), true);
                            appendMainBuffer("ret double " + "%"+reg, true); 
                            getRegister(); 
                        }else if(x.type == Type.RNUM){
                            appendMainBuffer("ret double " + x.scope+x.name, true);  //use directly the regitter
                             getRegister();
                        }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ret ::= RETURN error 
            {
              Object RESULT =null;
		 pSynWarning("MISSING RETURN VALUE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // print_func ::= PRINT RO STRING RC 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    int label = genLabelString();
    
    
    
    String s = value;
    s = s.substring(1, s.length() - 1);
    int length = s.length();
    if (!s.contains("\\n"))
    length++;
    s = s.replace("\\n", "\\0A");
    s = s + "\\00";
    
    appendMainBuffer(("%" + getRegister() + " = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([" + length + " x i8], [" + length + " x i8]* @.str." + label + ", i32 0, i32 0))"), true);
    stringList.add(value);
   
    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$19 ::= 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = new ArrayList<ValueObj>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // print_func ::= PRINT RO STRFRT RO STRING CM NT$19 func_param_list RC RC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ValueObj> x = (ArrayList<ValueObj>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                    ArrayList<ValueObj> paramsList = (ArrayList<ValueObj>) x; //list of parameters to print
                                    if(paramsList.size()==0){
                                        pSynError("MISSING PARAMETERS IN PRINT FUNCTION");
                                    }
                                    int label = genLabelString(); //save the string format
    
                                    String s = value;
                                    s = s.substring(1, s.length() - 1);
                                    int length = s.length();
                                    if (!s.contains("\\n"))
                                    length++;
                                    s = s.replace("\\n", "\\0A");
                                    s = s + "\\00";
                                    //use a temporary buffer so that we can load elements from memory before writing the print
                                    StringBuffer printBuffer = new StringBuffer();
                                    //do not specify the register output because we need to put it after loading eventually var of type NUMBER
                                    printBuffer.append(" = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([" + length + " x i8], [" + length + " x i8]* @.str." + label + ", i32 0, i32 0), ");
                                    stringList.add(value);

                                    

   
                                                for (int i = 0; i < paramsList.size(); i++){
                                                            ValueObj param = x.get(i);                                                
                                                    if(param.type==Type.IMMEDIATE){ //if it is an immediate
                                                        printBuffer.append("double "+param.value); //just append the value
                                                    }else if(param.type==Type.RNUM){ //if it is a register number
                                                        printBuffer.append("double %"+param.name); //append the register
                                                    }else if(param.type==Type.NUMBER){ //if it is a number
                                                        String reg1 = getRegister(); //load the register
                                                        appendMainBuffer(loadLLVM("%"+reg1, "double", "double", param.scope+param.name, "8"), true);
                                                         printBuffer.append("double %"+reg1); //and attach theregister
                                                    }
                                                    if(i!=paramsList.size()-1){
                                                        printBuffer.append(", ");
                                                    }
                                                    
                                                }
                                                        //"%" + getRegister() + 
                                                        printBuffer.append((")")); //close the printf func
                                                        printBuffer.reverse(); //this is a trick to append at the beginning instead of at the end
                                                        printBuffer.append(new StringBuffer("%" + getRegister()).reverse());
                                                        printBuffer.reverse();
                                                        appendMainBuffer(printBuffer.toString(), true);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$20 ::= 
            {
              Object RESULT =null;
 RESULT = new ArrayList<ValueObj>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // print_func ::= PRINT RO NT$20 func_param_list RC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ValueObj> x = (ArrayList<ValueObj>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                    ArrayList<ValueObj> paramsList = (ArrayList<ValueObj>) x; //list of parameters to print
                                    if(paramsList.size()==0){
                                        pSynError("MISSING PARAMETERS IN PRINT FUNCTION");
                                    }
                                    
                                    //use a temporary buffer so that we can load elements from memory before writing the print
                                    StringBuffer printBuffer = new StringBuffer();
                                    StringBuffer printBuffer2 = new StringBuffer();
                                    StringBuffer value2 = new StringBuffer();
                                    //do not specify the register output because we need to put it after loading eventually var of type NUMBER
                                    value2.append("  ");

                                    

   
                                                for (int i = 0; i < paramsList.size(); i++){
                                                            ValueObj param = x.get(i);                                                
                                                    if(param.type==Type.IMMEDIATE){ //if it is an immediate
                                                        printBuffer2.append("double "+param.value); //just append the value
                                                    }else if(param.type==Type.RNUM){ //if it is a register number
                                                        printBuffer2.append("double %"+param.name); //append the register
                                                    }else if(param.type==Type.NUMBER){ //if it is a number
                                                        String reg1 = getRegister(); //load the register
                                                        appendMainBuffer(loadLLVM("%"+reg1, "double", "double", param.scope+param.name, "8"), true);
                                                         printBuffer2.append("double %"+reg1); //and attach theregister
                                                    }
                                                    if(i!=paramsList.size()-1){
                                                        printBuffer2.append(", ");
                                                    }
                                                    value2.append("%.0f ");
                                                }

                                                        value2.append("\n");
                                                        int label = genLabelString(); //save the string format
                                                        String value =value2.toString();
                                                        String s = value;
                                                        s = s.substring(1, s.length() - 1);
                                                        int length = s.length();
                                                        if (!s.contains("\\n"))
                                                        length++;
                                                        s = s.replace("\\n", "\\0A");
                                                        s = s + "\\00";
                                                        stringList.add(value);
                                                        printBuffer.append(" = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([" + length + " x i8], [" + length + " x i8]* @.str." + label + ", i32 0, i32 0), ");
                                                        printBuffer.append(printBuffer2.toString());
                                                        printBuffer.append((")")); //close the printf func
                                                        printBuffer.reverse(); //this is a trick to append at the beginning instead of at the end
                                                        printBuffer.append(new StringBuffer("%" + getRegister()).reverse());
                                                        printBuffer.reverse();
                                                        appendMainBuffer(printBuffer.toString(), true);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // func_param_list ::= func_param_list CM exp 
            {
              ArrayList<ValueObj> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ValueObj> x = (ArrayList<ValueObj>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=x;
                                                    x.add(y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_param_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // func_param_list ::= exp 
            {
              ArrayList<ValueObj> RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ArrayList<ValueObj>();
                                RESULT.add(y);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_param_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // func_param_list ::= 
            {
              ArrayList<ValueObj> RESULT =null;
		 RESULT= new ArrayList<ValueObj>();
                                
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_param_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // func_call ::= ID RO func_param_list RC 
            {
              String RESULT =null;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String fName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ValueObj> x = (ArrayList<ValueObj>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 //function invocation
                                                if(!funcTable.containsKey(fName)){ //if function is not declared
                                                     pSemError("FUNCTION "+fName+" NOT DECLARE, CANNOT INVOKE IT");                                                    
                                                }
                                                FuncObj func = funcTable.get(fName);
                                                if(func.nargsTot != x.size()){ //if parameters passed do not coincide with declaration
                                                     pSemError("WRONG NUMBER OF PARAMETERS IN FUNCTION "+fName);
                                                   
                                                }
                                                
                                                StringBuffer parameters = new StringBuffer();
                                                for(int i = 0; i<func.nargsTot; i++){ //loop through the parameters 
                                                    ValueObj param = x.get(i);                                                
                                                    if(param.type==Type.IMMEDIATE){ //if it is an immediate
                                                        parameters.append("double "+param.value); //just append the value
                                                    }else if(param.type==Type.RNUM){ //if it is a register number
                                                        parameters.append("double %"+param.name); //append the register
                                                    }else if(param.type==Type.NUMBER){ //if it is a number
                                                        String reg1 = getRegister(); //load the register
                                                        appendMainBuffer(loadLLVM("%"+reg1, "double", "double", param.scope+param.name, "8"), true);
                                                        parameters.append("double %"+reg1); //and attach theregister
                                                    }
                                                    if(i!=func.nargsTot-1){
                                                        parameters.append(", ");
                                                    }
                

                                                }
                                                String reg=getRegister();
                                                appendMainBuffer("%"+reg+" = call double @"+fName+"("+parameters.toString()+")", true); //call the function
                                                RESULT=reg;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
