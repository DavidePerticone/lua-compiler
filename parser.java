
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;
import java.util.Map.*;
import java.util.ArrayList;
import java.util.regex.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\003\000\002\031\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\015\004\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\002\005\000\002\002\003\000" +
    "\002\002\004\000\002\002\003\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\004" +
    "\000\002\002\006\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\012\005\000\002\012\003\000\002\013" +
    "\003\000\002\013\003\000\002\006\005\000\002\006\004" +
    "\000\002\010\004\000\002\007\005\000\002\003\005\000" +
    "\002\020\005\000\002\011\005\000\002\011\003\000\002" +
    "\021\003\000\002\021\006\000\002\005\005\000\002\017" +
    "\003\000\002\014\013\000\002\022\011\000\002\023\010" +
    "\000\002\024\012\000\002\025\004\000\002\025\002\000" +
    "\002\033\012\000\002\026\004\000\002\026\003\000\002" +
    "\034\006\000\002\034\010\000\002\034\010\000\002\035" +
    "\005\000\002\035\003\000\002\036\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\026\033\022\034\032\035\017\042\013\044" +
    "\021\046\012\047\034\051\015\052\014\053\026\001\002" +
    "\000\036\002\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\041" +
    "\ufff2\042\ufff2\044\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2" +
    "\052\ufff2\053\ufff2\001\002\000\036\002\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\041\ufff0\042\ufff0\044\ufff0\046\ufff0" +
    "\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002\000" +
    "\036\002\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\041\ufff4" +
    "\042\ufff4\044\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\001\002\000\036\002\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\041\ufffc\042\ufffc\044\ufffc\046\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\001\002\000\006" +
    "\017\226\032\214\001\002\000\040\002\ufffb\017\224\033" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\041\ufffb\042\ufffb\044\ufffb" +
    "\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\001" +
    "\002\000\004\021\216\001\002\000\004\044\212\001\002" +
    "\000\046\002\uffc2\014\047\021\053\026\052\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\041\uffc2\042\uffc2\043\051\044\045" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\001" +
    "\002\000\004\044\202\001\002\000\030\002\177\033\022" +
    "\034\032\035\017\042\013\044\021\046\012\047\034\051" +
    "\015\052\014\053\026\001\002\000\004\021\166\001\002" +
    "\000\036\002\uffee\033\uffee\034\uffee\035\uffee\036\uffee\041" +
    "\uffee\042\uffee\044\uffee\046\uffee\047\uffee\050\uffee\051\uffee" +
    "\052\uffee\053\uffee\001\002\000\012\015\117\017\uffcf\021" +
    "\156\032\uffcf\001\002\000\024\033\022\034\032\035\017" +
    "\042\013\044\021\046\012\047\034\052\014\053\026\001" +
    "\002\000\036\002\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\041\ufff1\042\ufff1\044\ufff1\046\ufff1\047\ufff1\050\ufff1\051" +
    "\ufff1\052\ufff1\053\ufff1\001\002\000\030\002\ufffe\033\ufffe" +
    "\034\ufffe\035\ufffe\042\ufffe\044\ufffe\046\ufffe\047\ufffe\051" +
    "\ufffe\052\ufffe\053\ufffe\001\002\000\036\002\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\041\ufff9\042\ufff9\044\ufff9\046" +
    "\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\001\002" +
    "\000\004\021\145\001\002\000\036\002\ufff5\033\ufff5\034" +
    "\ufff5\035\ufff5\036\ufff5\041\ufff5\042\ufff5\044\ufff5\046\ufff5" +
    "\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\001\002\000" +
    "\036\002\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\041\ufff6" +
    "\042\ufff6\044\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\001\002\000\004\017\132\001\002\000\004" +
    "\044\045\001\002\000\036\002\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\041\ufffa\042\ufffa\044\ufffa\046\ufffa\047\ufffa" +
    "\050\ufffa\051\ufffa\052\ufffa\053\ufffa\001\002\000\024\033" +
    "\022\034\032\035\017\042\013\044\021\046\012\047\034" +
    "\052\014\053\026\001\002\000\030\002\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\042\ufffd\044\ufffd\046\ufffd\047\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\001\002\000\036\002\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\041\uffef\042\uffef\044\uffef\046\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\001\002\000" +
    "\036\002\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\041\ufff3" +
    "\042\ufff3\044\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052" +
    "\ufff3\053\ufff3\001\002\000\026\033\022\034\032\035\017" +
    "\042\013\044\021\046\012\047\034\050\042\052\014\053" +
    "\026\001\002\000\032\033\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\041\ufff7\042\ufff7\044\ufff7\046\ufff7\047\ufff7\050\ufff7\052" +
    "\ufff7\053\ufff7\001\002\000\004\021\044\001\002\000\032" +
    "\033\ufff8\034\ufff8\035\ufff8\036\ufff8\041\ufff8\042\ufff8\044" +
    "\ufff8\046\ufff8\047\ufff8\050\ufff8\052\ufff8\053\ufff8\001\002" +
    "\000\014\014\047\021\053\026\052\043\051\044\045\001" +
    "\002\000\102\002\uffce\004\uffce\006\uffce\007\uffce\010\uffce" +
    "\011\uffce\012\uffce\015\117\016\uffce\017\uffce\020\uffce\022" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\041\uffce\042" +
    "\uffce\044\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\001\002\000\004\022\116\001\002\000\014\014" +
    "\047\021\053\026\052\043\051\044\045\001\002\000\100" +
    "\002\uffea\004\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\016\uffea\017\uffea\020\uffea\022\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\041\uffea\042\uffea\044\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\001\002\000" +
    "\100\002\uffec\004\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\016\uffec\017\uffec\020\uffec\022\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\036\uffec\041\uffec\042\uffec\044\uffec\046" +
    "\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\001\002" +
    "\000\004\043\114\001\002\000\016\003\110\014\047\021" +
    "\053\026\052\043\051\044\045\001\002\000\042\004\071" +
    "\006\067\007\057\010\066\011\055\012\070\017\063\020" +
    "\060\022\uffcb\025\064\026\056\027\062\030\065\031\061" +
    "\032\uffcb\033\uffcb\001\002\000\014\014\047\021\053\026" +
    "\052\043\051\044\045\001\002\000\014\014\047\021\053" +
    "\026\052\043\051\044\045\001\002\000\014\014\047\021" +
    "\053\026\052\043\051\044\045\001\002\000\014\014\047" +
    "\021\053\026\052\043\051\044\045\001\002\000\014\014" +
    "\047\021\053\026\052\043\051\044\045\001\002\000\014" +
    "\014\047\021\053\026\052\043\051\044\045\001\002\000" +
    "\004\017\100\001\002\000\014\014\047\021\053\026\052" +
    "\043\051\044\045\001\002\000\014\014\047\021\053\026" +
    "\052\043\051\044\045\001\002\000\014\014\047\021\053" +
    "\026\052\043\051\044\045\001\002\000\014\014\047\021" +
    "\053\026\052\043\051\044\045\001\002\000\014\014\047" +
    "\021\053\026\052\043\051\044\045\001\002\000\014\014" +
    "\047\021\053\026\052\043\051\044\045\001\002\000\100" +
    "\002\uffdf\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf\024\uffdf\025\064" +
    "\026\056\027\062\030\065\031\061\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\041\uffdf\042\uffdf\044\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\001\002\000" +
    "\100\002\uffe3\004\071\006\067\007\057\010\066\011\055" +
    "\012\uffe3\016\uffe3\017\063\020\060\022\uffe3\024\uffe3\025" +
    "\064\026\056\027\062\030\065\031\061\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\041\uffe3\042\uffe3\044\uffe3\046" +
    "\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\001\002" +
    "\000\100\002\uffde\004\uffde\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\016\uffde\017\uffde\020\uffde\022\uffde\024\uffde" +
    "\025\064\026\056\027\062\030\065\031\061\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\041\uffde\042\uffde\044\uffde" +
    "\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\001" +
    "\002\000\100\002\uffdc\004\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\024" +
    "\uffdc\025\064\026\056\027\062\030\065\031\061\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\041\uffdc\042\uffdc\044" +
    "\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\001\002\000\100\002\uffe6\004\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\016\uffe6\017\uffe6\020\uffe6\022\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\061\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\041\uffe6\042\uffe6" +
    "\044\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\001\002\000\100\002\uffe9\004\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\016\uffe9\017\uffe9\020\uffe9\022" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\062\030\065\031\061" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\041\uffe9\042" +
    "\uffe9\044\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9" +
    "\053\uffe9\001\002\000\014\014\047\021\053\026\052\043" +
    "\051\044\045\001\002\000\100\002\uffe1\004\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\012\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\022\uffe1\024\uffe1\025\064\026\056\027\062\030\065" +
    "\031\061\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\041" +
    "\uffe1\042\uffe1\044\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\001\002\000\100\002\uffe7\004\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\061\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\041\uffe7\042\uffe7\044\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\001\002\000\100\002\uffe5\004\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\061\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\041\uffe5\042\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\001\002\000\100\002\uffe0\004" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\022\uffe0\024\uffe0\025\064\026\056\027" +
    "\062\030\065\031\061\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\041\uffe0\042\uffe0\044\uffe0\046\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\001\002\000\100\002\uffdd" +
    "\004\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\022\uffdd\024\uffdd\025\064\026\056" +
    "\027\062\030\065\031\061\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\041\uffdd\042\uffdd\044\uffdd\046\uffdd\047\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\053\uffdd\001\002\000\100\002" +
    "\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\022\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\062\030\065\031\061\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\041\uffe8\042\uffe8\044\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\001\002\000\100" +
    "\002\uffe4\004\071\006\067\007\057\010\066\011\uffe4\012" +
    "\uffe4\016\uffe4\017\063\020\060\022\uffe4\024\uffe4\025\064" +
    "\026\056\027\062\030\065\031\061\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\041\uffe4\042\uffe4\044\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\001\002\000" +
    "\004\022\113\001\002\000\036\004\071\006\067\007\057" +
    "\010\066\011\055\012\070\017\063\020\060\022\112\025" +
    "\064\026\056\027\062\030\065\031\061\001\002\000\100" +
    "\002\uffed\004\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\016\uffed\017\uffed\020\uffed\022\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\041\uffed\042\uffed\044\uffed\046\uffed" +
    "\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\001\002\000" +
    "\100\002\uffdb\004\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\041\uffdb\042\uffdb\044\uffdb\046" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\001\002" +
    "\000\100\002\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\016\uffeb\017\uffeb\020\uffeb\022\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\041\uffeb\042\uffeb\044\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\001" +
    "\002\000\100\002\uffe2\004\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\061\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\041\uffe2\042\uffe2\044" +
    "\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\001\002\000\036\002\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\041\uffc8\042\uffc8\044\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\001\002\000\014\014\047\021" +
    "\053\026\052\043\051\044\045\001\002\000\036\004\071" +
    "\006\067\007\057\010\066\011\055\012\070\016\121\017" +
    "\063\020\060\025\064\026\056\027\062\030\065\031\061" +
    "\001\002\000\100\002\uffcd\004\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\016\uffcd\017\uffcd\020\uffcd\022\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\041\uffcd\042\uffcd" +
    "\044\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\001\002\000\004\032\123\001\002\000\014\014\047" +
    "\021\053\026\052\043\051\044\045\001\002\000\004\032" +
    "\125\001\002\000\014\014\047\021\053\026\052\043\051" +
    "\044\045\001\002\000\004\033\127\001\002\000\024\033" +
    "\022\034\032\035\017\042\013\044\021\046\012\047\034" +
    "\052\014\053\026\001\002\000\026\033\022\034\032\035" +
    "\017\041\131\042\013\044\021\046\012\047\034\052\014" +
    "\053\026\001\002\000\036\002\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\041\uffca\042\uffca\044\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\053\uffca\001\002\000\016\014" +
    "\047\021\053\023\136\026\052\043\051\044\045\001\002" +
    "\000\042\002\uffd7\024\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\041\uffd7\042\uffd7\044\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\053\uffd7\001\002\000\074\002" +
    "\uffd8\004\071\006\067\007\057\010\066\011\055\012\070" +
    "\017\063\020\060\024\uffd8\025\064\026\056\027\062\030" +
    "\065\031\061\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\041\uffd8\042\uffd8\044\uffd8\046\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\001\002\000\040\002\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\041\uffd1\042\uffd1\044" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\001\002\000\020\014\047\021\053\023\136\024\137\026" +
    "\052\043\051\044\045\001\002\000\042\002\uffd5\024\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\041\uffd5\042" +
    "\uffd5\044\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\001\002\000\042\002\uffd9\024\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\041\uffd9\042\uffd9\044\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\001" +
    "\002\000\006\024\143\032\142\001\002\000\016\014\047" +
    "\021\053\023\136\026\052\043\051\044\045\001\002\000" +
    "\042\002\uffd6\024\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\041\uffd6\042\uffd6\044\uffd6\046\uffd6\047\uffd6\050" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\001\002\000\042\002\uffda" +
    "\024\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\041" +
    "\uffda\042\uffda\044\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\001\002\000\004\045\146\001\002\000" +
    "\006\022\150\032\147\001\002\000\014\014\047\021\053" +
    "\026\052\043\051\044\153\001\002\000\036\002\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\041\uffc1\042\uffc1\044\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\001" +
    "\002\000\006\022\163\032\160\001\002\000\040\004\071" +
    "\006\067\007\057\010\066\011\055\012\070\017\063\020" +
    "\060\022\uffbd\025\064\026\056\027\062\030\065\031\061" +
    "\032\uffbd\001\002\000\044\004\uffce\006\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\015\117\017\uffce\020\uffce\021\156" +
    "\022\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\001\002\000\004\022\155\001\002\000\036\002\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\041\uffbf\042\uffbf\044" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\001\002\000\014\014\047\021\053\026\052\043\051\044" +
    "\045\001\002\000\006\022\161\032\160\001\002\000\014" +
    "\014\047\021\053\026\052\043\051\044\045\001\002\000" +
    "\040\002\uffbc\022\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\041\uffbc\042\uffbc\044\uffbc\046\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\001\002\000\040\004\071\006\067" +
    "\007\057\010\066\011\055\012\070\017\063\020\060\022" +
    "\uffbe\025\064\026\056\027\062\030\065\031\061\032\uffbe" +
    "\001\002\000\036\002\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\041\uffc0\042\uffc0\044\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\001\002\000\026\033\022\034" +
    "\032\035\017\041\165\042\013\044\021\046\012\047\034" +
    "\052\014\053\026\001\002\000\036\002\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\041\uffcc\042\uffcc\044\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\001\002\000" +
    "\014\014\047\021\053\026\052\043\051\044\045\001\002" +
    "\000\036\004\071\006\067\007\057\010\066\011\055\012" +
    "\070\017\063\020\060\022\170\025\064\026\056\027\062" +
    "\030\065\031\061\001\002\000\004\037\171\001\002\000" +
    "\024\033\022\034\032\035\017\042\013\044\021\046\012" +
    "\047\034\052\014\053\026\001\002\000\030\033\022\034" +
    "\032\035\017\036\173\041\uffc5\042\013\044\021\046\012" +
    "\047\034\052\014\053\026\001\002\000\024\033\022\034" +
    "\032\035\017\042\013\044\021\046\012\047\034\052\014" +
    "\053\026\001\002\000\004\041\175\001\002\000\036\002" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\041\uffc7\042\uffc7" +
    "\044\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\001\002\000\026\033\022\034\032\035\017\041\uffc6" +
    "\042\013\044\021\046\012\047\034\052\014\053\026\001" +
    "\002\000\004\002\001\001\002\000\030\002\000\033\000" +
    "\034\000\035\000\042\000\044\000\046\000\047\000\051" +
    "\000\052\000\053\000\001\002\000\030\002\uffff\033\uffff" +
    "\034\uffff\035\uffff\042\uffff\044\uffff\046\uffff\047\uffff\051" +
    "\uffff\052\uffff\053\uffff\001\002\000\004\021\203\001\002" +
    "\000\014\014\047\021\053\026\052\043\051\044\045\001" +
    "\002\000\006\022\205\032\160\001\002\000\024\033\022" +
    "\034\032\035\017\042\013\044\021\046\012\047\034\052" +
    "\014\053\026\001\002\000\024\033\022\034\032\035\017" +
    "\042\013\044\021\046\012\047\034\052\014\053\026\001" +
    "\002\000\026\033\ufff3\034\ufff3\035\ufff3\041\210\042\ufff3" +
    "\044\ufff3\046\ufff3\047\ufff3\052\ufff3\053\ufff3\001\002\000" +
    "\030\002\uffc4\033\uffc4\034\uffc4\035\uffc4\042\uffc4\044\uffc4" +
    "\046\uffc4\047\uffc4\051\uffc4\052\uffc4\053\uffc4\001\002\000" +
    "\070\002\uffc3\004\071\006\067\007\057\010\066\011\055" +
    "\012\070\017\063\020\060\025\064\026\056\027\062\030" +
    "\065\031\061\033\uffc3\034\uffc3\035\uffc3\036\uffc3\041\uffc3" +
    "\042\uffc3\044\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\001\002\000\042\002\uffcf\017\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\041\uffcf\042\uffcf\044" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\001\002\000\042\002\uffd4\017\uffd4\032\214\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\041\uffd4\042\uffd4\044\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\001\002\000" +
    "\004\044\215\001\002\000\042\002\uffd0\017\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\041\uffd0\042\uffd0\044" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\001\002\000\014\014\047\021\053\026\052\043\051\044" +
    "\045\001\002\000\004\022\220\001\002\000\004\033\221" +
    "\001\002\000\024\033\022\034\032\035\017\042\013\044" +
    "\021\046\012\047\034\052\014\053\026\001\002\000\026" +
    "\033\022\034\032\035\017\041\223\042\013\044\021\046" +
    "\012\047\034\052\014\053\026\001\002\000\036\002\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\041\uffc9\042\uffc9\044" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\001\002\000\016\014\047\021\053\023\136\026\052\043" +
    "\051\044\045\001\002\000\040\002\uffd3\032\142\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\041\uffd3\042\uffd3\044\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\001\002" +
    "\000\016\014\047\021\053\023\136\026\052\043\051\044" +
    "\045\001\002\000\040\002\uffd2\032\142\033\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\041\uffd2\042\uffd2\044\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\046\003\032\005\017\007\006\010\010\011" +
    "\007\014\026\016\034\020\024\021\030\022\004\023\035" +
    "\024\027\026\036\031\015\033\023\034\005\036\022\037" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\212\001\001\000\006" +
    "\002\210\021\047\001\001\000\002\001\001\000\044\003" +
    "\032\005\017\007\006\010\010\011\007\014\026\016\200" +
    "\020\024\021\030\022\004\023\035\024\027\026\036\033" +
    "\177\034\005\036\022\037\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\003\032\005" +
    "\017\007\006\010\010\011\007\014\026\015\163\016\040" +
    "\020\024\021\030\022\004\023\035\024\027\026\036\034" +
    "\005\036\022\037\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\121" +
    "\021\030\001\001\000\002\001\001\000\044\003\032\005" +
    "\017\007\006\010\010\011\007\014\026\015\037\016\040" +
    "\020\024\021\030\022\004\023\035\024\027\026\036\034" +
    "\005\036\022\037\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\032\005\017\007" +
    "\006\010\010\011\007\014\026\016\042\020\024\021\030" +
    "\022\004\023\035\024\027\026\036\034\005\036\022\037" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\053\017\045\021\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\114\021\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\110\021\047\001\001\000\002\001\001" +
    "\000\006\002\106\021\047\001\001\000\006\002\105\021" +
    "\047\001\001\000\006\002\104\021\047\001\001\000\006" +
    "\002\103\021\047\001\001\000\006\002\102\021\047\001" +
    "\001\000\006\002\101\021\047\001\001\000\002\001\001" +
    "\000\006\002\076\021\047\001\001\000\006\002\075\021" +
    "\047\001\001\000\006\002\074\021\047\001\001\000\006" +
    "\002\073\021\047\001\001\000\006\002\072\021\047\001" +
    "\001\000\006\002\071\021\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\100\021\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\117\021\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\053\017\123\021\047\001\001\000\002\001" +
    "\001\000\010\002\053\017\125\021\047\001\001\000\002" +
    "\001\001\000\044\003\032\005\017\007\006\010\010\011" +
    "\007\014\026\015\127\016\040\020\024\021\030\022\004" +
    "\023\035\024\027\026\036\034\005\036\022\037\003\001" +
    "\001\000\042\003\032\005\017\007\006\010\010\011\007" +
    "\014\026\016\042\020\024\021\030\022\004\023\035\024" +
    "\027\026\036\034\005\036\022\037\003\001\001\000\002" +
    "\001\001\000\012\002\133\006\132\013\134\021\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\133\006\132\012\140\013\137\021\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\133\006\132\013\143\021\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\151\021\047\035\150\036\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\151\021\047\035\156\001\001\000\002\001\001" +
    "\000\006\002\161\021\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\032\005\017" +
    "\007\006\010\010\011\007\014\026\016\042\020\024\021" +
    "\030\022\004\023\035\024\027\026\036\034\005\036\022" +
    "\037\003\001\001\000\002\001\001\000\006\002\166\021" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\032\005\017\007\006\010\010\011\007\014\026\015" +
    "\171\016\040\020\024\021\030\022\004\023\035\024\027" +
    "\026\036\034\005\036\022\037\003\001\001\000\044\003" +
    "\032\005\017\007\006\010\010\011\007\014\026\016\042" +
    "\020\024\021\030\022\004\023\035\024\027\025\173\026" +
    "\036\034\005\036\022\037\003\001\001\000\044\003\032" +
    "\005\017\007\006\010\010\011\007\014\026\015\175\016" +
    "\040\020\024\021\030\022\004\023\035\024\027\026\036" +
    "\034\005\036\022\037\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\032\005\017\007\006\010\010" +
    "\011\007\014\026\016\042\020\024\021\030\022\004\023" +
    "\035\024\027\026\036\034\005\036\022\037\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\151\021\047\035\203\001\001" +
    "\000\002\001\001\000\044\003\032\005\017\007\006\010" +
    "\010\011\007\014\026\015\205\016\040\020\024\021\030" +
    "\022\004\023\035\024\027\026\036\034\005\036\022\037" +
    "\003\001\001\000\042\003\032\005\017\007\006\010\010" +
    "\011\007\014\026\016\042\020\024\021\030\022\004\023" +
    "\035\024\027\026\206\034\005\036\022\037\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\053\017\216\021\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\003\032\005\017" +
    "\007\006\010\010\011\007\014\026\015\221\016\040\020" +
    "\024\021\030\022\004\023\035\024\027\026\036\034\005" +
    "\036\022\037\003\001\001\000\042\003\032\005\017\007" +
    "\006\010\010\011\007\014\026\016\042\020\024\021\030" +
    "\022\004\023\035\024\027\026\036\034\005\036\022\037" +
    "\003\001\001\000\002\001\001\000\014\002\133\006\132" +
    "\012\224\013\137\021\047\001\001\000\002\001\001\000" +
    "\014\002\133\006\132\012\226\013\137\021\047\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= prog function_decl 
            { parser.Tree.reduce(2,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= prog stmt 
            { parser.Tree.reduce(2,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= function_decl 
            { parser.Tree.reduce(1,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // prog ::= stmt 
            { parser.Tree.reduce(1,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= local_var_init 
            { parser.Tree.reduce(1,"declaration",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= local_var_list 
            { parser.Tree.reduce(1,"declaration",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= global_var_init 
            { parser.Tree.reduce(1,"declaration",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= assignment 
            { parser.Tree.reduce(1,"declaration",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt_list ::= stmt_list stmt 
            { parser.Tree.reduce(2,"stmt_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt_list ::= stmt 
            { parser.Tree.reduce(1,"stmt_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= if_block 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= for_loop 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= print_func 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= ret 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= declaration 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= func_call 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= while_loop 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= repeat_loop 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= block 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= RO exp RC 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= NUMBER 
            { parser.Tree.reduce(1,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= MINUS NUMBER 
            { parser.Tree.reduce(2,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= var 
            { parser.Tree.reduce(1,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp PLUS exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp MINUS exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp STAR exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp DIV exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp HAT exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp AND exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp OR exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= NOT exp 
            { parser.Tree.reduce(2,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp EQ EQ exp 
            { parser.Tree.reduce(4,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp NOTEQ exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp MIN exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp MAJ exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp MIN_EQ exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp MAJ_EQ exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= RO error RC 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ass_list ::= ass_list CM ass_exp 
            { parser.Tree.reduce(3,"ass_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ass_list ::= ass_exp 
            { parser.Tree.reduce(1,"ass_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ass_exp ::= exp 
            { parser.Tree.reduce(1,"ass_exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ass_exp ::= array_dec 
            { parser.Tree.reduce(1,"ass_exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // array_dec ::= BO ass_list BC 
            { parser.Tree.reduce(3,"array_dec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // array_dec ::= BO BC 
            { parser.Tree.reduce(2,"array_dec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // local_var_list ::= LOCAL var_list 
            { parser.Tree.reduce(2,"local_var_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // local_var_init ::= local_var_list EQ ass_list 
            { parser.Tree.reduce(3,"local_var_init",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var_init",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // global_var_init ::= var_list EQ ass_list 
            { parser.Tree.reduce(3,"global_var_init",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_var_init",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment ::= var EQ ass_exp 
            { parser.Tree.reduce(3,"assignment",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // var_list ::= var_list CM ID 
            { parser.Tree.reduce(3,"var_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var_list ::= ID 
            { parser.Tree.reduce(1,"var_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var ::= ID 
            { parser.Tree.reduce(1,"var",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var ::= ID SO exp SC 
            { parser.Tree.reduce(4,"var",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // block ::= DO stmt_list END 
            { parser.Tree.reduce(3,"block",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // loop_cond ::= exp 
            { parser.Tree.reduce(1,"loop_cond",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_cond",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // for_loop ::= FOR assignment CM loop_cond CM loop_cond DO stmt_list END 
            { parser.Tree.reduce(9,"for_loop",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // while_loop ::= WHILE RO loop_cond RC DO stmt_list END 
            { parser.Tree.reduce(7,"while_loop",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_loop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // repeat_loop ::= REPEAT stmt_list UNTIL RO loop_cond RC 
            { parser.Tree.reduce(6,"repeat_loop",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_loop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if_block ::= IF RO exp RC THEN stmt_list else_block END 
            { parser.Tree.reduce(8,"if_block",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // else_block ::= ELSE stmt_list 
            { parser.Tree.reduce(2,"else_block",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else_block ::= 
            { parser.Tree.reduce(0,"else_block",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // function_decl ::= FUNCTION ID RO func_param_list RC stmt_list ret END 
            { parser.Tree.reduce(8,"function_decl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ret ::= RETURN exp 
            { parser.Tree.reduce(2,"ret",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ret ::= RETURN 
            { parser.Tree.reduce(1,"ret",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // print_func ::= PRINT RO STRING RC 
            { parser.Tree.reduce(4,"print_func",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // print_func ::= PRINT RO STRING CM func_param_list RC 
            { parser.Tree.reduce(6,"print_func",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // print_func ::= PRINT RO STRING CM func_call RC 
            { parser.Tree.reduce(6,"print_func",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // func_param_list ::= func_param_list CM exp 
            { parser.Tree.reduce(3,"func_param_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_param_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // func_param_list ::= exp 
            { parser.Tree.reduce(1,"func_param_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_param_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // func_call ::= ID RO func_param_list RC 
            { parser.Tree.reduce(4,"func_call",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
