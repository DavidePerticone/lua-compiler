
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;
import java.util.Map.*;
import java.util.ArrayList;
import java.util.regex.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\032\004\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\015\004\000\002\015\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\002\005\000\002\002\003" +
    "\000\002\002\004\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\002\006" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\012\005\000\002\012\003\000\002\013\003\000\002\013" +
    "\003\000\002\006\005\000\002\006\004\000\002\010\004" +
    "\000\002\007\005\000\002\003\005\000\002\020\005\000" +
    "\002\011\005\000\002\011\003\000\002\021\003\000\002" +
    "\021\006\000\002\005\005\000\002\017\003\000\002\014" +
    "\013\000\002\022\007\000\002\023\006\000\002\024\010" +
    "\000\002\024\006\000\002\025\004\000\002\025\002\000" +
    "\002\030\002\000\002\030\004\000\002\034\011\000\002" +
    "\026\004\000\002\035\006\000\002\027\005\000\002\027" +
    "\005\000\002\027\003\000\002\027\003\000\002\036\005" +
    "\000\002\036\003\000\002\037\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\026\032\uffc4\033\uffc4\034\uffc4\040\uffc4\042" +
    "\uffc4\045\uffc4\046\uffc4\050\uffc4\051\uffc4\052\uffc4\001\002" +
    "\000\026\032\024\033\033\034\021\040\016\042\023\045" +
    "\015\046\035\050\020\051\017\052\030\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\034\002" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\037\ufff5\040\ufff5" +
    "\042\ufff5\045\ufff5\046\ufff5\047\ufff5\051\ufff5\052\ufff5\001" +
    "\002\000\034\002\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3" +
    "\037\ufff3\040\ufff3\042\ufff3\045\ufff3\046\ufff3\047\ufff3\051" +
    "\ufff3\052\ufff3\001\002\000\034\002\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\037\ufff7\040\ufff7\042\ufff7\045\ufff7\046" +
    "\ufff7\047\ufff7\051\ufff7\052\ufff7\001\002\000\034\002\uffff" +
    "\032\uffff\033\uffff\034\uffff\035\uffff\037\uffff\040\uffff\042" +
    "\uffff\045\uffff\046\uffff\047\uffff\051\uffff\052\uffff\001\002" +
    "\000\006\016\223\031\213\001\002\000\036\002\ufffe\016" +
    "\221\032\ufffe\033\ufffe\034\ufffe\035\ufffe\037\ufffe\040\ufffe" +
    "\042\ufffe\045\ufffe\046\ufffe\047\ufffe\051\ufffe\052\ufffe\001" +
    "\002\000\016\013\055\020\046\025\047\041\051\042\023" +
    "\044\050\001\002\000\004\042\133\001\002\000\016\013" +
    "\055\020\046\025\047\041\051\042\023\044\050\001\002" +
    "\000\004\042\202\001\002\000\020\003\171\013\055\020" +
    "\046\025\047\041\051\042\023\044\050\001\002\000\034" +
    "\002\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\037\ufff1\040" +
    "\ufff1\042\ufff1\045\ufff1\046\ufff1\047\ufff1\051\ufff1\052\ufff1" +
    "\001\002\000\104\002\uffcf\004\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\014\145\015\uffcf\016\uffcf\017\uffcf" +
    "\020\162\021\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\042\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\051\uffcf\052\uffcf\001\002\000\024\032\024\033\033" +
    "\034\021\040\016\042\023\045\015\046\035\051\017\052" +
    "\030\001\002\000\034\002\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\037\ufff4\040\ufff4\042\ufff4\045\ufff4\046\ufff4\047" +
    "\ufff4\051\ufff4\052\ufff4\001\002\000\026\032\uffc3\033\uffc3" +
    "\034\uffc3\040\uffc3\042\uffc3\045\uffc3\046\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\001\002\000\034\002\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\037\ufffc\040\ufffc\042\ufffc\045\ufffc\046" +
    "\ufffc\047\ufffc\051\ufffc\052\ufffc\001\002\000\004\020\150" +
    "\001\002\000\034\002\ufff8\032\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\037\ufff8\040\ufff8\042\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\051\ufff8\052\ufff8\001\002\000\034\002\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\037\ufff9\040\ufff9\042\ufff9\045\ufff9" +
    "\046\ufff9\047\ufff9\051\ufff9\052\ufff9\001\002\000\004\042" +
    "\133\001\002\000\006\016\120\031\uffd0\001\002\000\024" +
    "\032\024\033\033\034\021\040\016\042\023\045\015\046" +
    "\035\051\017\052\030\001\002\000\034\002\ufffd\032\ufffd" +
    "\033\ufffd\034\ufffd\035\ufffd\037\ufffd\040\ufffd\042\ufffd\045" +
    "\ufffd\046\ufffd\047\ufffd\051\ufffd\052\ufffd\001\002\000\004" +
    "\002\000\001\002\000\034\002\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\037\ufff6\040\ufff6\042\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\051\ufff6\052\ufff6\001\002\000\034\002\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2\040\ufff2\042\ufff2" +
    "\045\ufff2\046\ufff2\047\ufff2\051\ufff2\052\ufff2\001\002\000" +
    "\026\032\024\033\033\034\021\040\016\042\023\045\015" +
    "\046\035\047\044\051\017\052\030\001\002\000\032\032" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\037\ufffa\040\ufffa\042\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\051\ufffa\052\ufffa\001\002\000" +
    "\016\013\055\020\046\025\047\041\051\042\023\044\050" +
    "\001\002\000\032\032\ufffb\033\ufffb\034\ufffb\035\ufffb\037" +
    "\ufffb\040\ufffb\042\ufffb\045\ufffb\046\ufffb\047\ufffb\051\ufffb" +
    "\052\ufffb\001\002\000\020\003\115\013\055\020\046\025" +
    "\047\041\051\042\023\044\050\001\002\000\004\041\113" +
    "\001\002\000\100\002\uffec\004\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\015\uffec\016\uffec\017\uffec\021\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\040\uffec\042\uffec\045\uffec\046\uffec\047\uffec\051\uffec\052" +
    "\uffec\001\002\000\100\002\uffef\004\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\015\uffef\016\uffef\017\uffef\021" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\042\uffef\045\uffef\046\uffef\047\uffef\051\uffef" +
    "\052\uffef\001\002\000\070\002\uffcc\004\074\006\072\007" +
    "\062\010\071\011\061\012\073\016\067\017\063\024\066" +
    "\025\060\026\065\027\070\030\064\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\037\uffcc\040\uffcc\042\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\051\uffcc\052\uffcc\001\002\000\100\002" +
    "\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\021\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\051\uffeb\052\uffeb\001\002\000\034" +
    "\002\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\037\uffc9\040" +
    "\uffc9\042\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9" +
    "\001\002\000\016\013\055\020\046\025\047\041\051\042" +
    "\023\044\050\001\002\000\100\002\uffed\004\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\015\uffed\016\uffed\017" +
    "\uffed\021\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\042\uffed\045\uffed\046\uffed\047\uffed" +
    "\051\uffed\052\uffed\001\002\000\100\002\uffe3\004\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\064\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\042\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\051\uffe3\052\uffe3\001\002\000\016\013\055\020\046" +
    "\025\047\041\051\042\023\044\050\001\002\000\016\013" +
    "\055\020\046\025\047\041\051\042\023\044\050\001\002" +
    "\000\016\013\055\020\046\025\047\041\051\042\023\044" +
    "\050\001\002\000\016\013\055\020\046\025\047\041\051" +
    "\042\023\044\050\001\002\000\016\013\055\020\046\025" +
    "\047\041\051\042\023\044\050\001\002\000\016\013\055" +
    "\020\046\025\047\041\051\042\023\044\050\001\002\000" +
    "\016\013\055\020\046\025\047\041\051\042\023\044\050" +
    "\001\002\000\004\016\102\001\002\000\016\013\055\020" +
    "\046\025\047\041\051\042\023\044\050\001\002\000\016" +
    "\013\055\020\046\025\047\041\051\042\023\044\050\001" +
    "\002\000\016\013\055\020\046\025\047\041\051\042\023" +
    "\044\050\001\002\000\016\013\055\020\046\025\047\041" +
    "\051\042\023\044\050\001\002\000\016\013\055\020\046" +
    "\025\047\041\051\042\023\044\050\001\002\000\100\002" +
    "\uffe0\004\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\021\uffe0\023\uffe0\024\066\025" +
    "\060\026\065\027\070\030\064\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0\045" +
    "\uffe0\046\uffe0\047\uffe0\051\uffe0\052\uffe0\001\002\000\100" +
    "\002\uffe4\004\074\006\072\007\062\010\071\011\061\012" +
    "\uffe4\015\uffe4\016\067\017\063\021\uffe4\023\uffe4\024\066" +
    "\025\060\026\065\027\070\030\064\031\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4" +
    "\045\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\001\002\000" +
    "\100\002\uffdf\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\015\uffdf\016\uffdf\017\uffdf\021\uffdf\023\uffdf\024" +
    "\066\025\060\026\065\027\070\030\064\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf\001\002" +
    "\000\100\002\uffdd\004\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\023\uffdd" +
    "\024\066\025\060\026\065\027\070\030\064\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\042\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd\052\uffdd\001" +
    "\002\000\100\002\uffe7\004\uffe7\006\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\064\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\042\uffe7\045\uffe7\046\uffe7\047\uffe7\051\uffe7\052\uffe7" +
    "\001\002\000\016\013\055\020\046\025\047\041\051\042" +
    "\023\044\050\001\002\000\100\002\uffe2\004\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\021\uffe2\023\uffe2\024\066\025\060\026\065\027\070" +
    "\030\064\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\042\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\051\uffe2\052\uffe2\001\002\000\100\002\uffea\004\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\015\uffea\016\uffea" +
    "\017\uffea\021\uffea\023\uffea\024\uffea\025\uffea\026\065\027" +
    "\070\030\064\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\042\uffea\045\uffea\046\uffea\047" +
    "\uffea\051\uffea\052\uffea\001\002\000\100\002\uffe8\004\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\064\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\045\uffe8\046\uffe8" +
    "\047\uffe8\051\uffe8\052\uffe8\001\002\000\100\002\uffe6\004" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\064\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\051\uffe6\052\uffe6\001\002\000\100\002\uffe1" +
    "\004\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\021\uffe1\023\uffe1\024\066\025\060" +
    "\026\065\027\070\030\064\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\051\uffe1\052\uffe1\001\002\000\100\002" +
    "\uffde\004\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde" +
    "\015\uffde\016\uffde\017\uffde\021\uffde\023\uffde\024\066\025" +
    "\060\026\065\027\070\030\064\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042\uffde\045" +
    "\uffde\046\uffde\047\uffde\051\uffde\052\uffde\001\002\000\100" +
    "\002\uffe5\004\074\006\072\007\062\010\071\011\uffe5\012" +
    "\uffe5\015\uffe5\016\067\017\063\021\uffe5\023\uffe5\024\066" +
    "\025\060\026\065\027\070\030\064\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5" +
    "\045\uffe5\046\uffe5\047\uffe5\051\uffe5\052\uffe5\001\002\000" +
    "\100\002\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\065\027\070\030\064\031\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042" +
    "\uffe9\045\uffe9\046\uffe9\047\uffe9\051\uffe9\052\uffe9\001\002" +
    "\000\100\002\uffee\004\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\015\uffee\016\uffee\017\uffee\021\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\042\uffee\045\uffee\046\uffee\047\uffee\051\uffee\052\uffee\001" +
    "\002\000\036\004\074\006\072\007\062\010\071\011\061" +
    "\012\073\016\067\017\063\021\117\024\066\025\060\026" +
    "\065\027\070\030\064\001\002\000\004\021\116\001\002" +
    "\000\100\002\uffdc\004\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\042\uffdc\045\uffdc\046\uffdc\047\uffdc\051\uffdc\052\uffdc\001" +
    "\002\000\100\002\ufff0\004\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\042\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0\052\ufff0" +
    "\001\002\000\020\013\055\020\046\022\124\025\047\041" +
    "\051\042\023\044\050\001\002\000\040\002\uffd8\023\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8\040" +
    "\uffd8\042\uffd8\045\uffd8\046\uffd8\047\uffd8\051\uffd8\052\uffd8" +
    "\001\002\000\072\002\uffd9\004\074\006\072\007\062\010" +
    "\071\011\061\012\073\016\067\017\063\023\uffd9\024\066" +
    "\025\060\026\065\027\070\030\064\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\037\uffd9\040\uffd9\042\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\051\uffd9\052\uffd9\001\002\000\036\002" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\037\uffd2" +
    "\040\uffd2\042\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\052" +
    "\uffd2\001\002\000\022\013\055\020\046\022\124\023\125" +
    "\025\047\041\051\042\023\044\050\001\002\000\040\002" +
    "\uffd6\023\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\037\uffd6\040\uffd6\042\uffd6\045\uffd6\046\uffd6\047\uffd6\051" +
    "\uffd6\052\uffd6\001\002\000\040\002\uffda\023\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\037\uffda\040\uffda\042" +
    "\uffda\045\uffda\046\uffda\047\uffda\051\uffda\052\uffda\001\002" +
    "\000\006\023\131\031\130\001\002\000\020\013\055\020" +
    "\046\022\124\025\047\041\051\042\023\044\050\001\002" +
    "\000\040\002\uffd7\023\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\037\uffd7\040\uffd7\042\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\051\uffd7\052\uffd7\001\002\000\040\002\uffdb\023" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\037\uffdb" +
    "\040\uffdb\042\uffdb\045\uffdb\046\uffdb\047\uffdb\051\uffdb\052" +
    "\uffdb\001\002\000\042\002\uffcf\014\145\016\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\037\uffcf\040\uffcf\042" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\051\uffcf\052\uffcf\001\002" +
    "\000\004\016\120\001\002\000\004\031\136\001\002\000" +
    "\016\013\055\020\046\025\047\041\051\042\023\044\050" +
    "\001\002\000\004\031\140\001\002\000\016\013\055\020" +
    "\046\025\047\041\051\042\023\044\050\001\002\000\004" +
    "\032\142\001\002\000\024\032\024\033\033\034\021\040" +
    "\016\042\023\045\015\046\035\051\017\052\030\001\002" +
    "\000\026\032\024\033\033\034\021\037\144\040\016\042" +
    "\023\045\015\046\035\051\017\052\030\001\002\000\034" +
    "\002\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\037\uffcb\040" +
    "\uffcb\042\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb\052\uffcb" +
    "\001\002\000\016\013\055\020\046\025\047\041\051\042" +
    "\023\044\050\001\002\000\036\004\074\006\072\007\062" +
    "\010\071\011\061\012\073\015\147\016\067\017\063\024" +
    "\066\025\060\026\065\027\070\030\064\001\002\000\100" +
    "\002\uffce\004\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012" +
    "\uffce\015\uffce\016\uffce\017\uffce\021\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\042\uffce" +
    "\045\uffce\046\uffce\047\uffce\051\uffce\052\uffce\001\002\000" +
    "\020\013\055\020\046\025\047\041\051\042\023\043\153" +
    "\044\050\001\002\000\040\004\074\006\072\007\062\010" +
    "\071\011\061\012\073\016\067\017\063\021\uffbc\024\066" +
    "\025\060\026\065\027\070\030\064\031\uffbc\001\002\000" +
    "\006\021\155\031\154\001\002\000\006\021\uffbd\031\uffbd" +
    "\001\002\000\020\013\055\020\046\025\047\041\051\042" +
    "\023\043\157\044\050\001\002\000\034\002\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\037\uffc0\040\uffc0\042\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\051\uffc0\052\uffc0\001\002\000\040" +
    "\004\074\006\072\007\062\010\071\011\061\012\073\016" +
    "\067\017\063\021\uffbe\024\066\025\060\026\065\027\070" +
    "\030\064\031\uffbe\001\002\000\006\021\uffbf\031\uffbf\001" +
    "\002\000\026\032\024\033\033\034\021\037\161\040\016" +
    "\042\023\045\015\046\035\051\017\052\030\001\002\000" +
    "\034\002\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd" +
    "\040\uffcd\042\uffcd\045\uffcd\046\uffcd\047\uffcd\051\uffcd\052" +
    "\uffcd\001\002\000\016\013\055\020\046\025\047\041\051" +
    "\042\023\044\050\001\002\000\006\021\166\031\165\001" +
    "\002\000\040\004\074\006\072\007\062\010\071\011\061" +
    "\012\073\016\067\017\063\021\uffba\024\066\025\060\026" +
    "\065\027\070\030\064\031\uffba\001\002\000\016\013\055" +
    "\020\046\025\047\041\051\042\023\044\050\001\002\000" +
    "\100\002\uffb9\004\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\015\uffb9\016\uffb9\017\uffb9\021\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\042" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\001\002" +
    "\000\040\004\074\006\072\007\062\010\071\011\061\012" +
    "\073\016\067\017\063\021\uffbb\024\066\025\060\026\065" +
    "\027\070\030\064\031\uffbb\001\002\000\036\004\074\006" +
    "\072\007\062\010\071\011\061\012\073\016\067\017\063" +
    "\024\066\025\060\026\065\027\070\030\064\036\176\001" +
    "\002\000\006\035\173\037\uffc5\001\002\000\004\037\175" +
    "\001\002\000\024\032\024\033\033\034\021\040\016\042" +
    "\023\045\015\046\035\051\017\052\030\001\002\000\026" +
    "\032\024\033\033\034\021\037\uffc6\040\016\042\023\045" +
    "\015\046\035\051\017\052\030\001\002\000\034\002\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\037\uffc7\040\uffc7\042" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\051\uffc7\052\uffc7\001\002" +
    "\000\024\032\024\033\033\034\021\040\016\042\023\045" +
    "\015\046\035\051\017\052\030\001\002\000\030\032\024" +
    "\033\033\034\021\035\173\037\uffc5\040\016\042\023\045" +
    "\015\046\035\051\017\052\030\001\002\000\004\037\201" +
    "\001\002\000\034\002\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\037\uffc8\040\uffc8\042\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\051\uffc8\052\uffc8\001\002\000\004\020\203\001\002\000" +
    "\016\013\055\020\046\025\047\041\051\042\023\044\050" +
    "\001\002\000\006\021\205\031\165\001\002\000\024\032" +
    "\024\033\033\034\021\040\016\042\023\045\015\046\035" +
    "\051\017\052\030\001\002\000\026\032\024\033\033\034" +
    "\021\037\207\040\016\042\023\045\015\046\035\051\017" +
    "\052\030\001\002\000\026\032\uffc2\033\uffc2\034\uffc2\040" +
    "\uffc2\042\uffc2\045\uffc2\046\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\001\002\000\066\002\uffc1\004\074\006\072\007\062\010" +
    "\071\011\061\012\073\016\067\017\063\024\066\025\060" +
    "\026\065\027\070\030\064\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\037\uffc1\040\uffc1\042\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\051\uffc1\052\uffc1\001\002\000\040\002\uffd5\016\uffd5\031" +
    "\213\032\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5" +
    "\042\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5\052\uffd5\001" +
    "\002\000\040\002\uffd0\016\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\037\uffd0\040\uffd0\042\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\051\uffd0\052\uffd0\001\002\000\004\042\133" +
    "\001\002\000\040\002\uffd1\016\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\037\uffd1\040\uffd1\042\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\051\uffd1\052\uffd1\001\002\000\004\032" +
    "\216\001\002\000\024\032\024\033\033\034\021\040\016" +
    "\042\023\045\015\046\035\051\017\052\030\001\002\000" +
    "\026\032\024\033\033\034\021\037\220\040\016\042\023" +
    "\045\015\046\035\051\017\052\030\001\002\000\034\002" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\037\uffca\040\uffca" +
    "\042\uffca\045\uffca\046\uffca\047\uffca\051\uffca\052\uffca\001" +
    "\002\000\020\013\055\020\046\022\124\025\047\041\051" +
    "\042\023\044\050\001\002\000\036\002\uffd4\031\130\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\040\uffd4\042\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052\uffd4\001\002\000" +
    "\020\013\055\020\046\022\124\025\047\041\051\042\023" +
    "\044\050\001\002\000\036\002\uffd3\031\130\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\037\uffd3\040\uffd3\042\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\051\uffd3\052\uffd3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\006\030\003\032\004\001\001\000\044\003" +
    "\035\005\021\007\011\010\013\011\012\014\030\016\036" +
    "\020\026\021\033\022\007\023\040\024\031\026\037\034" +
    "\025\035\010\037\024\040\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\051\017\214\021\055\037\052\001" +
    "\001\000\006\011\210\021\211\001\001\000\010\002\207" +
    "\021\055\037\052\001\001\000\002\001\001\000\010\002" +
    "\167\021\055\037\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\003\035\005\021\007\011\010\013\011" +
    "\012\014\030\015\157\016\042\020\026\021\033\022\007" +
    "\023\040\024\031\026\037\035\010\037\024\040\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\134\021\133\001\001\000\002\001\001\000\044" +
    "\003\035\005\021\007\011\010\013\011\012\014\030\015" +
    "\041\016\042\020\026\021\033\022\007\023\040\024\031" +
    "\026\037\035\010\037\024\040\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\035\005\021\007\011\010\013\011\012\014" +
    "\030\016\044\020\026\021\033\022\007\023\040\024\031" +
    "\026\037\035\010\037\024\040\006\001\001\000\002\001" +
    "\001\000\012\002\051\017\053\021\055\037\052\001\001" +
    "\000\002\001\001\000\010\002\113\021\055\037\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\056\021\055\037\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\111\021\055\037\052\001" +
    "\001\000\010\002\110\021\055\037\052\001\001\000\010" +
    "\002\107\021\055\037\052\001\001\000\010\002\106\021" +
    "\055\037\052\001\001\000\010\002\105\021\055\037\052" +
    "\001\001\000\010\002\104\021\055\037\052\001\001\000" +
    "\010\002\103\021\055\037\052\001\001\000\002\001\001" +
    "\000\010\002\100\021\055\037\052\001\001\000\010\002" +
    "\077\021\055\037\052\001\001\000\010\002\076\021\055" +
    "\037\052\001\001\000\010\002\075\021\055\037\052\001" +
    "\001\000\010\002\074\021\055\037\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\102\021\055\037\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\121\006\120\013\122\021\055\037" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\002\121\006\120\012\126\013\125\021" +
    "\055\037\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\121\006\120\013\131\021" +
    "\055\037\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\051\017\136\021\055\037\052\001\001\000\002" +
    "\001\001\000\012\002\051\017\140\021\055\037\052\001" +
    "\001\000\002\001\001\000\044\003\035\005\021\007\011" +
    "\010\013\011\012\014\030\015\142\016\042\020\026\021" +
    "\033\022\007\023\040\024\031\026\037\035\010\037\024" +
    "\040\006\001\001\000\042\003\035\005\021\007\011\010" +
    "\013\011\012\014\030\016\044\020\026\021\033\022\007" +
    "\023\040\024\031\026\037\035\010\037\024\040\006\001" +
    "\001\000\002\001\001\000\010\002\145\021\055\037\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\150\021\055\027\151\037\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\155\021" +
    "\055\037\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\035\005\021\007\011\010" +
    "\013\011\012\014\030\016\044\020\026\021\033\022\007" +
    "\023\040\024\031\026\037\035\010\037\024\040\006\001" +
    "\001\000\002\001\001\000\012\002\163\021\055\036\162" +
    "\037\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\166\021\055\037\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\171\001" +
    "\001\000\002\001\001\000\044\003\035\005\021\007\011" +
    "\010\013\011\012\014\030\015\173\016\042\020\026\021" +
    "\033\022\007\023\040\024\031\026\037\035\010\037\024" +
    "\040\006\001\001\000\042\003\035\005\021\007\011\010" +
    "\013\011\012\014\030\016\044\020\026\021\033\022\007" +
    "\023\040\024\031\026\037\035\010\037\024\040\006\001" +
    "\001\000\002\001\001\000\044\003\035\005\021\007\011" +
    "\010\013\011\012\014\030\015\176\016\042\020\026\021" +
    "\033\022\007\023\040\024\031\026\037\035\010\037\024" +
    "\040\006\001\001\000\044\003\035\005\021\007\011\010" +
    "\013\011\012\014\030\016\044\020\026\021\033\022\007" +
    "\023\040\024\031\025\177\026\037\035\010\037\024\040" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\163\021\055\036\203\037\052\001" +
    "\001\000\002\001\001\000\044\003\035\005\021\007\011" +
    "\010\013\011\012\014\030\015\205\016\042\020\026\021" +
    "\033\022\007\023\040\024\031\026\037\035\010\037\024" +
    "\040\006\001\001\000\042\003\035\005\021\007\011\010" +
    "\013\011\012\014\030\016\044\020\026\021\033\022\007" +
    "\023\040\024\031\026\037\035\010\037\024\040\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\003\035\005\021\007\011" +
    "\010\013\011\012\014\030\015\216\016\042\020\026\021" +
    "\033\022\007\023\040\024\031\026\037\035\010\037\024" +
    "\040\006\001\001\000\042\003\035\005\021\007\011\010" +
    "\013\011\012\014\030\016\044\020\026\021\033\022\007" +
    "\023\040\024\031\026\037\035\010\037\024\040\006\001" +
    "\001\000\002\001\001\000\016\002\121\006\120\012\221" +
    "\013\125\021\055\037\052\001\001\000\002\001\001\000" +
    "\016\002\121\006\120\012\223\013\125\021\055\037\052" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= func_list stmt 
            { parser.Tree.reduce(2,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration ::= local_var_init 
            { parser.Tree.reduce(1,"declaration",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration ::= local_var_list 
            { parser.Tree.reduce(1,"declaration",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= global_var_init 
            { parser.Tree.reduce(1,"declaration",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= assignment 
            { parser.Tree.reduce(1,"declaration",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt_list ::= stmt_list stmt 
            { parser.Tree.reduce(2,"stmt_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt_list ::= stmt 
            { parser.Tree.reduce(1,"stmt_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= if_block 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= for_loop 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= print_func 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= ret 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= declaration 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= func_call 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= while_loop 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= repeat_loop 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= block 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= RO exp RC 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= NUMBER 
            { parser.Tree.reduce(1,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= MINUS NUMBER 
            { parser.Tree.reduce(2,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= var 
            { parser.Tree.reduce(1,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= NIL 
            { parser.Tree.reduce(1,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= func_call 
            { parser.Tree.reduce(1,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= exp PLUS exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp MINUS exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp STAR exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp DIV exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp HAT exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp AND exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp OR exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= NOT exp 
            { parser.Tree.reduce(2,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp EQ EQ exp 
            { parser.Tree.reduce(4,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp NOTEQ exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp MIN exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp MAJ exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp MIN_EQ exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp MAJ_EQ exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= RO error RC 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ass_list ::= ass_list CM ass_exp 
            { parser.Tree.reduce(3,"ass_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ass_list ::= ass_exp 
            { parser.Tree.reduce(1,"ass_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ass_exp ::= exp 
            { parser.Tree.reduce(1,"ass_exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ass_exp ::= array_dec 
            { parser.Tree.reduce(1,"ass_exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // array_dec ::= BO ass_list BC 
            { parser.Tree.reduce(3,"array_dec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // array_dec ::= BO BC 
            { parser.Tree.reduce(2,"array_dec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // local_var_list ::= LOCAL var_list 
            { parser.Tree.reduce(2,"local_var_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // local_var_init ::= local_var_list EQ ass_list 
            { parser.Tree.reduce(3,"local_var_init",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var_init",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // global_var_init ::= var_list EQ ass_list 
            { parser.Tree.reduce(3,"global_var_init",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_var_init",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assignment ::= var EQ ass_exp 
            { parser.Tree.reduce(3,"assignment",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var_list ::= var_list CM var 
            { parser.Tree.reduce(3,"var_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // var_list ::= var 
            { parser.Tree.reduce(1,"var_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var ::= ID 
            { parser.Tree.reduce(1,"var",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var ::= ID SO exp SC 
            { parser.Tree.reduce(4,"var",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // block ::= DO stmt_list END 
            { parser.Tree.reduce(3,"block",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // loop_cond ::= exp 
            { parser.Tree.reduce(1,"loop_cond",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_cond",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // for_loop ::= FOR assignment CM loop_cond CM loop_cond DO stmt_list END 
            { parser.Tree.reduce(9,"for_loop",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // while_loop ::= WHILE loop_cond DO stmt_list END 
            { parser.Tree.reduce(5,"while_loop",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_loop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // repeat_loop ::= REPEAT stmt_list UNTIL loop_cond 
            { parser.Tree.reduce(4,"repeat_loop",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_loop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if_block ::= IF exp THEN stmt_list else_block END 
            { parser.Tree.reduce(6,"if_block",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if_block ::= IF error else_block END 
            { parser.Tree.reduce(4,"if_block",0);
              Object RESULT =null;
		 System.out.println("error");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // else_block ::= ELSE stmt_list 
            { parser.Tree.reduce(2,"else_block",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else_block ::= 
            { parser.Tree.reduce(0,"else_block",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // func_list ::= 
            { parser.Tree.reduce(0,"func_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // func_list ::= func_list function_decl 
            { parser.Tree.reduce(2,"func_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // function_decl ::= FUNCTION ID RO func_param_list RC stmt_list END 
            { parser.Tree.reduce(7,"function_decl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ret ::= RETURN exp 
            { parser.Tree.reduce(2,"ret",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // print_func ::= PRINT RO print_func_args RC 
            { parser.Tree.reduce(4,"print_func",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // print_func_args ::= print_func_args CM STRING 
            { parser.Tree.reduce(3,"print_func_args",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func_args",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // print_func_args ::= print_func_args CM exp 
            { parser.Tree.reduce(3,"print_func_args",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func_args",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // print_func_args ::= STRING 
            { parser.Tree.reduce(1,"print_func_args",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func_args",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // print_func_args ::= exp 
            { parser.Tree.reduce(1,"print_func_args",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func_args",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // func_param_list ::= func_param_list CM exp 
            { parser.Tree.reduce(3,"func_param_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_param_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // func_param_list ::= exp 
            { parser.Tree.reduce(1,"func_param_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_param_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // func_call ::= ID RO func_param_list RC 
            { parser.Tree.reduce(4,"func_call",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
