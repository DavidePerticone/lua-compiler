
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;
import java.util.Map.*;
import java.util.ArrayList;
import java.util.regex.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\041\002\000\002\027" +
    "\005\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\013\004\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\040\005" +
    "\000\002\040\003\000\002\040\004\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\005\000\002\040\004" +
    "\000\002\040\006\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\011\005\000\002\011\003\000\002\037" +
    "\003\000\002\037\003\000\002\005\005\000\002\005\004" +
    "\000\002\007\004\000\002\006\005\000\002\002\005\000" +
    "\002\016\005\000\002\010\005\000\002\010\003\000\002" +
    "\036\003\000\002\036\006\000\002\004\005\000\002\015" +
    "\003\000\002\012\013\000\002\017\007\000\002\020\006" +
    "\000\002\021\010\000\002\021\006\000\002\022\004\000" +
    "\002\022\002\000\002\025\002\000\002\025\004\000\002" +
    "\031\011\000\002\023\004\000\002\032\006\000\002\024" +
    "\005\000\002\024\005\000\002\024\003\000\002\024\003" +
    "\000\002\033\005\000\002\033\003\000\002\034\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\026\032\uffc3\033\uffc3\034\uffc3\040\uffc3\043" +
    "\uffc3\044\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\001\002" +
    "\000\026\032\000\033\000\034\000\040\000\043\000\044" +
    "\000\046\011\047\000\050\000\051\000\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\024\032" +
    "\107\033\116\034\104\040\102\043\100\044\120\047\103" +
    "\050\112\051\022\001\002\000\026\032\uffc2\033\uffc2\034" +
    "\uffc2\040\uffc2\043\uffc2\044\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\001\002\000\004\051\012\001\002\000\004\020" +
    "\013\001\002\000\016\013\024\020\014\025\015\042\017" +
    "\051\022\052\020\001\002\000\020\003\222\013\024\020" +
    "\014\025\015\042\017\051\022\052\020\001\002\000\004" +
    "\052\220\001\002\000\006\021\072\031\067\001\002\000" +
    "\100\002\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\015\uffeb\016\uffeb\017\uffeb\021\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\047\uffeb\050\uffeb\051\uffeb\001\002" +
    "\000\100\002\uffee\004\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\015\uffee\016\uffee\017\uffee\021\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\043\uffee\044\uffee\045\uffee\047\uffee\050\uffee\051\uffee\001" +
    "\002\000\040\004\043\006\041\007\031\010\040\011\027" +
    "\012\042\016\035\017\032\021\uffb9\024\036\025\030\026" +
    "\034\027\037\030\033\031\uffb9\001\002\000\104\002\uffce" +
    "\004\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\014" +
    "\063\015\uffce\016\uffce\017\uffce\020\062\021\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\043\uffce\044\uffce\045\uffce\047\uffce\050\uffce\051\uffce\001" +
    "\002\000\100\002\uffea\004\uffea\006\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\015\uffea\016\uffea\017\uffea\021\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040" +
    "\uffea\043\uffea\044\uffea\045\uffea\047\uffea\050\uffea\051\uffea" +
    "\001\002\000\016\013\024\020\014\025\015\042\017\051" +
    "\022\052\020\001\002\000\100\002\uffec\004\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\015\uffec\016\uffec\017" +
    "\uffec\021\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\043\uffec\044\uffec\045\uffec\047\uffec" +
    "\050\uffec\051\uffec\001\002\000\100\002\uffe2\004\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\033\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\043\uffe2\044\uffe2\045\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\001\002\000\016\013\024\020\014" +
    "\025\015\042\017\051\022\052\020\001\002\000\016\013" +
    "\024\020\014\025\015\042\017\051\022\052\020\001\002" +
    "\000\016\013\024\020\014\025\015\042\017\051\022\052" +
    "\020\001\002\000\016\013\024\020\014\025\015\042\017" +
    "\051\022\052\020\001\002\000\016\013\024\020\014\025" +
    "\015\042\017\051\022\052\020\001\002\000\016\013\024" +
    "\020\014\025\015\042\017\051\022\052\020\001\002\000" +
    "\004\016\052\001\002\000\016\013\024\020\014\025\015" +
    "\042\017\051\022\052\020\001\002\000\016\013\024\020" +
    "\014\025\015\042\017\051\022\052\020\001\002\000\016" +
    "\013\024\020\014\025\015\042\017\051\022\052\020\001" +
    "\002\000\016\013\024\020\014\025\015\042\017\051\022" +
    "\052\020\001\002\000\016\013\024\020\014\025\015\042" +
    "\017\051\022\052\020\001\002\000\016\013\024\020\014" +
    "\025\015\042\017\051\022\052\020\001\002\000\100\002" +
    "\uffdf\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\021\uffdf\023\uffdf\024\036\025" +
    "\030\026\034\027\037\030\033\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\047\uffdf\050\uffdf\051\uffdf\001\002\000\100" +
    "\002\uffe3\004\043\006\041\007\031\010\040\011\027\012" +
    "\uffe3\015\uffe3\016\035\017\032\021\uffe3\023\uffe3\024\036" +
    "\025\030\026\034\027\037\030\033\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\047\uffe3\050\uffe3\051\uffe3\001\002\000" +
    "\100\002\uffde\004\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\015\uffde\016\uffde\017\uffde\021\uffde\023\uffde\024" +
    "\036\025\030\026\034\027\037\030\033\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\043" +
    "\uffde\044\uffde\045\uffde\047\uffde\050\uffde\051\uffde\001\002" +
    "\000\100\002\uffdc\004\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc\023\uffdc" +
    "\024\036\025\030\026\034\027\037\030\033\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\051\uffdc\001" +
    "\002\000\100\002\uffe6\004\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\033\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\001\002\000\100\002\uffe9\004\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\034\027\037\030\033\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\043\uffe9\044\uffe9\045\uffe9\047\uffe9\050\uffe9\051" +
    "\uffe9\001\002\000\016\013\024\020\014\025\015\042\017" +
    "\051\022\052\020\001\002\000\100\002\uffe1\004\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\021\uffe1\023\uffe1\024\036\025\030\026\034\027" +
    "\037\030\033\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\043\uffe1\044\uffe1\045\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\001\002\000\100\002\uffe7\004\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\033\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\001\002\000\100\002\uffe5\004" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\021\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\033\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\001\002\000\100\002\uffe0" +
    "\004\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\021\uffe0\023\uffe0\024\036\025\030" +
    "\026\034\027\037\030\033\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\047\uffe0\050\uffe0\051\uffe0\001\002\000\100\002" +
    "\uffdd\004\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\021\uffdd\023\uffdd\024\036\025" +
    "\030\026\034\027\037\030\033\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\047\uffdd\050\uffdd\051\uffdd\001\002\000\100" +
    "\002\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\034\027\037\030\033\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\043\uffe8" +
    "\044\uffe8\045\uffe8\047\uffe8\050\uffe8\051\uffe8\001\002\000" +
    "\100\002\uffe4\004\043\006\041\007\031\010\040\011\uffe4" +
    "\012\uffe4\015\uffe4\016\035\017\032\021\uffe4\023\uffe4\024" +
    "\036\025\030\026\034\027\037\030\033\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\047\uffe4\050\uffe4\051\uffe4\001\002" +
    "\000\016\013\024\020\014\025\015\042\017\051\022\052" +
    "\020\001\002\000\016\013\024\020\014\025\015\042\017" +
    "\051\022\052\020\001\002\000\036\004\043\006\041\007" +
    "\031\010\040\011\027\012\042\015\065\016\035\017\032" +
    "\024\036\025\030\026\034\027\037\030\033\001\002\000" +
    "\100\002\uffcd\004\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\012\uffcd\015\uffcd\016\uffcd\017\uffcd\021\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd\051\uffcd\001\002" +
    "\000\006\021\070\031\067\001\002\000\016\013\024\020" +
    "\014\025\015\042\017\051\022\052\020\001\002\000\100" +
    "\002\uffb8\004\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\021\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\047\uffb8\050\uffb8\051\uffb8\001\002\000" +
    "\040\004\043\006\041\007\031\010\040\011\027\012\042" +
    "\016\035\017\032\021\uffba\024\036\025\030\026\034\027" +
    "\037\030\033\031\uffba\001\002\000\024\032\107\033\116" +
    "\034\104\040\102\043\100\044\120\047\103\050\112\051" +
    "\022\001\002\000\034\002\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\037\ufff4\040\ufff4\043\ufff4\044\ufff4\045\ufff4\047" +
    "\ufff4\050\ufff4\051\ufff4\001\002\000\034\002\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\037\ufff2\040\ufff2\043\ufff2\044" +
    "\ufff2\045\ufff2\047\ufff2\050\ufff2\051\ufff2\001\002\000\034" +
    "\002\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\037\ufff6\040" +
    "\ufff6\043\ufff6\044\ufff6\045\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\001\002\000\034\002\ufffe\032\ufffe\033\ufffe\034\ufffe\035" +
    "\ufffe\037\ufffe\040\ufffe\043\ufffe\044\ufffe\045\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\001\002\000\006\016\216\031\206\001" +
    "\002\000\016\013\024\020\014\025\015\042\017\051\022" +
    "\052\020\001\002\000\036\002\ufffd\016\210\032\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\037\ufffd\040\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\047\ufffd\050\ufffd\051\ufffd\001\002\000\004\051" +
    "\131\001\002\000\016\013\024\020\014\025\015\042\017" +
    "\051\022\052\020\001\002\000\020\003\172\013\024\020" +
    "\014\025\015\042\017\051\022\052\020\001\002\000\034" +
    "\002\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0\040" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\047\ufff0\050\ufff0\051\ufff0" +
    "\001\002\000\026\032\107\033\116\034\104\037\170\040" +
    "\102\043\100\044\120\047\103\050\112\051\022\001\002" +
    "\000\024\032\107\033\116\034\104\040\102\043\100\044" +
    "\120\047\103\050\112\051\022\001\002\000\034\002\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\ufff3\037\ufff3\040\ufff3\043" +
    "\ufff3\044\ufff3\045\ufff3\047\ufff3\050\ufff3\051\ufff3\001\002" +
    "\000\034\002\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\037" +
    "\ufffb\040\ufffb\043\ufffb\044\ufffb\045\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\001\002\000\004\020\156\001\002\000\034\002" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\037\ufff7\040\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\047\ufff7\050\ufff7\051\ufff7\001" +
    "\002\000\034\002\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\037\ufff8\040\ufff8\043\ufff8\044\ufff8\045\ufff8\047\ufff8\050" +
    "\ufff8\051\ufff8\001\002\000\006\016\143\031\uffcf\001\002" +
    "\000\004\051\131\001\002\000\034\002\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\037\ufffc\040\ufffc\043\ufffc\044\ufffc" +
    "\045\ufffc\047\ufffc\050\ufffc\051\ufffc\001\002\000\024\032" +
    "\107\033\116\034\104\040\102\043\100\044\120\047\103" +
    "\050\112\051\022\001\002\000\034\002\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\037\ufff9\040\ufff9\043\ufff9\044\ufff9" +
    "\045\ufff9\047\ufff9\050\ufff9\051\ufff9\001\002\000\034\002" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\037\ufff5\040\ufff5" +
    "\043\ufff5\044\ufff5\045\ufff5\047\ufff5\050\ufff5\051\ufff5\001" +
    "\002\000\034\002\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\037\ufff1\040\ufff1\043\ufff1\044\ufff1\045\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\001\002\000\026\032\107\033\116\034\104" +
    "\040\102\043\100\044\120\045\125\047\103\050\112\051" +
    "\022\001\002\000\016\013\024\020\014\025\015\042\017" +
    "\051\022\052\020\001\002\000\034\002\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\037\ufffa\040\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\047\ufffa\050\ufffa\051\ufffa\001\002\000\070\002" +
    "\uffcb\004\043\006\041\007\031\010\040\011\027\012\042" +
    "\016\035\017\032\024\036\025\030\026\034\027\037\030" +
    "\033\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\037\uffcb" +
    "\040\uffcb\043\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\001\002\000\034\002\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\037\uffc8\040\uffc8\043\uffc8\044\uffc8\045\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\001\002\000\042\002\uffce\014\063" +
    "\016\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\037" +
    "\uffce\040\uffce\043\uffce\044\uffce\045\uffce\047\uffce\050\uffce" +
    "\051\uffce\001\002\000\004\016\143\001\002\000\004\031" +
    "\134\001\002\000\016\013\024\020\014\025\015\042\017" +
    "\051\022\052\020\001\002\000\004\031\136\001\002\000" +
    "\016\013\024\020\014\025\015\042\017\051\022\052\020" +
    "\001\002\000\004\032\140\001\002\000\024\032\107\033" +
    "\116\034\104\040\102\043\100\044\120\047\103\050\112" +
    "\051\022\001\002\000\026\032\107\033\116\034\104\037" +
    "\142\040\102\043\100\044\120\047\103\050\112\051\022" +
    "\001\002\000\034\002\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\037\uffca\040\uffca\043\uffca\044\uffca\045\uffca\047\uffca" +
    "\050\uffca\051\uffca\001\002\000\020\013\024\020\014\022" +
    "\147\025\015\042\017\051\022\052\020\001\002\000\040" +
    "\002\uffd7\023\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\037\uffd7\040\uffd7\043\uffd7\044\uffd7\045\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\001\002\000\072\002\uffd8\004\043\006" +
    "\041\007\031\010\040\011\027\012\042\016\035\017\032" +
    "\023\uffd8\024\036\025\030\026\034\027\037\030\033\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\047\uffd8\050\uffd8\051\uffd8\001" +
    "\002\000\036\002\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\037\uffd1\040\uffd1\043\uffd1\044\uffd1\045\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\001\002\000\022\013\024\020\014" +
    "\022\147\023\150\025\015\042\017\051\022\052\020\001" +
    "\002\000\040\002\uffd5\023\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\037\uffd5\040\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\001\002\000\040\002\uffd9" +
    "\023\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037" +
    "\uffd9\040\uffd9\043\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\001\002\000\006\023\154\031\153\001\002\000" +
    "\020\013\024\020\014\022\147\025\015\042\017\051\022" +
    "\052\020\001\002\000\040\002\uffd6\023\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6\040\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\047\uffd6\050\uffd6\051\uffd6\001\002\000" +
    "\040\002\uffda\023\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\037\uffda\040\uffda\043\uffda\044\uffda\045\uffda\047" +
    "\uffda\050\uffda\051\uffda\001\002\000\020\013\024\020\014" +
    "\025\015\041\161\042\017\051\022\052\020\001\002\000" +
    "\040\004\043\006\041\007\031\010\040\011\027\012\042" +
    "\016\035\017\032\021\uffbb\024\036\025\030\026\034\027" +
    "\037\030\033\031\uffbb\001\002\000\006\021\163\031\162" +
    "\001\002\000\006\021\uffbc\031\uffbc\001\002\000\020\013" +
    "\024\020\014\025\015\041\165\042\017\051\022\052\020" +
    "\001\002\000\034\002\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\037\uffbf\040\uffbf\043\uffbf\044\uffbf\045\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\001\002\000\040\004\043\006\041\007" +
    "\031\010\040\011\027\012\042\016\035\017\032\021\uffbd" +
    "\024\036\025\030\026\034\027\037\030\033\031\uffbd\001" +
    "\002\000\006\021\uffbe\031\uffbe\001\002\000\026\032\107" +
    "\033\116\034\104\037\167\040\102\043\100\044\120\047" +
    "\103\050\112\051\022\001\002\000\034\002\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\037\uffcc\040\uffcc\043\uffcc\044" +
    "\uffcc\045\uffcc\047\uffcc\050\uffcc\051\uffcc\001\002\000\026" +
    "\032\uffc1\033\uffc1\034\uffc1\040\uffc1\043\uffc1\044\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\001\002\000\036\004\043" +
    "\006\041\007\031\010\040\011\027\012\042\016\035\017" +
    "\032\024\036\025\030\026\034\027\037\030\033\036\177" +
    "\001\002\000\006\035\174\037\uffc4\001\002\000\004\037" +
    "\176\001\002\000\024\032\107\033\116\034\104\040\102" +
    "\043\100\044\120\047\103\050\112\051\022\001\002\000" +
    "\026\032\107\033\116\034\104\037\uffc5\040\102\043\100" +
    "\044\120\047\103\050\112\051\022\001\002\000\034\002" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6\040\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\051\uffc6\001" +
    "\002\000\024\032\107\033\116\034\104\040\102\043\100" +
    "\044\120\047\103\050\112\051\022\001\002\000\030\032" +
    "\107\033\116\034\104\035\174\037\uffc4\040\102\043\100" +
    "\044\120\047\103\050\112\051\022\001\002\000\004\037" +
    "\202\001\002\000\034\002\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\037\uffc7\040\uffc7\043\uffc7\044\uffc7\045\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\001\002\000\066\002\uffc0\004\043" +
    "\006\041\007\031\010\040\011\027\012\042\016\035\017" +
    "\032\024\036\025\030\026\034\027\037\030\033\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\037\uffc0\040\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\047\uffc0\050\uffc0\051\uffc0\001\002\000\040" +
    "\002\uffd4\016\uffd4\031\206\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\037\uffd4\040\uffd4\043\uffd4\044\uffd4\045\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\001\002\000\040\002\uffcf\016\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\037\uffcf\040\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\051\uffcf\001" +
    "\002\000\004\051\131\001\002\000\040\002\uffd0\016\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\040" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\001\002\000\020\013\024\020\014\022\147\025\015\042" +
    "\017\051\022\052\020\001\002\000\036\002\uffd3\031\153" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\037\uffd3\040\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\047\uffd3\050\uffd3\051\uffd3\001\002" +
    "\000\004\032\213\001\002\000\024\032\107\033\116\034" +
    "\104\040\102\043\100\044\120\047\103\050\112\051\022" +
    "\001\002\000\026\032\107\033\116\034\104\037\215\040" +
    "\102\043\100\044\120\047\103\050\112\051\022\001\002" +
    "\000\034\002\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\037" +
    "\uffc9\040\uffc9\043\uffc9\044\uffc9\045\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\001\002\000\020\013\024\020\014\022\147\025" +
    "\015\042\017\051\022\052\020\001\002\000\036\002\uffd2" +
    "\031\153\032\uffd2\033\uffd2\034\uffd2\035\uffd2\037\uffd2\040" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\001\002\000\100\002\uffed\004\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\015\uffed\016\uffed\017\uffed\021\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\043\uffed\044\uffed\045\uffed\047\uffed\050\uffed\051" +
    "\uffed\001\002\000\036\004\043\006\041\007\031\010\040" +
    "\011\027\012\042\016\035\017\032\021\224\024\036\025" +
    "\030\026\034\027\037\030\033\001\002\000\004\021\223" +
    "\001\002\000\100\002\uffdb\004\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\043\uffdb\044\uffdb\045\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\001\002\000\100\002\uffef\004\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\015\uffef\016\uffef\017\uffef\021" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\043\uffef\044\uffef\045\uffef\047\uffef\050\uffef" +
    "\051\uffef\001\002\000\026\002\uffff\032\107\033\116\034" +
    "\104\040\102\043\100\044\120\047\103\050\112\051\022" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\025\003\027\004\001\001\000\006\031" +
    "\007\041\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\002\116\004\104\006\075\007\100\010\076\012" +
    "\112\013\224\014\120\016\110\017\073\020\122\021\113" +
    "\023\121\032\074\034\107\035\072\036\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\033\015\034\022\036\024\040\020\001\001\000\010\034" +
    "\022\036\024\040\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\034\022" +
    "\036\024\040\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\034\022\036\024\040\060\001\001\000\010" +
    "\034\022\036\024\040\057\001\001\000\010\034\022\036" +
    "\024\040\056\001\001\000\010\034\022\036\024\040\055" +
    "\001\001\000\010\034\022\036\024\040\054\001\001\000" +
    "\010\034\022\036\024\040\053\001\001\000\002\001\001" +
    "\000\010\034\022\036\024\040\050\001\001\000\010\034" +
    "\022\036\024\040\047\001\001\000\010\034\022\036\024" +
    "\040\046\001\001\000\010\034\022\036\024\040\045\001" +
    "\001\000\010\034\022\036\024\040\044\001\001\000\010" +
    "\034\022\036\024\040\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\022\036\024\040" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\033\065\034\022\036\024" +
    "\040\020\001\001\000\010\034\022\036\024\040\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\022\036\024\040\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\002\116\004\104\006\075" +
    "\007\100\010\076\012\112\013\105\014\120\016\110\017" +
    "\073\020\122\021\113\023\121\032\074\034\107\035\072" +
    "\036\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\211\034\022\036\024\040\126\001\001\000\002\001" +
    "\001\000\006\010\203\036\204\001\001\000\010\034\022" +
    "\036\024\040\202\001\001\000\010\034\022\036\024\040" +
    "\170\001\001\000\002\001\001\000\042\002\116\004\104" +
    "\006\075\007\100\010\076\012\112\014\125\016\110\017" +
    "\073\020\122\021\113\023\121\032\074\034\107\035\072" +
    "\036\114\001\001\000\044\002\116\004\104\006\075\007" +
    "\100\010\076\012\112\013\165\014\120\016\110\017\073" +
    "\020\122\021\113\023\121\032\074\034\107\035\072\036" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\132\036\131\001\001\000\002\001\001" +
    "\000\044\002\116\004\104\006\075\007\100\010\076\012" +
    "\112\013\123\014\120\016\110\017\073\020\122\021\113" +
    "\023\121\032\074\034\107\035\072\036\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\002\116\004\104\006\075\007\100\010\076\012\112\014" +
    "\125\016\110\017\073\020\122\021\113\023\121\032\074" +
    "\034\107\035\072\036\114\001\001\000\012\015\127\034" +
    "\022\036\024\040\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\134\034\022\036\024" +
    "\040\126\001\001\000\002\001\001\000\012\015\136\034" +
    "\022\036\024\040\126\001\001\000\002\001\001\000\044" +
    "\002\116\004\104\006\075\007\100\010\076\012\112\013" +
    "\140\014\120\016\110\017\073\020\122\021\113\023\121" +
    "\032\074\034\107\035\072\036\114\001\001\000\042\002" +
    "\116\004\104\006\075\007\100\010\076\012\112\014\125" +
    "\016\110\017\073\020\122\021\113\023\121\032\074\034" +
    "\107\035\072\036\114\001\001\000\002\001\001\000\014" +
    "\005\143\034\022\036\024\037\145\040\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\143\011\151\034\022\036\024\037\150\040\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\143\034\022\036\024\037\154\040\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\157" +
    "\034\022\036\024\040\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\022\036\024" +
    "\040\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\002\116\004\104\006\075\007\100" +
    "\010\076\012\112\014\125\016\110\017\073\020\122\021" +
    "\113\023\121\032\074\034\107\035\072\036\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\172\001\001\000\002\001\001\000\044\002\116" +
    "\004\104\006\075\007\100\010\076\012\112\013\174\014" +
    "\120\016\110\017\073\020\122\021\113\023\121\032\074" +
    "\034\107\035\072\036\114\001\001\000\042\002\116\004" +
    "\104\006\075\007\100\010\076\012\112\014\125\016\110" +
    "\017\073\020\122\021\113\023\121\032\074\034\107\035" +
    "\072\036\114\001\001\000\002\001\001\000\044\002\116" +
    "\004\104\006\075\007\100\010\076\012\112\013\177\014" +
    "\120\016\110\017\073\020\122\021\113\023\121\032\074" +
    "\034\107\035\072\036\114\001\001\000\044\002\116\004" +
    "\104\006\075\007\100\010\076\012\112\014\125\016\110" +
    "\017\073\020\122\021\113\022\200\023\121\032\074\034" +
    "\107\035\072\036\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\206\001\001\000\002\001\001\000\016" +
    "\005\143\011\210\034\022\036\024\037\150\040\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\002\116" +
    "\004\104\006\075\007\100\010\076\012\112\013\213\014" +
    "\120\016\110\017\073\020\122\021\113\023\121\032\074" +
    "\034\107\035\072\036\114\001\001\000\042\002\116\004" +
    "\104\006\075\007\100\010\076\012\112\014\125\016\110" +
    "\017\073\020\122\021\113\023\121\032\074\034\107\035" +
    "\072\036\114\001\001\000\002\001\001\000\016\005\143" +
    "\011\216\034\022\036\024\037\150\040\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\002" +
    "\116\004\104\006\075\007\100\010\076\012\112\014\125" +
    "\016\110\017\073\020\122\021\113\023\121\032\074\034" +
    "\107\035\072\036\114\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

   currentSymTable = new parser.SymbolTable(null); //Main symbol table for global variables included in all scopes
   funcBuffer = new StringBuffer(); //buffer for function declaration
   globalDecBuffer = new StringBuffer(); //buffer for global var declaration
   mainBuffer = new StringBuffer(); //buffer used for main function
   bwr = new BufferedWriter(new FileWriter(new File("output.ll"))); //output file
   registerCount = 1; //used as counter for SSA registers
   /*Structure:
   Global buffer
   Function buffer
   main buffer


   */

    }


    
public SymbolTable currentSymTable;
public StringBuffer funcBuffer;
public StringBuffer globalDecBuffer;
public StringBuffer mainBuffer;
public BufferedWriter bwr;
public Integer registerCount;
 public enum Type {NUMBER, TABLE, IMMEDIATE}; //different types of values NUMBER means that the value is assigned to a var and is of type NUMBER, IMMEDIATE means it is a immediate read from file

 public class SymbolTable{
        public ArrayList<ValueObj> varList;
        public ArrayList<ValueObj> expList;
        public HashMap<String, ValueObj> varTable;
        public int nargs;

        SymbolTable prev;

        public SymbolTable(SymbolTable p){
            this.varTable = new HashMap<String, ValueObj>();
            this.varList = new ArrayList<ValueObj>();
            this.expList = new ArrayList<ValueObj>();
            this.nargs = 0;
            this.prev = p;
        }

        public ValueObj get(String s){
            for (SymbolTable sym = this; sym != null; sym = sym.prev){
                ValueObj found = sym.varTable.get(s);
                if (found != null)
                    return found;
            }
            return null;
        }
    }


 public class ValueObj {

		Double value;
        public String name;
        public Type type;
        public String scope;

		public ValueObj(String name) {
			super();
			this.name = name;
            type = null;
		}

        public ValueObj(Double value){
            this.value=value;
            type = Type.IMMEDIATE;
        }

        public void setDouble(){
            this.type= Type.NUMBER;
        }

        public void setGlobal(){
            scope="@";
        }

        public void setLocal(){
            scope="%";
        }

        
  
 
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  public void appendFuncBuffer(String s, boolean newLine){
        funcBuffer.append(s);
        if (newLine)
            funcBuffer.append("\n");
    }

     public void appendGlobalDecBuffer(String s, boolean newLine){
        globalDecBuffer.append(s);
        if (newLine)
            globalDecBuffer.append("\n");
    }

     public void appendMainBuffer(String s, boolean newLine){
       mainBuffer.append(s);
        if (newLine)
            mainBuffer.append("\n");
    }

    public String getRegister(){
        return String.valueOf(registerCount++);
    }

    public String createGlovalVarLLVM(String name, String type, String value){

            return "@"+name+" = " +"global "+type+" "+value+ ", align 8";

    }

    public String storeLLVM(String source, String sourceType, String dest, String destType, String align){
          //  store i32 %4, i32* %3, align 4
          return "store " + sourceType +" " + source+ ", " + destType+"* "+dest+", align " +align;

    }

    public String loadLLVM(String outName, String outType, String inputType, String inputName, String align ){
        // %2 = load double, double* @b, align 8

        return outName+" = " + "load " + outType+", "+inputType+"* "+inputName+", "+"align "+align;

    }

    public void initVar(ValueObj n, ValueObj x){
                                    //if the variable has never been used before, it means that must be declared
                        if(n.type == null && x.type == Type.IMMEDIATE){ //if the value to which initiliaze is an immediate
                            
                            n.setDouble(); //set type number in the variable
                            n.setGlobal();
                            //@X = global i32 17
                            //createGlovalVarLLVM(String name, String type, String value){
                            System.out.println(createGlovalVarLLVM(n.name, "double", ""+x.value));
                            appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", ""+x.value), true); //append to the Global declaration buffer

                        }else if(n.type == Type.NUMBER && x.type == Type.IMMEDIATE){ //if type is not null, it has been already declared and must be loaded with a new value
                                //store double 6.000000e+00, double* @a, align 8
                               
                                
                                 appendMainBuffer( storeLLVM(""+x.value, "double", n.scope+n.name, "double", "8"), true); //load with a new value
                        }else if(n.type == null && x.type == Type.NUMBER){ //if new var is undeclared and we initialize with a variable already declared
                                 n.setDouble(); //set type number in the variable
                                 n.setGlobal();
                                appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", "0.0"), true); //append to  the Global declaration buffer
                                //(String outName, String outType, String inputType, String inputName, String align )
                                String reg = getRegister(); //get a new register
                                appendMainBuffer(loadLLVM("%"+reg, "double", "double", x.scope+x.name,"8"), true); //save the value of the var into the register
                                appendMainBuffer( storeLLVM("%"+reg, "double", n.scope+n.name, "double", "8"), true); //store new var with value pointed by the variable
                        }else if(n.type == Type.NUMBER && x.type == Type.NUMBER){ //if both var have already been declared and we want to assigne one to the other
                                  String reg = getRegister();
                                 appendMainBuffer(loadLLVM("%"+reg, "double", "double", x.scope+x.name,"8"), true);
                                 appendMainBuffer(storeLLVM("%"+reg, "double", x.scope+n.name, "double", "8"), true); 
                        }


    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;


       


              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= func_list NT$0 stmt_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		 bwr.write(globalDecBuffer.toString());
	    bwr.write("define void @main(){\n");
        bwr.write(mainBuffer.toString());
	
	
		bwr.write("ret void\n}");
		bwr.flush();
 
		//close the stream
		bwr.close();
	
	
	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration ::= local_var_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= local_var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= global_var_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= if_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= for_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= print_func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= ret 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= while_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= repeat_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= RO exp RC 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= NUMBER 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new ValueObj(x);

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= MINUS NUMBER 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=new ValueObj(-x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= var 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=x;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= NIL 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= func_call 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp PLUS exp 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp MINUS exp 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp STAR exp 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp DIV exp 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp HAT exp 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp AND exp 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp OR exp 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= NOT exp 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp EQ EQ exp 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp NOTEQ exp 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp MIN exp 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp MAJ exp 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp MIN_EQ exp 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp MAJ_EQ exp 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= RO error RC 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ass_list ::= ass_list CM ass_exp 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 currentSymTable.expList.add(x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ass_list ::= ass_exp 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 currentSymTable.expList.add(x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ass_exp ::= exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT=x;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ass_exp ::= array_dec 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // array_dec ::= BO ass_list BC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // array_dec ::= BO BC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // local_var_list ::= LOCAL var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // local_var_init ::= local_var_list EQ ass_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var_init",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // global_var_init ::= var_list EQ ass_list 
            {
              Object RESULT =null;
		

                                            for(int i=0; i<currentSymTable.varList.size(); i++){
                                                
                                                initVar(currentSymTable.varList.get(i), currentSymTable.expList.get(i));

                                            }


                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_var_init",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment ::= var EQ ass_exp 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                                        initVar(n, x);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // var_list ::= var_list CM var 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  currentSymTable.varList.add(x) ;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var_list ::= var 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.currentSymTable.varList.add(x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var ::= ID 
            {
              ValueObj RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT =currentSymTable.varTable.get(n);
                if(RESULT == null){		
		                ValueObj var = new ValueObj(n);
		                currentSymTable.varTable.put(n, var);
		                RESULT=var;
                      }
               
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var ::= ID SO exp SC 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // block ::= DO stmt_list END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // loop_cond ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_cond",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // for_loop ::= FOR assignment CM loop_cond CM loop_cond DO stmt_list END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // while_loop ::= WHILE loop_cond DO stmt_list END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_loop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // repeat_loop ::= REPEAT stmt_list UNTIL loop_cond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_loop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if_block ::= IF exp THEN stmt_list else_block END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if_block ::= IF error else_block END 
            {
              Object RESULT =null;
		 System.out.println("error");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else_block ::= ELSE stmt_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // else_block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // func_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // func_list ::= func_list function_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // function_decl ::= FUNCTION ID RO func_param_list RC stmt_list END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ret ::= RETURN exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // print_func ::= PRINT RO print_func_args RC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // print_func_args ::= print_func_args CM STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func_args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // print_func_args ::= print_func_args CM exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func_args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // print_func_args ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func_args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // print_func_args ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func_args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // func_param_list ::= func_param_list CM exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_param_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // func_param_list ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_param_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // func_call ::= ID RO func_param_list RC 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
