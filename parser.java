
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;
import java.util.Map.*;
import java.util.ArrayList;
import java.util.regex.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\041\002\000\002\025" +
    "\005\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\013\004\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\037\005" +
    "\000\002\037\003\000\002\037\004\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\004" +
    "\000\002\037\006\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\011\005\000\002\011\003\000\002\035" +
    "\003\000\002\035\003\000\002\005\005\000\002\005\004" +
    "\000\002\007\004\000\002\006\005\000\002\002\005\000" +
    "\002\040\005\000\002\010\005\000\002\010\003\000\002" +
    "\034\003\000\002\034\006\000\002\004\005\000\002\036" +
    "\003\000\002\042\002\000\002\043\002\000\002\044\002" +
    "\000\002\045\002\000\002\012\017\000\002\046\002\000" +
    "\002\047\002\000\002\050\002\000\002\015\012\000\002" +
    "\016\006\000\002\051\002\000\002\052\002\000\002\053" +
    "\002\000\002\017\013\000\002\017\006\000\002\054\002" +
    "\000\002\055\002\000\002\020\006\000\002\020\002\000" +
    "\002\023\002\000\002\023\004\000\002\056\002\000\002" +
    "\027\012\000\002\021\004\000\002\030\006\000\002\031" +
    "\005\000\002\031\003\000\002\032\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\026\032\uffb7\033\uffb7\034\uffb7\040\uffb7\042" +
    "\uffb7\043\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\001\002" +
    "\000\026\032\000\033\000\034\000\040\000\042\000\043" +
    "\000\045\011\046\000\047\000\050\000\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\024\032" +
    "\110\033\116\034\105\040\103\042\102\043\120\046\104" +
    "\047\113\050\023\001\002\000\026\032\uffb6\033\uffb6\034" +
    "\uffb6\040\uffb6\042\uffb6\043\uffb6\045\uffb6\046\uffb6\047\uffb6" +
    "\050\uffb6\001\002\000\004\050\uffb5\001\002\000\004\050" +
    "\013\001\002\000\004\020\014\001\002\000\016\013\025" +
    "\020\015\025\016\041\020\050\023\052\021\001\002\000" +
    "\020\003\232\013\025\020\015\025\016\041\020\050\023" +
    "\052\021\001\002\000\004\052\230\001\002\000\006\021" +
    "\073\031\070\001\002\000\100\002\uffeb\004\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\021\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb\046\uffeb" +
    "\047\uffeb\050\uffeb\001\002\000\100\002\uffee\004\uffee\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\015\uffee\016\uffee" +
    "\017\uffee\021\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\042\uffee\043\uffee\044\uffee\046" +
    "\uffee\047\uffee\050\uffee\001\002\000\040\004\044\006\042" +
    "\007\032\010\041\011\030\012\043\016\036\017\033\021" +
    "\uffb0\024\037\025\031\026\035\027\040\030\034\031\uffb0" +
    "\001\002\000\104\002\uffce\004\uffce\006\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\014\064\015\uffce\016\uffce\017\uffce" +
    "\020\063\021\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\042\uffce\043\uffce\044\uffce\046" +
    "\uffce\047\uffce\050\uffce\001\002\000\100\002\uffea\004\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\015\uffea\016" +
    "\uffea\017\uffea\021\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\042\uffea\043\uffea\044\uffea" +
    "\046\uffea\047\uffea\050\uffea\001\002\000\016\013\025\020" +
    "\015\025\016\041\020\050\023\052\021\001\002\000\100" +
    "\002\uffec\004\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\015\uffec\016\uffec\017\uffec\021\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\042\uffec" +
    "\043\uffec\044\uffec\046\uffec\047\uffec\050\uffec\001\002\000" +
    "\100\002\uffe2\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\034\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2\001\002" +
    "\000\016\013\025\020\015\025\016\041\020\050\023\052" +
    "\021\001\002\000\016\013\025\020\015\025\016\041\020" +
    "\050\023\052\021\001\002\000\016\013\025\020\015\025" +
    "\016\041\020\050\023\052\021\001\002\000\016\013\025" +
    "\020\015\025\016\041\020\050\023\052\021\001\002\000" +
    "\016\013\025\020\015\025\016\041\020\050\023\052\021" +
    "\001\002\000\016\013\025\020\015\025\016\041\020\050" +
    "\023\052\021\001\002\000\004\016\053\001\002\000\016" +
    "\013\025\020\015\025\016\041\020\050\023\052\021\001" +
    "\002\000\016\013\025\020\015\025\016\041\020\050\023" +
    "\052\021\001\002\000\016\013\025\020\015\025\016\041" +
    "\020\050\023\052\021\001\002\000\016\013\025\020\015" +
    "\025\016\041\020\050\023\052\021\001\002\000\016\013" +
    "\025\020\015\025\016\041\020\050\023\052\021\001\002" +
    "\000\016\013\025\020\015\025\016\041\020\050\023\052" +
    "\021\001\002\000\100\002\uffdf\004\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\015\uffdf\016\uffdf\017\uffdf\021" +
    "\uffdf\023\uffdf\024\037\025\031\026\035\027\040\030\034" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\042\uffdf\043\uffdf\044\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\001\002\000\100\002\uffe3\004\044\006\042\007" +
    "\032\010\041\011\030\012\uffe3\015\uffe3\016\036\017\033" +
    "\021\uffe3\023\uffe3\024\037\025\031\026\035\027\040\030" +
    "\034\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\042\uffe3\043\uffe3\044\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\001\002\000\100\002\uffde\004\uffde\006\uffde" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\015\uffde\016\uffde\017" +
    "\uffde\021\uffde\023\uffde\024\037\025\031\026\035\027\040" +
    "\030\034\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\042\uffde\043\uffde\044\uffde\046\uffde" +
    "\047\uffde\050\uffde\001\002\000\100\002\uffdc\004\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\021\uffdc\023\uffdc\024\037\025\031\026\035\027" +
    "\040\030\034\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\042\uffdc\043\uffdc\044\uffdc\046" +
    "\uffdc\047\uffdc\050\uffdc\001\002\000\100\002\uffe6\004\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\034\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\001\002\000\100\002\uffe9\004" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\021\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\035\027\040\030\034\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9\044" +
    "\uffe9\046\uffe9\047\uffe9\050\uffe9\001\002\000\016\013\025" +
    "\020\015\025\016\041\020\050\023\052\021\001\002\000" +
    "\100\002\uffe1\004\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\012\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1\023\uffe1\024" +
    "\037\025\031\026\035\027\040\030\034\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\046\uffe1\047\uffe1\050\uffe1\001\002" +
    "\000\100\002\uffe7\004\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\034\031\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\046\uffe7\047\uffe7\050\uffe7\001" +
    "\002\000\100\002\uffe5\004\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\015\uffe5\016\uffe5\017\uffe5\021\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\034\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\042\uffe5\043\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\001\002\000\100\002\uffe0\004\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0" +
    "\023\uffe0\024\037\025\031\026\035\027\040\030\034\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\042\uffe0\043\uffe0\044\uffe0\046\uffe0\047\uffe0\050" +
    "\uffe0\001\002\000\100\002\uffdd\004\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\015\uffdd\016\uffdd\017\uffdd\021" +
    "\uffdd\023\uffdd\024\037\025\031\026\035\027\040\030\034" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd\047\uffdd" +
    "\050\uffdd\001\002\000\100\002\uffe8\004\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\021\uffe8\023\uffe8\024\uffe8\025\uffe8\026\035\027\040\030" +
    "\034\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\042\uffe8\043\uffe8\044\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\001\002\000\100\002\uffe4\004\044\006\042" +
    "\007\032\010\041\011\uffe4\012\uffe4\015\uffe4\016\036\017" +
    "\033\021\uffe4\023\uffe4\024\037\025\031\026\035\027\040" +
    "\030\034\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4\044\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\001\002\000\016\013\025\020\015\025" +
    "\016\041\020\050\023\052\021\001\002\000\016\013\025" +
    "\020\015\025\016\041\020\050\023\052\021\001\002\000" +
    "\036\004\044\006\042\007\032\010\041\011\030\012\043" +
    "\015\066\016\036\017\033\024\037\025\031\026\035\027" +
    "\040\030\034\001\002\000\100\002\uffcd\004\uffcd\006\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\012\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\042\uffcd\043\uffcd\044\uffcd\046\uffcd" +
    "\047\uffcd\050\uffcd\001\002\000\006\021\071\031\070\001" +
    "\002\000\016\013\025\020\015\025\016\041\020\050\023" +
    "\052\021\001\002\000\100\002\uffaf\004\uffaf\006\uffaf\007" +
    "\uffaf\010\uffaf\011\uffaf\012\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\021\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\042\uffaf\043\uffaf\044\uffaf\046\uffaf\047" +
    "\uffaf\050\uffaf\001\002\000\040\004\044\006\042\007\032" +
    "\010\041\011\030\012\043\016\036\017\033\021\uffb1\024" +
    "\037\025\031\026\035\027\040\030\034\031\uffb1\001\002" +
    "\000\024\032\110\033\116\034\105\040\103\042\102\043" +
    "\120\046\104\047\113\050\023\001\002\000\034\002\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\035\ufff4\037\ufff4\040\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\046\ufff4\047\ufff4\050\ufff4\001\002" +
    "\000\034\002\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\037" +
    "\ufff2\040\ufff2\042\ufff2\043\ufff2\044\ufff2\046\ufff2\047\ufff2" +
    "\050\ufff2\001\002\000\034\002\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\037\ufff6\040\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\046\ufff6\047\ufff6\050\ufff6\001\002\000\034\002\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\037\ufffe\040\ufffe\042\ufffe" +
    "\043\ufffe\044\ufffe\046\ufffe\047\ufffe\050\ufffe\001\002\000" +
    "\006\016\226\031\213\001\002\000\036\002\ufffd\016\224" +
    "\032\ufffd\033\ufffd\034\ufffd\035\ufffd\037\ufffd\040\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\046\ufffd\047\ufffd\050\ufffd\001\002" +
    "\000\016\013\uffc5\020\uffc5\025\uffc5\041\uffc5\050\uffc5\052" +
    "\uffc5\001\002\000\004\050\145\001\002\000\016\013\025" +
    "\020\015\025\016\041\020\050\023\052\021\001\002\000" +
    "\020\003\171\013\uffc0\020\uffc0\025\uffc0\041\uffc0\050\uffc0" +
    "\052\uffc0\001\002\000\034\002\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\037\ufff0\040\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\046\ufff0\047\ufff0\050\ufff0\001\002\000\026\032\110\033" +
    "\116\034\105\037\170\040\103\042\102\043\120\046\104" +
    "\047\113\050\023\001\002\000\024\032\110\033\116\034" +
    "\105\040\103\042\102\043\120\046\104\047\113\050\023" +
    "\001\002\000\034\002\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\037\ufff3\040\ufff3\042\ufff3\043\ufff3\044\ufff3\046\ufff3" +
    "\047\ufff3\050\ufff3\001\002\000\034\002\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\037\ufffb\040\ufffb\042\ufffb\043\ufffb" +
    "\044\ufffb\046\ufffb\047\ufffb\050\ufffb\001\002\000\004\020" +
    "\163\001\002\000\034\002\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\037\ufff7\040\ufff7\042\ufff7\043\ufff7\044\ufff7\046" +
    "\ufff7\047\ufff7\050\ufff7\001\002\000\034\002\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\037\ufff8\040\ufff8\042\ufff8\043" +
    "\ufff8\044\ufff8\046\ufff8\047\ufff8\050\ufff8\001\002\000\004" +
    "\050\145\001\002\000\006\016\132\031\uffcf\001\002\000" +
    "\024\032\110\033\116\034\105\040\103\042\102\043\120" +
    "\046\104\047\113\050\023\001\002\000\034\002\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\037\ufffc\040\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\046\ufffc\047\ufffc\050\ufffc\001\002\000" +
    "\034\002\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\037\ufff9" +
    "\040\ufff9\042\ufff9\043\ufff9\044\ufff9\046\ufff9\047\ufff9\050" +
    "\ufff9\001\002\000\034\002\ufff5\032\ufff5\033\ufff5\034\ufff5" +
    "\035\ufff5\037\ufff5\040\ufff5\042\ufff5\043\ufff5\044\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\001\002\000\034\002\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\037\ufff1\040\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\046\ufff1\047\ufff1\050\ufff1\001\002\000\026" +
    "\032\110\033\116\034\105\040\103\042\102\043\120\044" +
    "\126\046\104\047\113\050\023\001\002\000\016\013\025" +
    "\020\015\025\016\041\020\050\023\052\021\001\002\000" +
    "\034\002\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\037\ufffa" +
    "\040\ufffa\042\ufffa\043\ufffa\044\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\001\002\000\070\002\uffcb\004\044\006\042\007\032" +
    "\010\041\011\030\012\043\016\036\017\033\024\037\025" +
    "\031\026\035\027\040\030\034\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\001\002\000\034\002\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\037\uffc1\040\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\046\uffc1\047\uffc1\050\uffc1\001\002" +
    "\000\020\013\025\020\015\022\136\025\016\041\020\050" +
    "\023\052\021\001\002\000\040\002\uffd7\023\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7\040\uffd7\042" +
    "\uffd7\043\uffd7\044\uffd7\046\uffd7\047\uffd7\050\uffd7\001\002" +
    "\000\072\002\uffd8\004\044\006\042\007\032\010\041\011" +
    "\030\012\043\016\036\017\033\023\uffd8\024\037\025\031" +
    "\026\035\027\040\030\034\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\046\uffd8\047\uffd8\050\uffd8\001\002\000\036\002\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\037\uffd1\040\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\046\uffd1\047\uffd1\050\uffd1\001" +
    "\002\000\022\013\025\020\015\022\136\023\137\025\016" +
    "\041\020\050\023\052\021\001\002\000\040\002\uffd5\023" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5" +
    "\040\uffd5\042\uffd5\043\uffd5\044\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\001\002\000\040\002\uffd9\023\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\037\uffd9\040\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\046\uffd9\047\uffd9\050\uffd9\001\002\000\006" +
    "\023\143\031\142\001\002\000\020\013\025\020\015\022" +
    "\136\025\016\041\020\050\023\052\021\001\002\000\040" +
    "\002\uffd6\023\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\037\uffd6\040\uffd6\042\uffd6\043\uffd6\044\uffd6\046\uffd6" +
    "\047\uffd6\050\uffd6\001\002\000\040\002\uffda\023\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\037\uffda\040\uffda" +
    "\042\uffda\043\uffda\044\uffda\046\uffda\047\uffda\050\uffda\001" +
    "\002\000\042\002\uffce\014\064\016\uffce\031\uffce\032\uffce" +
    "\033\uffce\034\uffce\035\uffce\037\uffce\040\uffce\042\uffce\043" +
    "\uffce\044\uffce\046\uffce\047\uffce\050\uffce\001\002\000\004" +
    "\016\132\001\002\000\004\031\uffca\001\002\000\004\031" +
    "\151\001\002\000\016\013\025\020\015\025\016\041\020" +
    "\050\023\052\021\001\002\000\004\031\uffc9\001\002\000" +
    "\004\031\154\001\002\000\016\013\uffc8\020\uffc8\025\uffc8" +
    "\041\uffc8\050\uffc8\052\uffc8\001\002\000\016\013\025\020" +
    "\015\025\016\041\020\050\023\052\021\001\002\000\036" +
    "\004\044\006\042\007\032\010\041\011\030\012\043\016" +
    "\036\017\033\024\037\025\031\026\035\027\040\030\034" +
    "\032\uffc7\001\002\000\004\032\160\001\002\000\024\032" +
    "\110\033\116\034\105\040\103\042\102\043\120\046\104" +
    "\047\113\050\023\001\002\000\026\032\110\033\116\034" +
    "\105\037\162\040\103\042\102\043\120\046\104\047\113" +
    "\050\023\001\002\000\034\002\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\001\002\000\004\051\164\001" +
    "\002\000\004\021\165\001\002\000\034\002\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\037\uffb2\040\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\046\uffb2\047\uffb2\050\uffb2\001\002\000\026" +
    "\032\110\033\116\034\105\037\167\040\103\042\102\043" +
    "\120\046\104\047\113\050\023\001\002\000\034\002\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\037\uffcc\040\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\046\uffcc\047\uffcc\050\uffcc\001\002" +
    "\000\026\032\uffb4\033\uffb4\034\uffb4\040\uffb4\042\uffb4\043" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\001\002\000\006" +
    "\035\uffbb\037\uffb8\001\002\000\016\013\025\020\015\025" +
    "\016\041\020\050\023\052\021\001\002\000\036\004\044" +
    "\006\042\007\032\010\041\011\030\012\043\016\036\017" +
    "\033\024\037\025\031\026\035\027\040\030\034\036\uffbf" +
    "\001\002\000\004\036\175\001\002\000\024\032\uffbe\033" +
    "\uffbe\034\uffbe\040\uffbe\042\uffbe\043\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\001\002\000\024\032\110\033\116\034\105\040" +
    "\103\042\102\043\120\046\104\047\113\050\023\001\002" +
    "\000\030\032\110\033\116\034\105\035\uffbb\037\uffb8\040" +
    "\103\042\102\043\120\046\104\047\113\050\023\001\002" +
    "\000\004\037\205\001\002\000\004\035\202\001\002\000" +
    "\024\032\uffba\033\uffba\034\uffba\040\uffba\042\uffba\043\uffba" +
    "\046\uffba\047\uffba\050\uffba\001\002\000\024\032\110\033" +
    "\116\034\105\040\103\042\102\043\120\046\104\047\113" +
    "\050\023\001\002\000\026\032\110\033\116\034\105\037" +
    "\uffb9\040\103\042\102\043\120\046\104\047\113\050\023" +
    "\001\002\000\034\002\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\037\uffbd\040\uffbd\042\uffbd\043\uffbd\044\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\001\002\000\004\037\207\001\002\000" +
    "\034\002\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\037\uffbc" +
    "\040\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\001\002\000\066\002\uffb3\004\044\006\042\007\032" +
    "\010\041\011\030\012\043\016\036\017\033\024\037\025" +
    "\031\026\035\027\040\030\034\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\037\uffb3\040\uffb3\042\uffb3\043\uffb3\044\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\001\002\000\040\002\uffd4\016\uffd4" +
    "\031\213\032\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\040" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\001\002\000\040\002\uffcf\016\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\046\uffcf\047\uffcf\050\uffcf\001\002\000\004\050" +
    "\145\001\002\000\040\002\uffd0\016\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\046\uffd0\047\uffd0\050\uffd0\001\002\000\016" +
    "\013\025\020\015\025\016\041\020\050\023\052\021\001" +
    "\002\000\004\032\uffc4\001\002\000\004\032\220\001\002" +
    "\000\024\032\uffc3\033\uffc3\034\uffc3\040\uffc3\042\uffc3\043" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\001\002\000\024\032\110" +
    "\033\116\034\105\040\103\042\102\043\120\046\104\047" +
    "\113\050\023\001\002\000\026\032\110\033\116\034\105" +
    "\037\223\040\103\042\102\043\120\046\104\047\113\050" +
    "\023\001\002\000\034\002\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\037\uffc2\040\uffc2\042\uffc2\043\uffc2\044\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\001\002\000\020\013\025\020\015" +
    "\022\136\025\016\041\020\050\023\052\021\001\002\000" +
    "\036\002\uffd3\031\142\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\037\uffd3\040\uffd3\042\uffd3\043\uffd3\044\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\001\002\000\020\013\025\020\015\022\136" +
    "\025\016\041\020\050\023\052\021\001\002\000\036\002" +
    "\uffd2\031\142\032\uffd2\033\uffd2\034\uffd2\035\uffd2\037\uffd2" +
    "\040\uffd2\042\uffd2\043\uffd2\044\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\001\002\000\100\002\uffed\004\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\015\uffed\016\uffed\017\uffed\021" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\042\uffed\043\uffed\044\uffed\046\uffed\047\uffed" +
    "\050\uffed\001\002\000\036\004\044\006\042\007\032\010" +
    "\041\011\030\012\043\016\036\017\033\021\234\024\037" +
    "\025\031\026\035\027\040\030\034\001\002\000\004\021" +
    "\233\001\002\000\100\002\uffdb\004\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\015\uffdb\016\uffdb\017\uffdb\021" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\042\uffdb\043\uffdb\044\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\001\002\000\100\002\uffef\004\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\012\uffef\015\uffef\016\uffef\017\uffef" +
    "\021\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\042\uffef\043\uffef\044\uffef\046\uffef\047" +
    "\uffef\050\uffef\001\002\000\026\002\uffff\032\110\033\116" +
    "\034\105\040\103\042\102\043\120\046\104\047\113\050" +
    "\023\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\006\023\003\025\004\001\001\000\006\027" +
    "\007\041\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\002\120\004\105\006\076\007\100\010\077\012" +
    "\113\013\234\014\121\015\074\016\123\017\114\021\122" +
    "\030\075\032\110\033\073\034\116\040\111\001\001\000" +
    "\002\001\001\000\004\056\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\031\016\032\023\034\025\037" +
    "\021\001\001\000\010\032\023\034\025\037\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\023\034\025\037\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\023\034\025" +
    "\037\061\001\001\000\010\032\023\034\025\037\060\001" +
    "\001\000\010\032\023\034\025\037\057\001\001\000\010" +
    "\032\023\034\025\037\056\001\001\000\010\032\023\034" +
    "\025\037\055\001\001\000\010\032\023\034\025\037\054" +
    "\001\001\000\002\001\001\000\010\032\023\034\025\037" +
    "\051\001\001\000\010\032\023\034\025\037\050\001\001" +
    "\000\010\032\023\034\025\037\047\001\001\000\010\032" +
    "\023\034\025\037\046\001\001\000\010\032\023\034\025" +
    "\037\045\001\001\000\010\032\023\034\025\037\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\023\034\025\037\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\031\066\032\023\034\025\037\021\001\001\000\010\032" +
    "\023\034\025\037\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\023\034\025\037" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\002\120\004\105\006\076\007\100\010\077\012\113\013" +
    "\106\014\121\015\074\016\123\017\114\021\122\030\075" +
    "\032\110\033\073\034\116\040\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\214\001" +
    "\001\000\006\010\210\034\211\001\001\000\010\032\023" +
    "\034\025\037\207\001\001\000\004\051\171\001\001\000" +
    "\002\001\001\000\042\002\120\004\105\006\076\007\100" +
    "\010\077\012\113\014\126\015\074\016\123\017\114\021" +
    "\122\030\075\032\110\033\073\034\116\040\111\001\001" +
    "\000\044\002\120\004\105\006\076\007\100\010\077\012" +
    "\113\013\165\014\121\015\074\016\123\017\114\021\122" +
    "\030\075\032\110\033\073\034\116\040\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\145\040\146\001" +
    "\001\000\002\001\001\000\044\002\120\004\105\006\076" +
    "\007\100\010\077\012\113\013\124\014\121\015\074\016" +
    "\123\017\114\021\122\030\075\032\110\033\073\034\116" +
    "\040\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\002\120\004\105" +
    "\006\076\007\100\010\077\012\113\014\126\015\074\016" +
    "\123\017\114\021\122\030\075\032\110\033\073\034\116" +
    "\040\111\001\001\000\012\032\023\034\025\036\130\037" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\132\032\023\034\025\035\134\037" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\132\011\140\032\023\034\025\035" +
    "\137\037\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\132\032\023\034\025\035" +
    "\143\037\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\147\001" +
    "\001\000\002\001\001\000\012\032\023\034\025\036\151" +
    "\037\127\001\001\000\004\043\152\001\001\000\002\001" +
    "\001\000\004\044\154\001\001\000\010\032\023\034\025" +
    "\037\155\001\001\000\004\045\156\001\001\000\002\001" +
    "\001\000\044\002\120\004\105\006\076\007\100\010\077" +
    "\012\113\013\160\014\121\015\074\016\123\017\114\021" +
    "\122\030\075\032\110\033\073\034\116\040\111\001\001" +
    "\000\042\002\120\004\105\006\076\007\100\010\077\012" +
    "\113\014\126\015\074\016\123\017\114\021\122\030\075" +
    "\032\110\033\073\034\116\040\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\002\120\004\105\006\076\007\100\010\077\012" +
    "\113\014\126\015\074\016\123\017\114\021\122\030\075" +
    "\032\110\033\073\034\116\040\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\205\054\200\001\001" +
    "\000\010\032\023\034\025\037\172\001\001\000\004\052" +
    "\173\001\001\000\002\001\001\000\004\053\175\001\001" +
    "\000\044\002\120\004\105\006\076\007\100\010\077\012" +
    "\113\013\176\014\121\015\074\016\123\017\114\021\122" +
    "\030\075\032\110\033\073\034\116\040\111\001\001\000" +
    "\046\002\120\004\105\006\076\007\100\010\077\012\113" +
    "\014\126\015\074\016\123\017\114\020\177\021\122\030" +
    "\075\032\110\033\073\034\116\040\111\054\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\202\001" +
    "\001\000\044\002\120\004\105\006\076\007\100\010\077" +
    "\012\113\013\203\014\121\015\074\016\123\017\114\021" +
    "\122\030\075\032\110\033\073\034\116\040\111\001\001" +
    "\000\042\002\120\004\105\006\076\007\100\010\077\012" +
    "\113\014\126\015\074\016\123\017\114\021\122\030\075" +
    "\032\110\033\073\034\116\040\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\213\001" +
    "\001\000\002\001\001\000\012\032\023\034\025\036\215" +
    "\037\127\001\001\000\004\047\216\001\001\000\002\001" +
    "\001\000\004\050\220\001\001\000\044\002\120\004\105" +
    "\006\076\007\100\010\077\012\113\013\221\014\121\015" +
    "\074\016\123\017\114\021\122\030\075\032\110\033\073" +
    "\034\116\040\111\001\001\000\042\002\120\004\105\006" +
    "\076\007\100\010\077\012\113\014\126\015\074\016\123" +
    "\017\114\021\122\030\075\032\110\033\073\034\116\040" +
    "\111\001\001\000\002\001\001\000\016\005\132\011\224" +
    "\032\023\034\025\035\137\037\133\001\001\000\002\001" +
    "\001\000\016\005\132\011\226\032\023\034\025\035\137" +
    "\037\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\002\120\004\105\006\076\007\100\010" +
    "\077\012\113\014\126\015\074\016\123\017\114\021\122" +
    "\030\075\032\110\033\073\034\116\040\111\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

   currentSymTable = new parser.SymbolTable(null); //Main symbol table for global variables included in all scopes
   funcBuffer = new StringBuffer(); //buffer for function declaration
   globalDecBuffer = new StringBuffer(); //buffer for global var declaration
   mainBuffer = new StringBuffer(); //buffer used for main function
   currentSymTable.currentBuffer=mainBuffer;
   bwr = new BufferedWriter(new FileWriter(new File("output.ll"))); //output file
   loopCount = 0;
   totLoopCount = 0;
   loopList=new LinkedList<Integer>();
   indexString = 0;
   stringList = new ArrayList<String>();
   stringDecl = new StringBuffer();
   /*Structure:
   Global buffer
   Function buffer
   main buffer


   */

    }


    
public SymbolTable currentSymTable;
public StringBuffer funcBuffer;
public StringBuffer globalDecBuffer;
public StringBuffer mainBuffer;
public BufferedWriter bwr;
public int loopCount;
public int totLoopCount;
public LinkedList<Integer> loopList;
public int indexString;
public ArrayList<String> stringList;
StringBuffer stringDecl; 

public enum Type {NUMBER, TABLE, IMMEDIATE, RNUM, BOOL}; //different types of values NUMBER means that the value is assigned to a var and is of type NUMBER, IMMEDIATE means it is a immediate read from file

public class SymbolTable{
        public ArrayList<ValueObj> varList;
        public ArrayList<ValueObj> expList;
        public HashMap<String, ValueObj> varTable;
        public int nargs;
        public Integer registerCount; //used as counter for SSA registers
        SymbolTable prev;
        StringBuffer currentBuffer;
        
        
        public SymbolTable(SymbolTable p){
            this.varTable = new HashMap<String, ValueObj>();
            this.varList = new ArrayList<ValueObj>();
            this.expList = new ArrayList<ValueObj>();
            this.nargs = 0;
            this.prev = p;
            registerCount=1;
        }

        public ValueObj get(String s){
            for (SymbolTable sym = this; sym != null; sym = sym.prev){
                ValueObj found = sym.varTable.get(s);
                if (found != null)
                    return found;
            }
            return null;
        }
    }


public class ValueObj {

		Double value;
        public String name;
        public Type type;
        public String scope;

		public ValueObj(String name) {
			super();
			this.name = name;
            type = null;
		}

        public ValueObj(Double value){
            this.value=value;
            type = Type.IMMEDIATE;
        }

        public void setDouble(){
            this.type= Type.NUMBER;
        }

        public void setGlobal(){
            scope="@";
        }

        public void setLocal(){
            scope="%";
        }

        public void setRNUM(){
            this.type=Type.RNUM;
        }

        public void setBool(){
            this.type=Type.BOOL;
        }

        
  
 
    }

   




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    public void appendFuncBuffer(String s, boolean newLine){
        funcBuffer.append(s);
        if (newLine)
            funcBuffer.append("\n");
    }

    public void appendGlobalDecBuffer(String s, boolean newLine){
        globalDecBuffer.append(s);
        if (newLine)
            globalDecBuffer.append("\n");
    }

    public void appendMainBuffer(String s, boolean newLine){
       currentSymTable.currentBuffer.append(s);
        if (newLine)
            currentSymTable.currentBuffer.append("\n");
    }

    public String getRegister(){
        return String.valueOf(currentSymTable.registerCount++);
    }

    public String createGlovalVarLLVM(String name, String type, String value){

            return "@"+name+" = " +"global "+type+" "+value+ ", align 8";

    }

    public String storeLLVM(String source, String sourceType, String dest, String destType, String align){
          //  store i32 %4, i32* %3, align 4
          return "store " + sourceType +" " + source+ ", " + destType+"* "+dest+", align " +align;

    }

    public String loadLLVM(String outName, String outType, String inputType, String inputName, String align ){
        // %2 = load double, double* @b, align 8

        return outName+" = " + "load " + outType+", "+inputType+"* "+inputName+", "+"align "+align;

    }

   /* public String loadLLVM2(String outName, String firstOp, String SecondOp, String align){
        // %2 = load double, double* @b, align 8

        return outName+" = " + "load " + firstOp+", "+inputType+"* "+inputName+", "+"align "+align;

    }*/

    public void initVarOld(ValueObj n, ValueObj x){
                                    //if the variable has never been used before, it means that must be declared
                        if(n.type == null && x.type == Type.IMMEDIATE){ //if the value to which initiliaze is an immediate
                            
                            n.setDouble(); //set type number in the variable
                            n.setGlobal();
                            //@X = global i32 17
                            //createGlovalVarLLVM(String name, String type, String value){
                            System.out.println(createGlovalVarLLVM(n.name, "double", ""+x.value));
                            appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", ""+x.value), true); //append to the Global declaration buffer

                        }else if(n.type == Type.NUMBER && x.type == Type.IMMEDIATE){ //if type is not null, it has been already declared and must be loaded with a new value
                                //store double 6.000000e+00, double* @a, align 8
                               
                                
                                 appendMainBuffer( storeLLVM(""+x.value, "double", n.scope+n.name, "double", "8"), true); //load with a new value
                        }else if(n.type == null && x.type == Type.NUMBER){ //if new var is undeclared and we initialize with a variable already declared
                                 n.setDouble(); //set type number in the variable
                                 n.setGlobal();
                                appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", "0.0"), true); //append to  the Global declaration buffer
                                //(String outName, String outType, String inputType, String inputName, String align )
                                String reg = getRegister(); //get a new register
                                appendMainBuffer(loadLLVM("%"+reg, "double", "double", x.scope+x.name,"8"), true); //save the value of the var into the register
                                appendMainBuffer( storeLLVM("%"+reg, "double", n.scope+n.name, "double", "8"), true); //store new var with value pointed by the variable
                        }else if(n.type == Type.NUMBER && x.type == Type.NUMBER){ //if both var have already been declared and we want to assigne one to the other
                                  String reg = getRegister();
                                 appendMainBuffer(loadLLVM("%"+reg, "double", "double", x.scope+x.name,"8"), true);
                                 appendMainBuffer(storeLLVM("%"+reg, "double", n.scope+n.name, "double", "8"), true); 
                        }else if(n.type == Type.NUMBER && x.type == Type.RNUM){ //if var already declared and RHS is a register containing a num
                            appendMainBuffer(storeLLVM("%"+x.name, "double", n.scope+n.name, "double", "8"), true); 

                        }else if(n.type == null && x.type == Type.RNUM){ //if var already declared and RHS is a register containing a num
                            n.setDouble(); //set type number in the variable
                            n.setGlobal();
                            appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", "0.0"), true); //append to  the Global declaration buffer
                            appendMainBuffer(storeLLVM("%"+x.name, "double", n.scope+n.name, "double", "8"), true); 

                        }


    }

     public ValueObj initVar(ValueObj n, ValueObj x){

                        String op1, op2;

                        if(x.type == Type.IMMEDIATE){
                            op2=""+x.value;
                            if(n.type == null){
                            n.setDouble(); //set type number in the variable
                            n.setGlobal();
                            appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", ""+op2), true); //append to the Global declaration buffer
                            }else if(n.type == Type.NUMBER){
                            appendMainBuffer( storeLLVM(""+op2, "double", n.scope+n.name, "double", "8"), true); //load with a new value
                        }
                        }else if(x.type == Type.NUMBER){
                            op2=x.scope+x.name;
                            if(n.type == null){
                                n.setDouble(); //set type number in the variable
                                n.setGlobal();
                                appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", "0.0"), true); //append to  the Global declaration buffer
                                String reg = getRegister(); //get a new register
                                appendMainBuffer(loadLLVM("%"+reg, "double", "double", op2,"8"), true); //save the value of the var into the register
                                appendMainBuffer( storeLLVM("%"+reg, "double", n.scope+n.name, "double", "8"), true); //store new var with value pointed by the variable
                            }else if(n.type == Type.NUMBER){
                                String reg = getRegister();
                                appendMainBuffer(loadLLVM("%"+reg, "double", "double", x.scope+x.name,"8"), true);
                                appendMainBuffer(storeLLVM("%"+reg, "double", n.scope+n.name, "double", "8"), true); 

                            }
                        }else if(x.type == Type.RNUM){
                            op2="%"+x.name;
                            if(n.type == null){
                                n.setDouble(); //set type number in the variable
                                n.setGlobal();
                                appendGlobalDecBuffer(createGlovalVarLLVM(n.name, "double", "0.0"), true); //append to  the Global declaration buffer
                                appendMainBuffer(storeLLVM(op2, "double", n.scope+n.name, "double", "8"), true); 
                            }else if(n.type == Type.NUMBER){
                            appendMainBuffer(storeLLVM(op2, "double", n.scope+n.name, "double", "8"), true);
                            }
                        }

                        return n;
    }

    public ValueObj operationOld(String operation, ValueObj x, ValueObj y){ //type of operation, value of first operand, value of second operand
                            ValueObj RESULT=null; //final result to return
                            String a; //variables for registers
                            String b;
                            String r;
                            if( x.type==Type.NUMBER && y.type==Type.NUMBER){ //if both operands are variables
                                a=getRegister(); //we nned three register
                                b=getRegister();
                                r=getRegister();
                                appendMainBuffer(loadLLVM("%"+a, "double", "double", x.scope+x.name, "8"), true); //load value of first
                                appendMainBuffer(loadLLVM("%"+b, "double", "double", y.scope+y.name, "8" ), true); //load value of second
                                appendMainBuffer("%"+r+" = "+ operation +" double "+"%"+a+", %"+b, true); //perform operation and save in register
                                RESULT=new ValueObj(r); //the returning value is a register containing a number, so we set the name as the number of the register
                                RESULT.setLocal();
                                RESULT.setRNUM(); //we set the type as RNUM because it is a number into a register
                            }else if(x.type==Type.IMMEDIATE && y.type==Type.IMMEDIATE){ //if both are immediates, perform operation at compile time
                                ///create switch
                                if(operation.compareTo("fadd")==0)
                                    RESULT=new ValueObj(x.value+y.value);
                                else if(operation.compareTo("fsub")==0)
                                    RESULT=new ValueObj(x.value-y.value);
                                else if(operation.compareTo("fmul")==0)
                                    RESULT=new ValueObj(x.value*y.value);
                                else if(operation.compareTo("fdiv")==0)
                                    RESULT=new ValueObj(x.value/y.value);
                                RESULT.type=Type.IMMEDIATE; //the returning value is itself and integer
                            }else if((x.type==Type.IMMEDIATE || x.type==Type.RNUM) && y.type==Type.NUMBER ){ //if one is an (immedaite or RNUM) and the other a var
                                a=getRegister(); 
                                r=getRegister();
                                if(x.type==Type.RNUM){ //if it is a RNUM it is enough to set the name to the register name with %
                                    x.name="%"+x.name;
                                }else{
                                     
                                    x.name=""+x.value; //else just use the plain value
                                     
                                }
                                appendMainBuffer(loadLLVM("%"+a, "double", "double", y.scope+y.name, "8"), true);
                                appendMainBuffer("%"+r+" = "+ operation +" double "+x.name+", %"+a, true);
                                RESULT=new ValueObj(r);
                               RESULT.setLocal();
                                 RESULT.setRNUM();
                            }else if((y.type==Type.IMMEDIATE || y.type==Type.RNUM) && x.type==Type.NUMBER){
                                 a=getRegister();
                                 r=getRegister();
                                 if(y.type==Type.RNUM){
                                    y.name="%"+y.name;
                                }else{
                                     
                                   y.name=""+y.value;
                                     
                                }
                                appendMainBuffer(loadLLVM("%"+a, "double", "double", x.scope+x.name, "8"), true);
                                appendMainBuffer("%"+r+" = "+ operation +" double "+y.name+", %"+a, true);
                                RESULT=new ValueObj(r);
                                RESULT.setLocal();
                                RESULT.setRNUM();
                            }else if(x.type==Type.RNUM && y.type==Type.RNUM ){ //if both operands are register contaning values
                                r=getRegister(); //create return register
                                appendMainBuffer("%"+r+" = "+ operation +" double "+"%"+x.name+", %"+y.name, true); //simply perform the operation
                                RESULT=new ValueObj(r);
                                RESULT.setLocal();
                                RESULT.setRNUM();//set result to RNUM
                            }else if(x.type==Type.RNUM && y.type==Type.IMMEDIATE){
                                r=getRegister(); //create return register
                                appendMainBuffer("%"+r+" = "+ operation +" double "+"%"+x.name+", "+y.value, true); //simply perform the operation
                                RESULT=new ValueObj(r);
                                RESULT.setLocal();
                                RESULT.setRNUM();//set result to RNUM

                            }else if(x.type==Type.IMMEDIATE && y.type==Type.RNUM){
                                r=getRegister(); //create return register
                                appendMainBuffer("%"+r+" = "+ operation +" double "+"%"+y.name+", "+x.value, true); //simply perform the operation
                                RESULT=new ValueObj(r);
                                RESULT.setLocal();
                                RESULT.setRNUM();//set result to RNUM

                            }
                            return RESULT;
                           
    }

     public ValueObj operation(String operation, ValueObj x, ValueObj y){ //type of operation, value of first operand, value of second operand
                            ValueObj RESULT=null; //final result to return
                            String a=null; //variables for registers
                            String b=null;
                            String r=null;
                            String op1=null, op2=null;


                             if(x.type==Type.IMMEDIATE && y.type==Type.IMMEDIATE){ //if both are immediates, perform operation at compile time
                                ///create switch
                                if(operation.compareTo("fadd")==0)
                                    RESULT=new ValueObj(x.value+y.value);
                                else if(operation.compareTo("fsub")==0)
                                    RESULT=new ValueObj(x.value-y.value);
                                else if(operation.compareTo("fmul")==0)
                                    RESULT=new ValueObj(x.value*y.value);
                                else if(operation.compareTo("fdiv")==0)
                                    RESULT=new ValueObj(x.value/y.value);
                                RESULT.type=Type.IMMEDIATE; //the returning value is itself and integer
                            }else{

                                if (x.type==Type.NUMBER){
                                     a=getRegister();
                                     appendMainBuffer(loadLLVM("%"+a, "double", "double", x.scope+x.name, "8"), true); //load value of first
                                     op1="%"+a;
                                }else if(x.type==Type.IMMEDIATE){
                                    op1=""+x.value;
                                }else if(x.type==Type.RNUM){
                                     op1="%"+x.name;
                                }
                                
                                if(y.type==Type.NUMBER){
                                    b=getRegister();
                                    appendMainBuffer(loadLLVM("%"+b, "double", "double", y.scope+y.name, "8" ), true); //load value of second
                                    op2="%"+b;
                                }else if(y.type==Type.IMMEDIATE){
                                    op2=""+y.value;
                                }else if(y.type==Type.RNUM){
                                     op2="%"+y.name;
                                }
                                r=getRegister();
                                appendMainBuffer("%"+r+" = "+ operation +" double "+op1+", " +op2, true); //perform operation and save in register
                                RESULT = new ValueObj(r);
                                RESULT.setLocal();
                                RESULT.setRNUM();
                            }
                           
                           
                            return RESULT;
    } 

    public ValueObj logicExpEval(String operation, ValueObj x, ValueObj y){

            
                    String op1=null;
                    String op2=null;
                    if(x.type == Type.IMMEDIATE){ //if first operand is and immediate
                        op1=""+x.value;             //just store the value
                    }else if(x.type == Type.NUMBER){    //if it is a var
                        String reg=getRegister(); 
                        //loadLLVM(String outName, String outType, String inputType, String inputName, String align )
                        appendMainBuffer(loadLLVM("%"+reg, "double", "double", x.scope+x.name, "8" ),true); //load it
                        op1="%"+reg; //save register where it is loaded
                    }if(y.type == Type.IMMEDIATE){ //same as first operand
                        op2=""+y.value;
                    }else if(y.type == Type.NUMBER){
                        String reg=getRegister();
                         appendMainBuffer(loadLLVM("%"+reg, "double", "double", y.scope+y.name, "8" ), true);
                        op2="%"+reg;
                    }
                    String result = getRegister(); //get register for output
                    appendMainBuffer("%"+result + " = fcmp "+ operation +" double " + op1 +", " + op2, true); //calculate result
                    ValueObj RESULT =  new ValueObj(result); //return new value
                    RESULT.setBool();
                    RESULT.setLocal();
                    
                    return RESULT;

    }   

     public int genLabelString(){
    return indexString++;
    }

    private void printStrings(){

        
        
        stringDecl.append("declare i32 @printf(i8*, ...)\n"); //declare printf instruction
        System.out.println(stringList.size());
        for (int i = 0; i < stringList.size(); i++){
            
            String s = stringList.get(i);
            s = s.substring(1, s.length() - 1);
            int length = s.length();
            if (!s.contains("\\n"))
                length++;
            s = s.replace("\\n", "\\0A");
            s = s + "\\00";
            stringDecl.append("@.str." + i + " = private constant [" + length + " x i8] c\"" + s + "\", align 1\n");
        }
        
    }                 
    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

        
       
       bwr.write(funcBuffer.toString());


              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= func_list NT$0 stmt_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        printStrings();
       bwr.write(stringDecl.toString());
		 bwr.write(globalDecBuffer.toString());
	    bwr.write("define void @main(){\n");
        bwr.write(mainBuffer.toString());
	
	
		bwr.write("ret void\n}");
		bwr.flush();
 
		//close the stream
		bwr.close();
	
	
	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration ::= local_var_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= local_var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= global_var_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= if_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= for_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= print_func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= ret 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= while_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= repeat_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= RO exp RC 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= NUMBER 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new ValueObj(x);

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= MINUS NUMBER 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=new ValueObj(-x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= var 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
             ValueObj tmp = currentSymTable.get(x.name);
            if(tmp == null){
                System.out.println("ERRORE VARIABLE NOT DECLARED");
            }  
            RESULT=tmp;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= NIL 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= func_call 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp PLUS exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=operation("fadd", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp MINUS exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=operation("fsub", x, y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp STAR exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=operation("fmul", x, y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp DIV exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=operation("fdiv", x, y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp HAT exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp AND exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                         
                    String r = getRegister();
                    appendMainBuffer("%"+r+ " = and" + " i1 " + x.scope+x.name+", "+ y.scope+y.name, true );
                    ValueObj bool = new ValueObj(r);
                    bool.setBool();
                    bool.setLocal();
                    RESULT = bool;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp OR exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                         
                    String r = getRegister();
                    appendMainBuffer("%"+r+ " = or" + " i1 " + x.scope+x.name+", "+ y.scope+y.name, true );
                    ValueObj bool = new ValueObj(r);
                    bool.setBool();
                    bool.setLocal();
                    RESULT = bool;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= NOT exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                         
                    System.out.println("NOT bitwise operation not supported!!");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp EQ EQ exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=logicExpEval("oeq", x, y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp NOTEQ exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=logicExpEval("one", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp MIN exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=logicExpEval("olt", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp MAJ exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=logicExpEval("ogt", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp MIN_EQ exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=logicExpEval("ole", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp MAJ_EQ exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=logicExpEval("oge", x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= RO error RC 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ass_list ::= ass_list CM ass_exp 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 currentSymTable.expList.add(x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ass_list ::= ass_exp 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 currentSymTable.expList.add(x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ass_exp ::= exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT=x;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_exp",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ass_exp ::= array_dec 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_exp",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // array_dec ::= BO ass_list BC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // array_dec ::= BO BC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // local_var_list ::= LOCAL var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // local_var_init ::= local_var_list EQ ass_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var_init",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // global_var_init ::= var_list EQ ass_list 
            {
              Object RESULT =null;
		//check is sizes match and generate error if not
                                            for(int i=0; i<currentSymTable.varList.size(); i++){ //var list stores the ValueObj of those var
                                                ValueObj ValueObjectOfVar = currentSymTable.varList.get(i); //get valueObj of that var
                                                ValueObj tmp = currentSymTable.varTable.get(ValueObjectOfVar.name); //try to get it from symbol table
                                                 if(tmp == null){				                     //if null, it has never been declared
		                                         currentSymTable.varTable.put(ValueObjectOfVar.name, ValueObjectOfVar); //put in simbol table
                                                 initVar(ValueObjectOfVar, currentSymTable.expList.get(i)); //init var
                                                 }else{
                                                    initVar(tmp, currentSymTable.expList.get(i)); //if it has been already declared, pass the valueObj of the symbol table
                                                    }
                                               
                                            }
                                            currentSymTable.varList.clear();
                                            currentSymTable.expList.clear();
                                            
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_var_init",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment ::= var EQ ass_exp 
            {
              ValueObj RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        ValueObj tmp = currentSymTable.varTable.get(n.name);
                        if(tmp == null){				                    
		                    currentSymTable.varTable.put(n.name, n);
                            RESULT = initVar(n, x);
                        }else{
                        RESULT = initVar(tmp, x);
                        }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // var_list ::= var_list CM var 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  currentSymTable.varList.add(x) ;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var_list ::= var 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.currentSymTable.varList.add(x);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var ::= ID 
            {
              ValueObj RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ValueObj(n);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var ::= ID SO exp SC 
            {
              ValueObj RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // block ::= DO stmt_list END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // loop_cond ::= exp 
            {
              ValueObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_cond",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$1 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            loopCount = ++totLoopCount;
                            loopList.push(loopCount);    
                            appendMainBuffer(("br label %for.cond." + loopCount), true);
                            appendMainBuffer(("for.cond." + loopCount + ":"), true);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 //what to allow?
                            appendMainBuffer(("br i1 " + x.scope+x.name + ", label %for.body." + loopCount + ", label %for.exit." + loopCount), true);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                            appendMainBuffer(("for.inc." + loopCount + ":"), true);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            ValueObj tmp=operation("fadd", n, y);
                            initVar(n, tmp);
                            appendMainBuffer(("br label %for.cond." + loopCount), true);
                            appendMainBuffer(("for.body." + loopCount + ":"), true);
                            
                            //need to increase the variable in the assignement 1. modify initVar to return the var to assignemnt 2.
                            // 2. retrieve it from the stack
                            // 3. generate statement
                            
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // for_loop ::= FOR assignment NT$1 CM loop_cond NT$2 CM NT$3 exp NT$4 DO stmt_list END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ValueObj n = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ValueObj y = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                            loopCount=loopList.pop(); //restore it when statement is finished
                            appendMainBuffer(("br label %for.inc." + loopCount), true);
                            appendMainBuffer(("for.exit." + loopCount + ":"), true);

                            
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$5 ::= 
            {
              Object RESULT =null;

                        loopCount = ++totLoopCount;
                        loopList.push(loopCount); //when entering a statement, save the loop number on the stack
                        appendMainBuffer(("br label %for.cond." + loopCount), true);
                        appendMainBuffer(("for.cond." + loopCount + ":"), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                        appendMainBuffer(("br i1 " + x.scope+x.name + ", label %for.body." + loopCount + ", label %for.exit." + loopCount), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                        appendMainBuffer(("for.body." + loopCount + ":"), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // while_loop ::= WHILE NT$5 loop_cond NT$6 DO NT$7 stmt_list END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                        loopCount=loopList.pop(); //restore it when statement is finished
                        appendMainBuffer(("br label %for.cond." + loopCount), true);
                        appendMainBuffer(("for.exit." + loopCount + ":"), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_loop",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // repeat_loop ::= REPEAT stmt_list UNTIL loop_cond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_loop",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$8 ::= 
            {
              Object RESULT =null;
 
                    loopCount = ++totLoopCount; loopList.push(loopCount);//when entering a statement, save the loop number on the stack
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    appendMainBuffer(("br i1 " + x.scope+x.name + ", label %if.body." + loopCount + ", label %if.else." + loopCount), true);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                    appendMainBuffer(("if.body." + loopCount + ":"), true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if_block ::= IF NT$8 exp NT$9 THEN NT$10 stmt_list else_block END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ValueObj x = (ValueObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_block ::= IF error else_block END 
            {
              Object RESULT =null;
		 System.out.println("error");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$11 ::= 
            {
              Object RESULT =null;
 
                     appendMainBuffer(("br label %if.exit." + loopCount), true);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
                    appendMainBuffer(("if.else." + loopCount + ":"), true); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // else_block ::= NT$11 ELSE NT$12 stmt_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    loopList.push(loopCount);
                    appendMainBuffer(("br label %if.exit." + loopCount), true);
                    appendMainBuffer(("if.exit." + loopCount + ":"), true);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // else_block ::= 
            {
              Object RESULT =null;
		
                        loopCount=loopList.pop();//restore it when statement is finished
                        appendMainBuffer(("br label %if.else." + loopCount), true);
                        appendMainBuffer(("if.else." + loopCount + ":"), true);   
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // func_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // func_list ::= func_list function_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$13 ::= 
            {
              Object RESULT =null;
 currentSymTable = new SymbolTable(currentSymTable); 
                              currentSymTable.currentBuffer=funcBuffer;

                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // function_decl ::= FUNCTION NT$13 ID RO func_param_list RC stmt_list END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 currentSymTable = currentSymTable.prev; currentSymTable.currentBuffer=mainBuffer; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ret ::= RETURN exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // print_func ::= PRINT RO STRING RC 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    int label = genLabelString();
    
    String s = value;
    s = s.substring(1, s.length() - 1);
    int length = s.length();
    if (!s.contains("\\n"))
    length++;
    s = s.replace("\\n", "\\0A");
    s = s + "\\00";
    
    appendMainBuffer(("%" + getRegister() + " = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([" + length + " x i8], [" + length + " x i8]* @.str." + label + ", i32 0, i32 0))"), true);
    stringList.add(value);
   
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_func",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // func_param_list ::= func_param_list CM exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_param_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // func_param_list ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_param_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // func_call ::= ID RO func_param_list RC 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
